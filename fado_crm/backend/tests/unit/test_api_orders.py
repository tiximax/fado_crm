# FADO CRM - Order API Unit Tests # Comprehensive testing cho Order endpoints import pytest from fastapi import status from tests.conftest import generate_order_payload class TestOrderAPI: """ Order API test suite""" async def test_get_orders_empty(self, async_client, db_session): """Test getting orders when database is empty""" response = await async_client.get("/don-hang/") assert response.status_code == status.HTTP_200_OK assert response.json() == [] async def test_get_orders_with_data(self, async_client, sample_order): """Test getting orders with data""" response = await async_client.get("/don-hang/") assert response.status_code == status.HTTP_200_OK data = response.json() assert len(data) >= 1 assert "id" in data[0] assert "khach_hang_id" in data[0] assert "trang_thai" in data[0] async def test_create_order_success(self, async_client, sample_customer, sample_product): """Test successful order creation""" order_data = generate_order_payload( khach_hang_id=sample_customer.id, san_pham_ids=[sample_product.id] ) response = await async_client.post("/don-hang/", json=order_data) assert response.status_code == status.HTTP_200_OK data = response.json() assert data["khach_hang_id"] == sample_customer.id assert data["trang_thai"] == order_data["trang_thai"] assert "id" in data assert "tong_tien" in data assert data["tong_tien"] > 0 # Should calculate total from items async def test_create_order_invalid_customer(self, async_client, sample_product): """Test creating order with invalid customer ID""" order_data = generate_order_payload( khach_hang_id=99999, # Non-existent customer san_pham_ids=[sample_product.id] ) response = await async_client.post("/don-hang/", json=order_data) assert response.status_code == status.HTTP_404_NOT_FOUND data = response.json() assert "Khong tim thay khach hang" in data["detail"] async def test_create_order_invalid_product(self, async_client, sample_customer): """Test creating order with invalid product ID""" order_data = generate_order_payload( khach_hang_id=sample_customer.id, san_pham_ids=[99999] # Non-existent product ) response = await async_client.post("/don-hang/", json=order_data) assert response.status_code == status.HTTP_400_BAD_REQUEST data = response.json() assert "san pham khong ton tai" in data["detail"] async def test_create_order_empty_items(self, async_client, sample_customer): """Test creating order with empty items""" order_data = { "khach_hang_id": sample_customer.id, "trang_thai": "cho_xac_nhan", "chi_tiet_don_hang": [] # Empty items } response = await async_client.post("/don-hang/", json=order_data) assert response.status_code == status.HTTP_400_BAD_REQUEST data = response.json() assert "it nhat mot san pham" in data["detail"] async def test_create_order_multiple_products(self, async_client, sample_customer, multiple_products): """Test creating order with multiple products""" product_ids = [p.id for p in multiple_products[:3]] # First 3 products order_data = generate_order_payload( khach_hang_id=sample_customer.id, san_pham_ids=product_ids ) response = await async_client.post("/don-hang/", json=order_data) assert response.status_code == status.HTTP_200_OK data = response.json() assert len(data["chi_tiet_don_hang"]) == 3 assert data["tong_tien"] > 0 async def test_get_order_by_id_success(self, async_client, sample_order): """Test getting single order by ID""" response = await async_client.get(f"/don-hang/{sample_order.id}") assert response.status_code == status.HTTP_200_OK data = response.json() assert data["id"] == sample_order.id assert "khach_hang" in data # Should include customer details assert "chi_tiet_don_hang" in data # Should include order items async def test_get_order_by_id_not_found(self, async_client, db_session): """Test getting non-existent order""" response = await async_client.get("/don-hang/99999") assert response.status_code == status.HTTP_404_NOT_FOUND data = response.json() assert "Khong tim thay don hang" in data["detail"] async def test_update_order_success(self, async_client, sample_order): """Test successful order update""" update_data = { "trang_thai": "da_xac_nhan", "ghi_chu": "Updated order notes" } response = await async_client.put(f"/don-hang/{sample_order.id}", json=update_data) assert response.status_code == status.HTTP_200_OK data = response.json() assert data["trang_thai"] == "da_xac_nhan" assert data["ghi_chu"] == "Updated order notes" async def test_update_order_not_found(self, async_client, db_session): """Test updating non-existent order""" update_data = {"trang_thai": "da_xac_nhan"} response = await async_client.put("/don-hang/99999", json=update_data) assert response.status_code == status.HTTP_404_NOT_FOUND async def test_order_status_validation(self, async_client, sample_order): """Test order status enum validation""" # Valid statuses valid_statuses = [ "cho_xac_nhan", "da_xac_nhan", "dang_mua", "da_mua", "dang_ship", "da_nhan", "huy" ] for status_val in valid_statuses: update_data = {"trang_thai": status_val} response = await async_client.put(f"/don-hang/{sample_order.id}", json=update_data) assert response.status_code == status.HTTP_200_OK data = response.json() assert data["trang_thai"] == status_val # Invalid status invalid_data = {"trang_thai": "invalid_status"} response = await async_client.put(f"/don-hang/{sample_order.id}", json=invalid_data) assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY async def test_order_filtering_by_status(self, async_client, sample_customer, sample_product): """Test filtering orders by status""" # Create orders with different statuses statuses = ["cho_xac_nhan", "da_xac_nhan", "da_mua"] created_orders = [] for status_val in statuses: order_data = generate_order_payload( khach_hang_id=sample_customer.id, san_pham_ids=[sample_product.id], trang_thai=status_val ) response = await async_client.post("/don-hang/", json=order_data) assert response.status_code == status.HTTP_200_OK created_orders.append(response.json()) # Filter by specific status response = await async_client.get("/don-hang/?trang_thai=da_xac_nhan") assert response.status_code == status.HTTP_200_OK data = response.json() for order in data: assert order["trang_thai"] == "da_xac_nhan" async def test_order_filtering_by_customer(self, async_client, multiple_customers, sample_product): """Test filtering orders by customer""" # Create orders for different customers customer1, customer2 = multiple_customers[0], multiple_customers[1] # Create order for customer1 order_data1 = generate_order_payload( khach_hang_id=customer1.id, san_pham_ids=[sample_product.id] ) response1 = await async_client.post("/don-hang/", json=order_data1) assert response1.status_code == status.HTTP_200_OK # Create order for customer2 order_data2 = generate_order_payload( khach_hang_id=customer2.id, san_pham_ids=[sample_product.id] ) response2 = await async_client.post("/don-hang/", json=order_data2) assert response2.status_code == status.HTTP_200_OK # Filter by customer1 response = await async_client.get(f"/don-hang/?khach_hang_id={customer1.id}") assert response.status_code == status.HTTP_200_OK data = response.json() for order in data: assert order["khach_hang_id"] == customer1.id async def test_order_pagination(self, async_client, sample_customer, sample_product): """Test order pagination""" # Create multiple orders for i in range(5): order_data = generate_order_payload( khach_hang_id=sample_customer.id, san_pham_ids=[sample_product.id] ) response = await async_client.post("/don-hang/", json=order_data) assert response.status_code == status.HTTP_200_OK # Test pagination response = await async_client.get("/don-hang/?skip=2&limit=2") assert response.status_code == status.HTTP_200_OK data = response.json() assert len(data) == 2 async def test_order_total_calculation(self, async_client, sample_customer, multiple_products): """Test order total calculation""" # Create order with specific quantities and prices order_data = { "khach_hang_id": sample_customer.id, "trang_thai": "cho_xac_nhan", "chi_tiet_don_hang": [ { "san_pham_id": multiple_products[0].id, "so_luong": 2, "gia_mua": 100.0 }, { "san_pham_id": multiple_products[1].id, "so_luong": 3, "gia_mua": 50.0 } ] } response = await async_client.post("/don-hang/", json=order_data) assert response.status_code == status.HTTP_200_OK data = response.json() expected_total = (2 * 100.0) + (3 * 50.0) # 350.0 assert abs(data["tong_tien"] - expected_total) < 0.01 # Allow for floating point precision class TestOrderModels: """Test order data models and relationships""" def test_order_model_creation(self, db_session, sample_customer): """Test creating order model instance""" from models import DonHang order = DonHang( khach_hang_id=sample_customer.id, trang_thai="cho_xac_nhan", ghi_chu="Test order" ) db_session.add(order) db_session.commit() assert order.id is not None assert order.khach_hang_id == sample_customer.id assert order.ngay_tao is not None assert order.tong_tien == 0.0 # No items yet def test_order_item_relationship(self, db_session, sample_order): """Test order-item relationship""" # Order should have items from fixture assert len(sample_order.chi_tiet_don_hang) >= 1 order_item = sample_order.chi_tiet_don_hang[0] assert order_item.don_hang_id == sample_order.id assert order_item.san_pham is not None # Should have product relationship def test_order_customer_relationship(self, db_session, sample_order): """Test order-customer relationship""" assert sample_order.khach_hang is not None assert sample_order.khach_hang.id == sample_order.khach_hang_id def test_order_schema_validation(self): """Test order Pydantic schema validation""" from schemas import DonHangCreate, DonHang # Valid order creation data order_create_data = { "khach_hang_id": 1, "trang_thai": "cho_xac_nhan", "ghi_chu": "Test order", "chi_tiet_don_hang": [ { "san_pham_id": 1, "so_luong": 2, "gia_mua": 100.0 } ] } schema = DonHangCreate(**order_create_data) assert schema.khach_hang_id == 1 assert len(schema.chi_tiet_don_hang) == 1 # Order API tests hoan thanh! 