# Tests for storage drivers import os from pathlib import Path from storage import LocalStorageDriver def test_local_storage_save_and_url(tmp_path: Path): base_dir = tmp_path / "uploads_local" driver = LocalStorageDriver(base_dir=str(base_dir)) data = b"hello world" url = driver.save_bytes("documents", "hello.txt", data) # File is saved under base_dir/category/filename saved_path = base_dir / "documents" / "hello.txt" assert saved_path.exists() assert saved_path.read_bytes() == data # URL mapping should point to the /uploads prefix (served by FastAPI in dev) assert url == "/uploads/documents/hello.txt" def test_local_storage_exists_and_delete(tmp_path: Path): base_dir = tmp_path / "uploads_local" driver = LocalStorageDriver(base_dir=str(base_dir)) img_bytes = b"\xff\xd8\xff\xd9" # minimal JPEG bytes (SOI+EOI) driver.save_bytes("product_images", "test.jpg", img_bytes) assert driver.exists("product_images", "test.jpg") is True # Delete and verify assert driver.delete("product_images", "test.jpg") is True assert driver.exists("product_images", "test.jpg") is False def test_local_storage_list(tmp_path: Path): base_dir = tmp_path / "uploads_local" driver = LocalStorageDriver(base_dir=str(base_dir)) # Save two files in documents driver.save_bytes("documents", "a.txt", b"A") driver.save_bytes("documents", "b.txt", b"B") items = driver.list("documents") names = [it["filename"] for it in items] assert "a.txt" in names and "b.txt" in names # URLs should map to /uploads/documents/{name} assert any(it["url"] == "/uploads/documents/a.txt" for it in items) assert any(it["url"] == "/uploads/documents/b.txt" for it in items)
