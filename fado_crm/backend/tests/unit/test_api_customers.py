# FADO CRM - Customer API Unit Tests # Comprehensive testing cho Customer endpoints import pytest from fastapi import status from tests.conftest import generate_customer_payload class TestCustomerAPI: """ Customer API test suite""" async def test_get_customers_empty(self, async_client, db_session): """Test getting customers when database is empty""" response = await async_client.get("/khach-hang/") assert response.status_code == status.HTTP_200_OK assert response.json() == [] async def test_get_customers_with_data(self, async_client, multiple_customers): """Test getting customers with data""" response = await async_client.get("/khach-hang/") assert response.status_code == status.HTTP_200_OK data = response.json() assert len(data) == 10 # From multiple_customers fixture assert "ho_ten" in data[0] assert "email" in data[0] async def test_get_customers_pagination(self, async_client, multiple_customers): """Test customer pagination""" response = await async_client.get("/khach-hang/?skip=3&limit=5") assert response.status_code == status.HTTP_200_OK data = response.json() assert len(data) == 5 async def test_create_customer_success(self, async_client, db_session): """Test successful customer creation""" customer_data = generate_customer_payload() response = await async_client.post("/khach-hang/", json=customer_data) assert response.status_code == status.HTTP_200_OK data = response.json() assert data["ho_ten"] == customer_data["ho_ten"] assert data["email"] == customer_data["email"] assert "id" in data assert "ngay_tao" in data async def test_create_customer_duplicate_email(self, async_client, sample_customer): """Test creating customer with duplicate email""" duplicate_data = generate_customer_payload(email=sample_customer.email) response = await async_client.post("/khach-hang/", json=duplicate_data) assert response.status_code == status.HTTP_400_BAD_REQUEST data = response.json() assert "Email nay da duoc su dung" in data["detail"] async def test_create_customer_invalid_data(self, async_client, db_session): """Test customer creation with invalid data""" # Missing required field invalid_data = {"ho_ten": "Test Customer"} response = await async_client.post("/khach-hang/", json=invalid_data) assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY # Invalid email format invalid_data = generate_customer_payload(email="not-an-email") response = await async_client.post("/khach-hang/", json=invalid_data) assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY async def test_get_customer_by_id_success(self, async_client, sample_customer): """Test getting single customer by ID""" response = await async_client.get(f"/khach-hang/{sample_customer.id}") assert response.status_code == status.HTTP_200_OK data = response.json() assert data["id"] == sample_customer.id assert data["ho_ten"] == sample_customer.ho_ten async def test_get_customer_by_id_not_found(self, async_client, db_session): """Test getting non-existent customer""" response = await async_client.get("/khach-hang/99999") assert response.status_code == status.HTTP_404_NOT_FOUND data = response.json() assert "Khong tim thay khach hang" in data["detail"] async def test_update_customer_success(self, async_client, sample_customer): """Test successful customer update""" update_data = { "ho_ten": "Updated Customer Name", "loai_khach_hang": "vip" } response = await async_client.put(f"/khach-hang/{sample_customer.id}", json=update_data) assert response.status_code == status.HTTP_200_OK data = response.json() assert data["ho_ten"] == "Updated Customer Name" assert data["loai_khach_hang"] == "vip" assert data["id"] == sample_customer.id async def test_update_customer_not_found(self, async_client, db_session): """Test updating non-existent customer""" update_data = {"ho_ten": "Updated Name"} response = await async_client.put("/khach-hang/99999", json=update_data) assert response.status_code == status.HTTP_404_NOT_FOUND async def test_customer_type_validation(self, async_client, db_session): """Test customer type enum validation""" # Valid customer types valid_types = ["regular", "vip", "premium"] for customer_type in valid_types: customer_data = generate_customer_payload(loai_khach_hang=customer_type) response = await async_client.post("/khach-hang/", json=customer_data) assert response.status_code == status.HTTP_200_OK data = response.json() assert data["loai_khach_hang"] == customer_type # Invalid customer type invalid_data = generate_customer_payload(loai_khach_hang="invalid_type") response = await async_client.post("/khach-hang/", json=invalid_data) assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY async def test_customer_search_by_name(self, async_client, multiple_customers): """Test searching customers by name""" # Get first customer's name for search first_customer = multiple_customers[0] search_term = first_customer.ho_ten.split()[0] # First word of name response = await async_client.get(f"/khach-hang/?search={search_term}") assert response.status_code == status.HTTP_200_OK data = response.json() # Should find at least the customer we're searching for found_customer_ids = [c["id"] for c in data] assert first_customer.id in found_customer_ids async def test_customer_filter_by_type(self, async_client, multiple_customers): """Test filtering customers by type""" # Filter by VIP customers response = await async_client.get("/khach-hang/?loai_khach_hang=vip") assert response.status_code == status.HTTP_200_OK data = response.json() for customer in data: assert customer["loai_khach_hang"] == "vip" class TestCustomerModels: """Test customer data models and validation""" def test_customer_model_creation(self, db_session, sample_customer_data): """Test creating customer model instance""" from models import KhachHang customer = KhachHang(**sample_customer_data) db_session.add(customer) db_session.commit() assert customer.id is not None assert customer.ho_ten == sample_customer_data["ho_ten"] assert customer.ngay_tao is not None def test_customer_schema_validation(self, sample_customer_data): """Test customer Pydantic schema validation""" from schemas import KhachHangCreate, KhachHang # Valid data schema = KhachHangCreate(**sample_customer_data) assert schema.ho_ten == sample_customer_data["ho_ten"] # Test schema with ID (for responses) data_with_id = {**sample_customer_data, "id": 1, "ngay_tao": "2023-01-01T00:00:00"} response_schema = KhachHang(**data_with_id) assert response_schema.id == 1 def test_customer_email_uniqueness(self, db_session): """Test email uniqueness constraint""" from models import KhachHang from sqlalchemy.exc import IntegrityError # Create first customer customer1 = KhachHang( ho_ten="Customer 1", email="test@example.com", so_dien_thoai="1234567890" ) db_session.add(customer1) db_session.commit() # Try to create second customer with same email customer2 = KhachHang( ho_ten="Customer 2", email="test@example.com", # Same email so_dien_thoai="0987654321" ) db_session.add(customer2) # Should raise integrity error with pytest.raises(IntegrityError): db_session.commit() # Customer API tests hoan thanh!
