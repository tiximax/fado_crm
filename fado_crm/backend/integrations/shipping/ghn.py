# -*- coding: utf-8 -*- """ Giao Hang Nhanh (GHN) Shipping Integration Tich hop van chuyen voi GHN - nha cung cap logistics #1 Viet Nam """ import requests import json from datetime import datetime, timedelta from typing import Dict, List, Optional, Any from enum import Enum from logging_config import app_logger class GHNServiceType(Enum): """GHN Service Types""" STANDARD = 2 # Tieu chuan EXPRESS = 5 # Hoa toc class GHNPaymentType(Enum): """GHN Payment Types""" SHOP_PAYS = 1 # Shop tra phi CUSTOMER_PAYS = 2 # Khach hang tra phi class GHNShippingGateway: """Giao Hang Nhanh Shipping Gateway Integration""" def __init__(self, api_token: str, shop_id: int, is_sandbox: bool = True): self.api_token = api_token self.shop_id = shop_id self.is_sandbox = is_sandbox # GHN API URLs if is_sandbox: self.base_url = "https://dev-online-gateway.ghn.vn/shiip/public-api" else: self.base_url = "https://online-gateway.ghn.vn/shiip/public-api" # API endpoints self.endpoints = { 'provinces': f"{self.base_url}/master-data/province", 'districts': f"{self.base_url}/master-data/district", 'wards': f"{self.base_url}/master-data/ward", 'services': f"{self.base_url}/v2/shipping-order/available-services", 'fee': f"{self.base_url}/v2/shipping-order/fee", 'create_order': f"{self.base_url}/v2/shipping-order/create", 'order_info': f"{self.base_url}/v2/shipping-order/detail", 'cancel_order': f"{self.base_url}/v2/shipping-order/cancel", 'update_cod': f"{self.base_url}/v2/shipping-order/updateCOD", 'print_order': f"{self.base_url}/v2/a5/gen-token" } # Default headers self.headers = { 'Content-Type': 'application/json', 'Token': self.api_token, 'ShopId': str(self.shop_id) } app_logger.info(f" GHN Gateway initialized - {'Sandbox' if is_sandbox else 'Production'}") def get_provinces(self) -> Dict[str, Any]: """ Lay danh sach tinh/thanh pho""" try: response = requests.get( self.endpoints['provinces'], headers=self.headers, timeout=30 ) if response.status_code == 200: data = response.json() if data.get('code') == 200: return { 'success': True, 'provinces': data.get('data', []) } else: return { 'success': False, 'error': data.get('message', 'Loi khong xac dinh') } else: return { 'success': False, 'error': f'HTTP Error {response.status_code}' } except Exception as e: app_logger.error(f" Error getting provinces: {str(e)}") return { 'success': False, 'error': f'Loi khi lay danh sach tinh: {str(e)}' } def get_districts(self, province_id: int) -> Dict[str, Any]: """ Lay danh sach quan/huyen theo tinh""" try: response = requests.post( self.endpoints['districts'], headers=self.headers, json={"province_id": province_id}, timeout=30 ) if response.status_code == 200: data = response.json() if data.get('code') == 200: return { 'success': True, 'districts': data.get('data', []) } else: return { 'success': False, 'error': data.get('message', 'Loi khong xac dinh') } else: return { 'success': False, 'error': f'HTTP Error {response.status_code}' } except Exception as e: app_logger.error(f" Error getting districts: {str(e)}") return { 'success': False, 'error': f'Loi khi lay danh sach quan/huyen: {str(e)}' } def get_wards(self, district_id: int) -> Dict[str, Any]: """ Lay danh sach phuong/xa theo quan/huyen""" try: response = requests.post( self.endpoints['wards'], headers=self.headers, json={"district_id": district_id}, timeout=30 ) if response.status_code == 200: data = response.json() if data.get('code') == 200: return { 'success': True, 'wards': data.get('data', []) } else: return { 'success': False, 'error': data.get('message', 'Loi khong xac dinh') } else: return { 'success': False, 'error': f'HTTP Error {response.status_code}' } except Exception as e: app_logger.error(f" Error getting wards: {str(e)}") return { 'success': False, 'error': f'Loi khi lay danh sach phuong/xa: {str(e)}' } def calculate_shipping_fee(self, shipping_data: Dict[str, Any]) -> Dict[str, Any]: """ Tinh phi van chuyen""" try: # Validate required fields required_fields = [ 'from_district_id', 'from_ward_code', 'to_district_id', 'to_ward_code', 'weight', 'service_type_id' ] for field in required_fields: if field not in shipping_data: return { 'success': False, 'error': f'Thieu truong bat buoc: {field}' } # Prepare request data fee_request = { "from_district_id": shipping_data['from_district_id'], "from_ward_code": shipping_data['from_ward_code'], "to_district_id": shipping_data['to_district_id'], "to_ward_code": shipping_data['to_ward_code'], "weight": shipping_data['weight'], "service_type_id": shipping_data['service_type_id'], "insurance_value": shipping_data.get('insurance_value', 0), "coupon": shipping_data.get('coupon'), "cod_failed_amount": shipping_data.get('cod_amount', 0), "height": shipping_data.get('height', 5), "length": shipping_data.get('length', 20), "width": shipping_data.get('width', 20) } response = requests.post( self.endpoints['fee'], headers=self.headers, json=fee_request, timeout=30 ) if response.status_code == 200: data = response.json() if data.get('code') == 200: fee_data = data.get('data', {}) return { 'success': True, 'total_fee': fee_data.get('total', 0), 'service_fee': fee_data.get('service_fee', 0), 'insurance_fee': fee_data.get('insurance_fee', 0), 'pick_station_fee': fee_data.get('pick_station_fee', 0), 'coupon_value': fee_data.get('coupon_value', 0), 'r2s_fee': fee_data.get('r2s_fee', 0), 'delivery_type': fee_data.get('delivery_type'), 'calculated_at': datetime.now().isoformat() } else: return { 'success': False, 'error': data.get('message', 'Loi tinh phi van chuyen') } else: return { 'success': False, 'error': f'HTTP Error {response.status_code}' } except Exception as e: app_logger.error(f" Error calculating shipping fee: {str(e)}") return { 'success': False, 'error': f'Loi khi tinh phi van chuyen: {str(e)}' } def create_shipping_order(self, order_data: Dict[str, Any]) -> Dict[str, Any]: """ Tao don hang van chuyen""" try: # Validate required fields required_fields = [ 'to_name', 'to_phone', 'to_address', 'to_district_id', 'to_ward_code', 'weight', 'service_type_id' ] for field in required_fields: if field not in order_data: return { 'success': False, 'error': f'Thieu truong bat buoc: {field}' } # Prepare shipping order data shipping_order = { "payment_type_id": order_data.get('payment_type_id', GHNPaymentType.SHOP_PAYS.value), "note": order_data.get('note', f"Don hang FADO #{order_data.get('order_id', '')}"), "from_name": order_data.get('from_name', 'FADO Store'), "from_phone": order_data.get('from_phone', '0123456789'), "from_address": order_data.get('from_address', 'FADO Warehouse'), "from_ward_name": order_data.get('from_ward_name', 'Phuong 1'), "from_district_name": order_data.get('from_district_name', 'Quan 1'), "from_province_name": order_data.get('from_province_name', 'Ho Chi Minh'), "to_name": order_data['to_name'], "to_phone": order_data['to_phone'], "to_address": order_data['to_address'], "to_ward_code": order_data['to_ward_code'], "to_district_id": order_data['to_district_id'], "cod_amount": order_data.get('cod_amount', 0), "content": order_data.get('content', 'Hang hoa'), "weight": order_data['weight'], "length": order_data.get('length', 20), "width": order_data.get('width', 20), "height": order_data.get('height', 5), "pick_station_id": order_data.get('pick_station_id'), "deliver_station_id": order_data.get('deliver_station_id'), "insurance_value": order_data.get('insurance_value', 0), "service_type_id": order_data['service_type_id'], "coupon": order_data.get('coupon'), "pickup_time": order_data.get('pickup_time', int((datetime.now() + timedelta(hours=1)).timestamp())), "items": order_data.get('items', []) } response = requests.post( self.endpoints['create_order'], headers=self.headers, json=shipping_order, timeout=30 ) if response.status_code == 200: data = response.json() if data.get('code') == 200: order_info = data.get('data', {}) app_logger.info(f" GHN order created: {order_info.get('order_code')}") return { 'success': True, 'order_code': order_info.get('order_code'), 'sort_code': order_info.get('sort_code'), 'trans_type': order_info.get('trans_type'), 'ward_encode': order_info.get('ward_encode'), 'district_encode': order_info.get('district_encode'), 'fee': order_info.get('fee', {}), 'total_fee': order_info.get('total_fee', 0), 'expected_delivery_time': order_info.get('expected_delivery_time'), 'operation_partner': order_info.get('operation_partner'), 'created_at': datetime.now().isoformat() } else: return { 'success': False, 'error': data.get('message', 'Loi tao don van chuyen'), 'error_code': data.get('code') } else: return { 'success': False, 'error': f'HTTP Error {response.status_code}' } except Exception as e: app_logger.error(f" Error creating shipping order: {str(e)}") return { 'success': False, 'error': f'Loi khi tao don van chuyen: {str(e)}' } def get_order_info(self, order_code: str) -> Dict[str, Any]: """ Lay thong tin don hang van chuyen""" try: response = requests.post( self.endpoints['order_info'], headers=self.headers, json={"order_code": order_code}, timeout=30 ) if response.status_code == 200: data = response.json() if data.get('code') == 200: order_info = data.get('data', {}) return { 'success': True, 'order_code': order_info.get('order_code'), 'status': order_info.get('status'), 'status_text': self._get_status_text(order_info.get('status')), 'created_date': order_info.get('created_date'), 'updated_date': order_info.get('updated_date'), 'pick_money': order_info.get('pick_money'), 'deliver_money': order_info.get('deliver_money'), 'money_collection': order_info.get('money_collection'), 'from_name': order_info.get('from_name'), 'from_phone': order_info.get('from_phone'), 'to_name': order_info.get('to_name'), 'to_phone': order_info.get('to_phone'), 'to_address': order_info.get('to_address'), 'content': order_info.get('content'), 'weight': order_info.get('weight'), 'fee': order_info.get('fee'), 'service_type': order_info.get('service_type'), 'payment_type': order_info.get('payment_type'), 'custom_service_fee': order_info.get('custom_service_fee'), 'sort_code': order_info.get('sort_code'), 'logs': order_info.get('logs', []), 'updated_at': datetime.now().isoformat() } else: return { 'success': False, 'error': data.get('message', 'Khong tim thay don hang') } else: return { 'success': False, 'error': f'HTTP Error {response.status_code}' } except Exception as e: app_logger.error(f" Error getting order info: {str(e)}") return { 'success': False, 'error': f'Loi khi lay thong tin don hang: {str(e)}' } def cancel_order(self, order_codes: List[str]) -> Dict[str, Any]: """ Huy don hang van chuyen""" try: response = requests.post( self.endpoints['cancel_order'], headers=self.headers, json={"order_codes": order_codes}, timeout=30 ) if response.status_code == 200: data = response.json() if data.get('code') == 200: app_logger.info(f" GHN orders cancelled: {order_codes}") return { 'success': True, 'cancelled_orders': order_codes, 'cancelled_at': datetime.now().isoformat() } else: return { 'success': False, 'error': data.get('message', 'Loi huy don hang') } else: return { 'success': False, 'error': f'HTTP Error {response.status_code}' } except Exception as e: app_logger.error(f" Error cancelling orders: {str(e)}") return { 'success': False, 'error': f'Loi khi huy don hang: {str(e)}' } def get_available_services(self, from_district: int, to_district: int) -> Dict[str, Any]: """ Lay danh sach dich vu co san""" try: response = requests.post( self.endpoints['services'], headers=self.headers, json={ "shop_id": self.shop_id, "from_district": from_district, "to_district": to_district }, timeout=30 ) if response.status_code == 200: data = response.json() if data.get('code') == 200: return { 'success': True, 'services': data.get('data', []) } else: return { 'success': False, 'error': data.get('message', 'Loi lay dich vu') } else: return { 'success': False, 'error': f'HTTP Error {response.status_code}' } except Exception as e: app_logger.error(f" Error getting available services: {str(e)}") return { 'success': False, 'error': f'Loi khi lay danh sach dich vu: {str(e)}' } def _get_status_text(self, status: str) -> str: """ Chuyen doi status code thanh text""" status_mapping = { 'ready_to_pick': 'Cho lay hang', 'picking': 'Dang lay hang', 'cancel': 'Da huy', 'money_collect_picking': 'Dang thu tien nguoi gui', 'picked': 'Da lay hang', 'storing': 'Hang nhap kho', 'transporting': 'Dang luan chuyen', 'sorting': 'Dang phan loai', 'delivering': 'Dang giao hang', 'money_collect_delivering': 'Dang thu tien nguoi nhan', 'delivered': 'Da giao hang', 'delivery_fail': 'Giao hang that bai', 'waiting_to_return': 'Cho tra hang', 'return': 'Tra hang', 'return_transporting': 'Dang luan chuyen tra', 'return_sorting': 'Phan loai tra', 'returning': 'Dang tra hang', 'return_fail': 'Tra hang that bai', 'returned': 'Da tra hang', 'exception': 'Don hang ngoai le', 'damage': 'Hang bi hu hong', 'lost': 'Hang bi that lac' } return status_mapping.get(status, f'Trang thai khong xac dinh ({status})') def create_print_token(self, order_codes: List[str]) -> Dict[str, Any]: """ Tao token in don hang""" try: response = requests.post( self.endpoints['print_order'], headers=self.headers, json={"order_codes": order_codes}, timeout=30 ) if response.status_code == 200: data = response.json() if data.get('code') == 200: return { 'success': True, 'token': data.get('data', {}).get('token'), 'order_codes': order_codes, 'generated_at': datetime.now().isoformat() } else: return { 'success': False, 'error': data.get('message', 'Loi tao token in') } else: return { 'success': False, 'error': f'HTTP Error {response.status_code}' } except Exception as e: app_logger.error(f" Error creating print token: {str(e)}") return { 'success': False, 'error': f'Loi khi tao token in: {str(e)}' } def create_ghn_gateway(api_token: str = None, shop_id: int = None, is_sandbox: bool = True) -> GHNShippingGateway: """ Factory de tao GHN gateway instance""" # Default sandbox credentials (for testing) if api_token is None: api_token = "your_ghn_test_token" # Replace with actual test token if shop_id is None: shop_id = 123456 # Replace with actual shop ID return GHNShippingGateway(api_token, shop_id, is_sandbox) # Test function async def test_ghn_integration(): """ Test GHN integration""" gateway = create_ghn_gateway() # Test getting provinces provinces_result = gateway.get_provinces() if provinces_result['success']: print(" GHN provinces retrieved successfully") print(f"Found {len(provinces_result['provinces'])} provinces") # Test getting districts for Ho Chi Minh City (usually ID 202) hcm_province_id = 202 districts_result = gateway.get_districts(hcm_province_id) if districts_result['success']: print(" GHN districts retrieved successfully") print(f"Found {len(districts_result['districts'])} districts in HCM") else: print(f" Failed to get districts: {districts_result['error']}") else: print(f" Failed to get provinces: {provinces_result['error']}") return provinces_result
