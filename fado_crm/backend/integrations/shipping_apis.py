# FADO CRM - Shipping API Integrations # Tich hop cac dich vu van chuyen pho bien tai Viet Nam va quoc te from abc import ABC, abstractmethod from typing import Dict, List, Optional, Any, Union from datetime import datetime, timedelta from enum import Enum import json import asyncio import aiohttp import hashlib import hmac import base64 import uuid # Shipping enums class ShippingStatus(Enum): PENDING = "pending" PICKED_UP = "picked_up" IN_TRANSIT = "in_transit" OUT_FOR_DELIVERY = "out_for_delivery" DELIVERED = "delivered" RETURNED = "returned" CANCELLED = "cancelled" EXCEPTION = "exception" class ShippingService(Enum): STANDARD = "standard" EXPRESS = "express" OVERNIGHT = "overnight" INTERNATIONAL = "international" COD = "cod" # Cash on Delivery class ShippingProvider(Enum): GHTK = "ghtk" # Giao Hang Tiet Kiem GHN = "ghn" # Giao Hang Nhanh VIETTEL_POST = "viettel_post" VIETNAM_POST = "vietnam_post" J_T = "j_t" # J&T Express DHL = "dhl" FEDEX = "fedex" UPS = "ups" # Abstract Shipping API Interface class ShippingAPI(ABC): """ Abstract base class for shipping API integrations """ def __init__(self, config: Dict[str, Any]): self.config = config self.name = self.__class__.__name__ self.is_sandbox = config.get('sandbox', True) self.api_key = config.get('api_key', '') self.base_url = config.get('base_url', '') @abstractmethod async def get_shipping_rates(self, shipping_data: Dict[str, Any]) -> Dict[str, Any]: """Lay gia van chuyen""" pass @abstractmethod async def create_shipment(self, shipment_data: Dict[str, Any]) -> Dict[str, Any]: """Tao van don""" pass @abstractmethod async def track_shipment(self, tracking_number: str) -> Dict[str, Any]: """Tracking van don""" pass @abstractmethod async def cancel_shipment(self, tracking_number: str, reason: str = "") -> Dict[str, Any]: """Huy van don""" pass @abstractmethod async def get_shipping_labels(self, tracking_number: str) -> Dict[str, Any]: """Lay label in van don""" pass def generate_shipment_id(self) -> str: """Tao shipment ID unique""" return f"FADO_SHIP_{int(datetime.now().timestamp())}_{uuid.uuid4().hex[:8].upper()}" # GHTK (Giao Hang Tiet Kiem) API Implementation class GHTKShippingAPI(ShippingAPI): """ GHTK - Giao hang tiet kiem API integration Dich vu giao hang pho bien tai Viet Nam """ def __init__(self, config: Dict[str, Any]): super().__init__(config) self.base_url = config.get('base_url', 'https://services.giaohangtietkiem.vn') self.token = config.get('token', '') self.shop_id = config.get('shop_id', '') async def get_shipping_rates(self, shipping_data: Dict[str, Any]) -> Dict[str, Any]: """ Lay gia van chuyen GHTK """ try: # Extract shipping info pick_province = shipping_data.get('origin', {}).get('province', '') pick_district = shipping_data.get('origin', {}).get('district', '') province = shipping_data.get('destination', {}).get('province', '') district = shipping_data.get('destination', {}).get('district', '') weight = shipping_data.get('weight', 1000) # grams value = shipping_data.get('value', 0) # GHTK fee calculation API url = f"{self.base_url}/services/shipment/fee" params = { 'pick_province': pick_province, 'pick_district': pick_district, 'province': province, 'district': district, 'address': shipping_data.get('destination', {}).get('address', ''), 'weight': weight, 'value': value, 'transport': shipping_data.get('service_type', 'road'), # road, fly 'deliver_option': shipping_data.get('delivery_option', 'none') # none, xteam } headers = { 'Token': self.token, 'Content-Type': 'application/json' } async with aiohttp.ClientSession() as session: async with session.get(url, params=params, headers=headers) as response: result = await response.json() if result.get('success'): fee_data = result.get('fee', {}) return { 'success': True, 'provider': 'ghtk', 'services': [ { 'service_type': 'standard', 'service_name': 'GHTK Tieu chuan', 'fee': fee_data.get('fee', 0), 'ship_fee_only': fee_data.get('ship_fee_only', 0), 'insurance_fee': fee_data.get('insurance_fee', 0), 'pick_fee': fee_data.get('pick_fee', 0), 'deliver_fee': fee_data.get('deliver_fee', 0), 'return_fee': fee_data.get('return_fee', 0), 'estimated_delivery': fee_data.get('delivery_date', ''), 'distance': fee_data.get('distance', 0) } ], 'currency': 'VND' } else: return { 'success': False, 'error': f"GHTK error: {result.get('message', 'Unknown error')}", 'provider': 'ghtk' } except Exception as e: return { 'success': False, 'error': str(e), 'provider': 'ghtk' } async def create_shipment(self, shipment_data: Dict[str, Any]) -> Dict[str, Any]: """ Tao van don GHTK """ try: url = f"{self.base_url}/services/shipment/order" # Build GHTK order data order_data = { 'products': [ { 'name': item.get('name', ''), 'weight': item.get('weight', 0), 'quantity': item.get('quantity', 1), 'product_code': item.get('code', ''), 'price': item.get('price', 0) } for item in shipment_data.get('items', []) ], 'order': { 'id': shipment_data.get('order_id', self.generate_shipment_id()), 'pick_name': shipment_data.get('sender', {}).get('name', ''), 'pick_address': shipment_data.get('sender', {}).get('address', ''), 'pick_province': shipment_data.get('sender', {}).get('province', ''), 'pick_district': shipment_data.get('sender', {}).get('district', ''), 'pick_ward': shipment_data.get('sender', {}).get('ward', ''), 'pick_tel': shipment_data.get('sender', {}).get('phone', ''), 'tel': shipment_data.get('recipient', {}).get('phone', ''), 'name': shipment_data.get('recipient', {}).get('name', ''), 'address': shipment_data.get('recipient', {}).get('address', ''), 'province': shipment_data.get('recipient', {}).get('province', ''), 'district': shipment_data.get('recipient', {}).get('district', ''), 'ward': shipment_data.get('recipient', {}).get('ward', ''), 'hamlet': shipment_data.get('recipient', {}).get('hamlet', 'Khac'), 'is_freeship': int(shipment_data.get('is_freeship', 0)), 'pick_money': shipment_data.get('cod_amount', 0), 'note': shipment_data.get('note', ''), 'value': shipment_data.get('declared_value', 0), 'transport': shipment_data.get('transport_type', 'road'), 'deliver_option': shipment_data.get('delivery_option', 'none'), 'pick_option': shipment_data.get('pickup_option', 'none') } } headers = { 'Token': self.token, 'Content-Type': 'application/json' } async with aiohttp.ClientSession() as session: async with session.post(url, json=order_data, headers=headers) as response: result = await response.json() if result.get('success'): order_info = result.get('order', {}) return { 'success': True, 'tracking_number': order_info.get('label'), 'partner_id': order_info.get('partner_id'), 'status': order_info.get('status_text', 'pending'), 'estimated_pick_time': order_info.get('estimated_pick_time'), 'estimated_deliver_time': order_info.get('estimated_deliver_time'), 'fee': order_info.get('fee', 0), 'insurance_fee': order_info.get('insurance_fee', 0), 'provider': 'ghtk', 'tracking_url': f"https://i.ghtk.vn/{order_info.get('label')}" } else: return { 'success': False, 'error': f"GHTK error: {result.get('message', 'Unknown error')}", 'provider': 'ghtk' } except Exception as e: return { 'success': False, 'error': str(e), 'provider': 'ghtk' } async def track_shipment(self, tracking_number: str) -> Dict[str, Any]: """ Tracking van don GHTK """ try: url = f"{self.base_url}/services/shipment/v2/{tracking_number}" headers = { 'Token': self.token } async with aiohttp.ClientSession() as session: async with session.get(url, headers=headers) as response: result = await response.json() if result.get('success'): order = result.get('order', {}) # Map GHTK status to standard status status_mapping = { -1: ShippingStatus.CANCELLED, 1: ShippingStatus.PENDING, 2: ShippingStatus.PICKED_UP, 3: ShippingStatus.IN_TRANSIT, 4: ShippingStatus.IN_TRANSIT, 5: ShippingStatus.DELIVERED, 6: ShippingStatus.RETURNED, 7: ShippingStatus.RETURNED, 8: ShippingStatus.RETURNED, 9: ShippingStatus.RETURNED, 10: ShippingStatus.DELIVERED, 11: ShippingStatus.RETURNED, 12: ShippingStatus.RETURNED, 13: ShippingStatus.RETURNED, 20: ShippingStatus.EXCEPTION, 21: ShippingStatus.EXCEPTION, 123: ShippingStatus.OUT_FOR_DELIVERY } status_id = order.get('status_id', 1) status = status_mapping.get(status_id, ShippingStatus.PENDING) return { 'success': True, 'tracking_number': tracking_number, 'status': status.value, 'status_text': order.get('status_text', ''), 'current_location': order.get('address', ''), 'estimated_delivery': order.get('estimated_deliver_time', ''), 'weight': order.get('weight', 0), 'fee': order.get('fee', 0), 'created_date': order.get('created', ''), 'provider': 'ghtk', 'tracking_url': f"https://i.ghtk.vn/{tracking_number}", 'history': [] # GHTK doesn't provide detailed history in this endpoint } else: return { 'success': False, 'error': f"GHTK tracking error: {result.get('message', 'Order not found')}", 'provider': 'ghtk' } except Exception as e: return { 'success': False, 'error': str(e), 'provider': 'ghtk' } async def cancel_shipment(self, tracking_number: str, reason: str = "") -> Dict[str, Any]: """ Huy van don GHTK """ try: url = f"{self.base_url}/services/shipment/cancel/{tracking_number}" headers = { 'Token': self.token } async with aiohttp.ClientSession() as session: async with session.post(url, headers=headers) as response: result = await response.json() if result.get('success'): return { 'success': True, 'tracking_number': tracking_number, 'status': 'cancelled', 'message': result.get('message', 'Shipment cancelled successfully'), 'provider': 'ghtk' } else: return { 'success': False, 'error': f"GHTK cancel error: {result.get('message', 'Unknown error')}", 'provider': 'ghtk' } except Exception as e: return { 'success': False, 'error': str(e), 'provider': 'ghtk' } async def get_shipping_labels(self, tracking_number: str) -> Dict[str, Any]: """ Lay label in van don GHTK """ try: url = f"{self.base_url}/services/label/{tracking_number}" headers = { 'Token': self.token } async with aiohttp.ClientSession() as session: async with session.get(url, headers=headers) as response: if response.content_type == 'application/pdf': label_data = await response.read() return { 'success': True, 'tracking_number': tracking_number, 'label_format': 'pdf', 'label_data': base64.b64encode(label_data).decode('utf-8'), 'provider': 'ghtk' } else: result = await response.json() return { 'success': False, 'error': f"GHTK label error: {result.get('message', 'Label not available')}", 'provider': 'ghtk' } except Exception as e: return { 'success': False, 'error': str(e), 'provider': 'ghtk' } # GHN (Giao Hang Nhanh) API Implementation class GHNShippingAPI(ShippingAPI): """ GHN - Giao hang nhanh API integration """ def __init__(self, config: Dict[str, Any]): super().__init__(config) self.base_url = config.get('base_url', 'https://dev-online-gateway.ghn.vn') self.token = config.get('token', '') self.shop_id = config.get('shop_id', '') async def get_shipping_rates(self, shipping_data: Dict[str, Any]) -> Dict[str, Any]: """ Lay gia van chuyen GHN """ try: url = f"{self.base_url}/shiip/public-api/v2/shipping-order/fee" headers = { 'Token': self.token, 'ShopId': str(self.shop_id), 'Content-Type': 'application/json' } payload = { 'service_type_id': shipping_data.get('service_type_id', 2), # 1: Express, 2: Standard 'from_district_id': shipping_data.get('origin', {}).get('district_id', 0), 'to_district_id': shipping_data.get('destination', {}).get('district_id', 0), 'to_ward_code': shipping_data.get('destination', {}).get('ward_code', ''), 'height': shipping_data.get('height', 10), 'length': shipping_data.get('length', 10), 'weight': shipping_data.get('weight', 1000), 'width': shipping_data.get('width', 10), 'insurance_value': shipping_data.get('insurance_value', 0), 'cod_failed_amount': shipping_data.get('cod_amount', 0) } async with aiohttp.ClientSession() as session: async with session.post(url, json=payload, headers=headers) as response: result = await response.json() if result.get('code') == 200: fee_data = result.get('data', {}) return { 'success': True, 'provider': 'ghn', 'services': [ { 'service_type': 'standard' if payload['service_type_id'] == 2 else 'express', 'service_name': 'GHN Tieu chuan' if payload['service_type_id'] == 2 else 'GHN Nhanh', 'fee': fee_data.get('total', 0), 'main_service': fee_data.get('main_service', 0), 'insurance': fee_data.get('insurance', 0), 'cod_fee': fee_data.get('cod_fee', 0), 'pickup_fee': fee_data.get('pickup_fee', 0), 'r2s_fee': fee_data.get('r2s_fee', 0), 'return_again': fee_data.get('return_again', 0), 'coupon': fee_data.get('coupon', 0), 'service_type_id': payload['service_type_id'] } ], 'currency': 'VND' } else: return { 'success': False, 'error': f"GHN error: {result.get('message', 'Unknown error')}", 'error_code': result.get('code'), 'provider': 'ghn' } except Exception as e: return { 'success': False, 'error': str(e), 'provider': 'ghn' } async def create_shipment(self, shipment_data: Dict[str, Any]) -> Dict[str, Any]: """ Tao van don GHN """ try: url = f"{self.base_url}/shiip/public-api/v2/shipping-order/create" headers = { 'Token': self.token, 'ShopId': str(self.shop_id), 'Content-Type': 'application/json' } payload = { 'payment_type_id': shipment_data.get('payment_type_id', 2), # 1: Shop/Seller, 2: Buyer/Consignee 'note': shipment_data.get('note', ''), 'required_note': shipment_data.get('required_note', 'KHONGCHOXEMHANG'), 'from_name': shipment_data.get('sender', {}).get('name', ''), 'from_phone': shipment_data.get('sender', {}).get('phone', ''), 'from_address': shipment_data.get('sender', {}).get('address', ''), 'from_ward_name': shipment_data.get('sender', {}).get('ward', ''), 'from_district_name': shipment_data.get('sender', {}).get('district', ''), 'from_province_name': shipment_data.get('sender', {}).get('province', ''), 'to_name': shipment_data.get('recipient', {}).get('name', ''), 'to_phone': shipment_data.get('recipient', {}).get('phone', ''), 'to_address': shipment_data.get('recipient', {}).get('address', ''), 'to_ward_code': shipment_data.get('recipient', {}).get('ward_code', ''), 'to_district_id': shipment_data.get('recipient', {}).get('district_id', 0), 'cod_amount': shipment_data.get('cod_amount', 0), 'content': shipment_data.get('content', ''), 'weight': shipment_data.get('weight', 1000), 'length': shipment_data.get('length', 10), 'width': shipment_data.get('width', 10), 'height': shipment_data.get('height', 10), 'insurance_value': shipment_data.get('insurance_value', 0), 'service_type_id': shipment_data.get('service_type_id', 2), 'items': [ { 'name': item.get('name', ''), 'code': item.get('code', ''), 'quantity': item.get('quantity', 1), 'price': item.get('price', 0), 'length': item.get('length', 10), 'width': item.get('width', 10), 'height': item.get('height', 10), 'weight': item.get('weight', 100), 'category': { 'level1': item.get('category', 'Khac') } } for item in shipment_data.get('items', []) ] } async with aiohttp.ClientSession() as session: async with session.post(url, json=payload, headers=headers) as response: result = await response.json() if result.get('code') == 200: order_data = result.get('data', {}) return { 'success': True, 'order_code': order_data.get('order_code'), 'tracking_number': order_data.get('order_code'), 'sort_code': order_data.get('sort_code'), 'trans_type': order_data.get('trans_type'), 'ward_encode': order_data.get('ward_encode'), 'district_encode': order_data.get('district_encode'), 'fee': order_data.get('fee', {}), 'total_fee': order_data.get('total_fee', 0), 'expected_delivery_time': order_data.get('expected_delivery_time'), 'provider': 'ghn' } else: return { 'success': False, 'error': f"GHN error: {result.get('message', 'Unknown error')}", 'error_code': result.get('code'), 'provider': 'ghn' } except Exception as e: return { 'success': False, 'error': str(e), 'provider': 'ghn' } async def track_shipment(self, tracking_number: str) -> Dict[str, Any]: """ Tracking van don GHN """ try: url = f"{self.base_url}/shiip/public-api/v2/shipping-order/detail" headers = { 'Token': self.token, 'Content-Type': 'application/json' } payload = { 'order_code': tracking_number } async with aiohttp.ClientSession() as session: async with session.post(url, json=payload, headers=headers) as response: result = await response.json() if result.get('code') == 200: data = result.get('data', {}) # Map GHN status to standard status status_mapping = { 'ready_to_pick': ShippingStatus.PENDING, 'picking': ShippingStatus.PICKED_UP, 'cancel': ShippingStatus.CANCELLED, 'money_collect_picking': ShippingStatus.PICKED_UP, 'money_collect_picked': ShippingStatus.IN_TRANSIT, 'transporting': ShippingStatus.IN_TRANSIT, 'sorting': ShippingStatus.IN_TRANSIT, 'storing': ShippingStatus.IN_TRANSIT, 'delivering': ShippingStatus.OUT_FOR_DELIVERY, 'delivered': ShippingStatus.DELIVERED, 'delivery_fail': ShippingStatus.EXCEPTION, 'return_transporting': ShippingStatus.RETURNED, 'return_sorting': ShippingStatus.RETURNED, 'returning': ShippingStatus.RETURNED, 'return_fail': ShippingStatus.EXCEPTION, 'returned': ShippingStatus.RETURNED, 'exception': ShippingStatus.EXCEPTION } status = status_mapping.get(data.get('status'), ShippingStatus.PENDING) return { 'success': True, 'tracking_number': tracking_number, 'status': status.value, 'status_text': data.get('status', ''), 'current_location': data.get('current_warehouse', ''), 'expected_delivery_time': data.get('expected_delivery_time', ''), 'weight': data.get('weight', 0), 'cod_amount': data.get('cod_amount', 0), 'created_date': data.get('created_date', ''), 'updated_date': data.get('updated_date', ''), 'provider': 'ghn', 'logs': data.get('logs', []) } else: return { 'success': False, 'error': f"GHN tracking error: {result.get('message', 'Order not found')}", 'error_code': result.get('code'), 'provider': 'ghn' } except Exception as e: return { 'success': False, 'error': str(e), 'provider': 'ghn' } async def cancel_shipment(self, tracking_number: str, reason: str = "") -> Dict[str, Any]: """ Huy van don GHN """ try: url = f"{self.base_url}/shiip/public-api/v2/switch-status/cancel" headers = { 'Token': self.token, 'Content-Type': 'application/json' } payload = { 'order_codes': [tracking_number] } async with aiohttp.ClientSession() as session: async with session.post(url, json=payload, headers=headers) as response: result = await response.json() if result.get('code') == 200: return { 'success': True, 'tracking_number': tracking_number, 'status': 'cancelled', 'message': 'Shipment cancelled successfully', 'provider': 'ghn' } else: return { 'success': False, 'error': f"GHN cancel error: {result.get('message', 'Unknown error')}", 'error_code': result.get('code'), 'provider': 'ghn' } except Exception as e: return { 'success': False, 'error': str(e), 'provider': 'ghn' } async def get_shipping_labels(self, tracking_number: str) -> Dict[str, Any]: """ Lay label in van don GHN """ try: url = f"{self.base_url}/shiip/public-api/v2/a5/gen-token" headers = { 'Token': self.token, 'Content-Type': 'application/json' } payload = { 'order_codes': [tracking_number] } async with aiohttp.ClientSession() as session: async with session.post(url, json=payload, headers=headers) as response: result = await response.json() if result.get('code') == 200: token = result.get('data', {}).get('token') # Get PDF with token pdf_url = f"{self.base_url}/shiip/public-api/v2/a5/gen-token" async with session.get(pdf_url, params={'token': token}) as pdf_response: if pdf_response.content_type == 'application/pdf': label_data = await pdf_response.read() return { 'success': True, 'tracking_number': tracking_number, 'label_format': 'pdf', 'label_data': base64.b64encode(label_data).decode('utf-8'), 'provider': 'ghn' } return { 'success': False, 'error': f"GHN label error: {result.get('message', 'Label not available')}", 'error_code': result.get('code'), 'provider': 'ghn' } except Exception as e: return { 'success': False, 'error': str(e), 'provider': 'ghn' } # Shipping API Manager class ShippingAPIManager: """ Manager class de handle multiple shipping APIs """ def __init__(self): self.apis: Dict[str, ShippingAPI] = {} self.default_api = None def register_api(self, name: str, api: ShippingAPI, is_default: bool = False): """Dang ky shipping API""" self.apis[name] = api if is_default or not self.default_api: self.default_api = name def get_api(self, name: str = None) -> Optional[ShippingAPI]: """Lay API instance""" api_name = name or self.default_api return self.apis.get(api_name) def get_available_apis(self) -> List[str]: """Lay danh sach APIs available""" return list(self.apis.keys()) async def get_shipping_rates(self, api_name: str, shipping_data: Dict[str, Any]) -> Dict[str, Any]: """Lay gia van chuyen""" api = self.get_api(api_name) if not api: return {'success': False, 'error': f'API {api_name} not found'} return await api.get_shipping_rates(shipping_data) async def create_shipment(self, api_name: str, shipment_data: Dict[str, Any]) -> Dict[str, Any]: """Tao van don""" api = self.get_api(api_name) if not api: return {'success': False, 'error': f'API {api_name} not found'} return await api.create_shipment(shipment_data) async def track_shipment(self, api_name: str, tracking_number: str) -> Dict[str, Any]: """Tracking van don""" api = self.get_api(api_name) if not api: return {'success': False, 'error': f'API {api_name} not found'} return await api.track_shipment(tracking_number) async def cancel_shipment(self, api_name: str, tracking_number: str, reason: str = "") -> Dict[str, Any]: """Huy van don""" api = self.get_api(api_name) if not api: return {'success': False, 'error': f'API {api_name} not found'} return await api.cancel_shipment(tracking_number, reason) async def get_shipping_labels(self, api_name: str, tracking_number: str) -> Dict[str, Any]: """Lay label in""" api = self.get_api(api_name) if not api: return {'success': False, 'error': f'API {api_name} not found'} return await api.get_shipping_labels(tracking_number) async def compare_shipping_rates(self, shipping_data: Dict[str, Any], providers: List[str] = None) -> Dict[str, Any]: """ So sanh gia van chuyen tu multiple providers """ providers = providers or list(self.apis.keys()) rates_comparison = {} tasks = [] for provider in providers: if provider in self.apis: task = self.get_shipping_rates(provider, shipping_data) tasks.append((provider, task)) if not tasks: return {'success': False, 'error': 'No shipping providers available'} results = await asyncio.gather(*[task for _, task in tasks], return_exceptions=True) for i, (provider, result) in enumerate(zip([p for p, _ in tasks], results)): if isinstance(result, Exception): rates_comparison[provider] = { 'success': False, 'error': str(result) } else: rates_comparison[provider] = result # Find cheapest option cheapest = None cheapest_price = float('inf') for provider, data in rates_comparison.items(): if data.get('success') and data.get('services'): for service in data['services']: if service.get('fee', 0) < cheapest_price: cheapest_price = service['fee'] cheapest = { 'provider': provider, 'service': service } return { 'success': True, 'rates': rates_comparison, 'cheapest_option': cheapest, 'comparison_date': datetime.now().isoformat() } # Factory function def create_shipping_api_manager(config: Dict[str, Any]) -> ShippingAPIManager: """ Factory function de tao ShippingAPIManager voi config """ manager = ShippingAPIManager() # Initialize GHTK if config.get('ghtk', {}).get('enabled', False): ghtk = GHTKShippingAPI(config['ghtk']) manager.register_api('ghtk', ghtk, is_default=True) # Initialize GHN if config.get('ghn', {}).get('enabled', False): ghn = GHNShippingAPI(config['ghn']) manager.register_api('ghn', ghn) # Add more shipping providers here as needed return manager # Utility functions def calculate_volumetric_weight(length: float, width: float, height: float, divisor: float = 5000) -> float: """ Tinh trong luong the tich (Volumetric Weight) Default divisor for Vietnam domestic shipping is 5000 """ return (length * width * height) / divisor def standardize_address(address_data: Dict[str, Any]) -> Dict[str, Any]: """ Chuan hoa dia chi de compatible voi cac API khac nhau """ return { 'name': address_data.get('name', '').strip(), 'phone': address_data.get('phone', '').strip(), 'address': address_data.get('address', '').strip(), 'ward': address_data.get('ward', '').strip(), 'district': address_data.get('district', '').strip(), 'province': address_data.get('province', '').strip(), 'ward_code': address_data.get('ward_code', ''), 'district_id': address_data.get('district_id', 0), 'province_id': address_data.get('province_id', 0) }