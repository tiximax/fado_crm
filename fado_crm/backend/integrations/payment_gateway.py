# Payment Gateway Integration (Stub) # Provide a generic interface for different providers (e.g., Stripe, MoMo, ZaloPay) import os from typing import Dict, Any class PaymentGateway: def charge(self, payload: Dict[str, Any]) -> Dict[str, Any]: raise NotImplementedError def refund(self, payment_id: str, amount: float) -> Dict[str, Any]: raise NotImplementedError class DummyPayment(PaymentGateway): def charge(self, payload: Dict[str, Any]) -> Dict[str, Any]: return { "status": "succeeded", "payment_id": "PAY_DUMMY_123", "amount": payload.get("amount"), "currency": payload.get("currency", "VND") } def refund(self, payment_id: str, amount: float) -> Dict[str, Any]: return { "status": "succeeded", "payment_id": payment_id, "refunded": amount } PROVIDER = os.getenv("PAYMENT_PROVIDER", "dummy").lower() def get_gateway() -> PaymentGateway: # Later: route to actual provider gateway return DummyPayment() 