# -*- coding: utf-8 -*- """ SMS Gateway Integration Tich hop gui SMS cho FADO CRM thong qua Twilio & ESMS """ import os import json from datetime import datetime from typing import Dict, List, Optional, Any from dataclasses import dataclass from enum import Enum import requests from logging_config import app_logger class SMSProvider(Enum): """SMS Provider options""" TWILIO = "twilio" ESMS = "esms" # Popular Vietnamese SMS service VIETTEL = "viettel" @dataclass class SMSTemplate: """SMS Template structure""" name: str content: str variables: List[str] class SMSService: """= SMS Service v i multi-provider support""" def __init__(self): # Load credentials from environment self.twilio_account_sid = os.getenv('TWILIO_ACCOUNT_SID') self.twilio_auth_token = os.getenv('TWILIO_AUTH_TOKEN') self.twilio_phone_number = os.getenv('TWILIO_PHONE_NUMBER') # ESMS (Vietnamese SMS service) self.esms_api_key = os.getenv('ESMS_API_KEY') self.esms_secret_key = os.getenv('ESMS_SECRET_KEY') self.esms_brandname = os.getenv('ESMS_BRANDNAME', 'FADO') # Default provider self.default_provider = SMSProvider.ESMS if self.esms_api_key else SMSProvider.TWILIO # Vietnamese SMS templates for FADO business self.templates = { 'order_confirmed': SMSTemplate( name='X c nh n  n h ng', content='FADO: Xin ch o {customer_name}!  n h ng #{order_code}   c x c nh n. T ng ti n: {total_amount}. C m n b n!', variables=['customer_name', 'order_code', 'total_amount'] ), 'order_shipped': SMSTemplate( name=' n h ng  giao ship', content='FADO:  n h ng #{order_code}   c giao cho  n v v n chuy n {shipping_company}. M v n  n: {tracking_code}. Theo d i t i: {tracking_url}', variables=['order_code', 'shipping_company', 'tracking_code', 'tracking_url'] ), 'order_delivered': SMSTemplate( name=' n h ng  giao th nh c ng', content='FADO:  n h ng #{order_code}  giao th nh c ng! C m n b n  tin t ng FADO.  nh gi  n h ng t i: {review_url}', variables=['order_code', 'review_url'] ), 'payment_reminder': SMSTemplate( name='Nh c nh thanh to n', content='FADO:  n h ng #{order_code} ch a  c thanh to n. Vui l ng ho n t t thanh to n trong 24h. Link: {payment_url}', variables=['order_code', 'payment_url'] ), 'payment_success': SMSTemplate( name='Thanh to n th nh c ng', content='FADO: Thanh to n  n h ng #{order_code} th nh c ng! S ti n: {amount}.  n h ng s  c x l trong 24h.', variables=['order_code', 'amount'] ), 'promo_code': SMSTemplate( name='M gi m gi ', content='FADO: < M gi m gi {discount_code} d nh ri ng cho {customer_name}! Gi m {discount_percent}% t i a {max_discount}. HSD: {expiry_date}', variables=['customer_name', 'discount_code', 'discount_percent', 'max_discount', 'expiry_date'] ), 'welcome': SMSTemplate( name='Ch o m ng kh ch h ng m i', content='FADO: Ch o m ng {customer_name}  n v i FADO! < Nh n ngay m gi m gi WELCOME10 (10%) cho  n h ng  u ti n.', variables=['customer_name'] ), 'otp_verification': SMSTemplate( name='M OTP x c th c', content='FADO: M OTP c a b n l {otp_code}. C hi u l c trong {valid_minutes} ph t. Kh ng chia s m n y!', variables=['otp_code', 'valid_minutes'] ) } app_logger.info(f"= SMS Service initialized with provider: {self.default_provider.value}") def send_sms(self, phone: str, message: str, provider: Optional[SMSProvider] = None) -> Dict[str, Any]: """= G i SMS  n l """ try: provider = provider or self.default_provider # Validate Vietnamese phone number if not self._validate_vietnamese_phone(phone): return { 'success': False, 'error': 'S i n tho i kh ng h p l ', 'phone': phone } # Format phone number formatted_phone = self._format_phone_number(phone) if provider == SMSProvider.TWILIO: return self._send_via_twilio(formatted_phone, message) elif provider == SMSProvider.ESMS: return self._send_via_esms(formatted_phone, message) else: return { 'success': False, 'error': f'Provider {provider.value} ch a  c h tr ' } except Exception as e: app_logger.error(f"L Error sending SMS: {str(e)}") return { 'success': False, 'error': f'L i g i SMS: {str(e)}', 'phone': phone } def send_template_sms(self, phone: str, template_name: str, variables: Dict[str, Any], provider: Optional[SMSProvider] = None) -> Dict[str, Any]: """= G i SMS v i template""" try: if template_name not in self.templates: return { 'success': False, 'error': f'Template {template_name} kh ng t n t i' } template = self.templates[template_name] # Validate required variables missing_vars = [var for var in template.variables if var not in variables] if missing_vars: return { 'success': False, 'error': f'Thi u variables: {missing_vars}' } # Replace variables in message message = template.content for var, value in variables.items(): message = message.replace(f'{{{var}}}', str(value)) # Send SMS result = self.send_sms(phone, message, provider) if result['success']: result.update({ 'template_name': template_name, 'template_used': template.name }) return result except Exception as e: app_logger.error(f"L Error sending template SMS: {str(e)}") return { 'success': False, 'error': f'L i g i template SMS: {str(e)}', 'template': template_name } def send_bulk_sms(self, recipients: List[Dict[str, Any]], provider: Optional[SMSProvider] = None) -> Dict[str, Any]: """= G i SMS h ng lo t""" try: provider = provider or self.default_provider results = [] success_count = 0 failed_count = 0 for recipient in recipients: phone = recipient.get('phone') message = recipient.get('message') template_name = recipient.get('template') variables = recipient.get('variables', {}) if not phone: results.append({ 'recipient': recipient, 'success': False, 'error': 'Thi u s i n tho i' }) failed_count += 1 continue # Send with template or direct message if template_name: result = self.send_template_sms(phone, template_name, variables, provider) elif message: result = self.send_sms(phone, message, provider) else: result = { 'success': False, 'error': 'Thi u message ho c template' } results.append({ 'recipient': recipient, **result }) if result['success']: success_count += 1 else: failed_count += 1 app_logger.info(f"= Bulk SMS sent: {success_count} success, {failed_count} failed") return { 'success': True, 'total_sent': len(recipients), 'success_count': success_count, 'failed_count': failed_count, 'results': results, 'provider': provider.value, 'sent_at': datetime.now().isoformat() } except Exception as e: app_logger.error(f"L Error sending bulk SMS: {str(e)}") return { 'success': False, 'error': f'L i g i bulk SMS: {str(e)}' } def _send_via_twilio(self, phone: str, message: str) -> Dict[str, Any]: """= G i SMS qua Twilio""" try: if not all([self.twilio_account_sid, self.twilio_auth_token, self.twilio_phone_number]): return { 'success': False, 'error': 'Thi u Twilio credentials' } from twilio.rest import Client client = Client(self.twilio_account_sid, self.twilio_auth_token) twilio_message = client.messages.create( body=message, from_=self.twilio_phone_number, to=phone ) app_logger.info(f"= Twilio SMS sent to {phone}: {twilio_message.sid}") return { 'success': True, 'message_id': twilio_message.sid, 'phone': phone, 'provider': 'twilio', 'status': twilio_message.status, 'sent_at': datetime.now().isoformat() } except Exception as e: app_logger.error(f"L Twilio SMS error: {str(e)}") return { 'success': False, 'error': f'L i Twilio: {str(e)}', 'provider': 'twilio' } def _send_via_esms(self, phone: str, message: str) -> Dict[str, Any]: """< < G i SMS qua ESMS (Vietnamese)""" try: if not all([self.esms_api_key, self.esms_secret_key]): return { 'success': False, 'error': 'Thi u ESMS credentials' } # ESMS API endpoint url = "http://rest.esms.vn/MainService.svc/json/SendMultipleMessage_V4_post_json/" payload = { "ApiKey": self.esms_api_key, "SecretKey": self.esms_secret_key, "Phone": phone, "Content": message, "Brandname": self.esms_brandname, "SmsType": "2", # SMS Marketing "Sandbox": "0" # Production mode } response = requests.post(url, json=payload, timeout=30) result = response.json() if result.get('CodeResult') == '100': app_logger.info(f"< < ESMS sent to {phone}: {result.get('SMSID')}") return { 'success': True, 'message_id': result.get('SMSID'), 'phone': phone, 'provider': 'esms', 'cost': result.get('TotalSMS', 1), 'sent_at': datetime.now().isoformat() } else: return { 'success': False, 'error': f"ESMS Error: {result.get('ErrorMessage', 'Unknown error')}", 'error_code': result.get('CodeResult'), 'provider': 'esms' } except Exception as e: app_logger.error(f"L ESMS SMS error: {str(e)}") return { 'success': False, 'error': f'L i ESMS: {str(e)}', 'provider': 'esms' } def _validate_vietnamese_phone(self, phone: str) -> bool: """= Validate Vietnamese phone number""" import re # Remove all non-digit characters digits = re.sub(r'\D', '', phone) # Vietnamese phone patterns patterns = [ r'^84\d{9,10}$', # +84 format r'^0\d{9,10}$', # 0 format r'^\d{9,10}$' # No prefix ] return any(re.match(pattern, digits) for pattern in patterns) def _format_phone_number(self, phone: str) -> str: """= Format phone number for international use""" import re # Remove all non-digit characters digits = re.sub(r'\D', '', phone) # Convert to international format if digits.startswith('84'): return f'+{digits}' elif digits.startswith('0'): return f'+84{digits[1:]}' else: return f'+84{digits}' def get_sms_templates(self) -> Dict[str, Any]: """= L y danh s ch SMS templates""" return { 'success': True, 'templates': { name: { 'name': template.name, 'content': template.content, 'variables': template.variables } for name, template in self.templates.items() } } def get_sms_statistics(self, days: int = 30) -> Dict[str, Any]: """= Th ng k SMS (mock data)""" try: # In production, this would query actual SMS logs from datetime import timedelta end_date = datetime.now() start_date = end_date - timedelta(days=days) stats = { 'period': { 'start_date': start_date.isoformat(), 'end_date': end_date.isoformat(), 'days': days }, 'summary': { 'total_sms_sent': 1247, 'successful_deliveries': 1186, 'failed_deliveries': 61, 'delivery_rate': 95.1, 'total_cost': 624000, # VND 'avg_cost_per_sms': 500 # VND }, 'by_template': { 'order_confirmed': {'sent': 450, 'delivery_rate': 97.2}, 'order_shipped': {'sent': 420, 'delivery_rate': 96.8}, 'payment_reminder': {'sent': 180, 'delivery_rate': 89.4}, 'promo_code': {'sent': 150, 'delivery_rate': 94.0}, 'welcome': {'sent': 47, 'delivery_rate': 98.0} }, 'by_provider': { 'esms': {'sent': 980, 'delivery_rate': 96.2, 'cost': 490000}, 'twilio': {'sent': 267, 'delivery_rate': 91.8, 'cost': 134000} }, 'generated_at': datetime.now().isoformat() } return { 'success': True, 'statistics': stats } except Exception as e: app_logger.error(f"L Error getting SMS statistics: {str(e)}") return { 'success': False, 'error': f'L i l y th ng k SMS: {str(e)}' } def create_sms_service() -> SMSService: """< Factory  t o SMS service""" return SMSService()