# -*- coding: utf-8 -*- """ WhatsApp Business API Integration Tich hap WhatsApp Business cho FADO CRM """ import os import json import base64 from datetime import datetime from typing import Dict, List, Optional, Any from dataclasses import dataclass from enum import Enum import requests from logging_config import app_logger class WhatsAppMessageType(Enum): """WhatsApp message types""" TEXT = "text" TEMPLATE = "template" IMAGE = "image" DOCUMENT = "document" INTERACTIVE = "interactive" @dataclass class WhatsAppTemplate: """WhatsApp Template structure""" name: str language: str components: List[Dict[str, Any]] category: str class WhatsAppService: """= WhatsApp Business API Service""" def __init__(self): # WhatsApp Business API credentials self.access_token = os.getenv('WHATSAPP_ACCESS_TOKEN') self.phone_number_id = os.getenv('WHATSAPP_PHONE_NUMBER_ID') self.business_account_id = os.getenv('WHATSAPP_BUSINESS_ACCOUNT_ID') self.webhook_verify_token = os.getenv('WHATSAPP_WEBHOOK_VERIFY_TOKEN') # API endpoints self.base_url = f"https://graph.facebook.com/v18.0/{self.phone_number_id}" self.headers = { 'Authorization': f'Bearer {self.access_token}', 'Content-Type': 'application/json' } # Vietnamese WhatsApp message templates for FADO self.templates = { 'order_confirmed': WhatsAppTemplate( name='fado_order_confirmed', language='vi', category='TRANSACTIONAL', components=[ { "type": "HEADER", "format": "TEXT", "text": "<  n hang a  ac xac nh n!" }, { "type": "BODY", "text": "Xin chao {{1}}!\n\n n hang #{{2}} a  ac xac nh n thanh cong.\n= T ng ti n: {{3}}\n= Ngay  t: {{4}}\n\nFADO s xi ly va giao hang trong th i gian s m nh t. C m n b n a tin t ng FADO! = " }, { "type": "FOOTER", "text": "FADO - Mua s m toan c u < " } ] ), 'order_shipped': WhatsAppTemplate( name='fado_order_shipped', language='vi', category='TRANSACTIONAL', components=[ { "type": "HEADER", "format": "TEXT", "text": "=  n hang a  ac giao ship!" }, { "type": "BODY", "text": " n hang #{{1}} a  ac giao cho  n v v n chuy n {{2}}.\n\n= Ma v n  n: {{3}}\n= Theo doi t i: {{4}}\n\nD ki n giao hang trong 2-3 ngay lam vi c." }, { "type": "FOOTER", "text": "FADO - Theo doi  n hang 24/7" } ] ), 'payment_reminder': WhatsAppTemplate( name='fado_payment_reminder', language='vi', category='TRANSACTIONAL', components=[ { "type": "HEADER", "format": "TEXT", "text": "= Nh c nh thanh toan" }, { "type": "BODY", "text": " n hang #{{1}} v n ch a  ac thanh toan.\n\n= S ti n: {{2}}\n Vui long hoan t t thanh toan trong 24h  tranh h y  n.\n\n=F Nh n nut ben d i  thanh toan ngay!" }, { "type": "BUTTON", "sub_type": "URL", "index": "0", "parameters": [{"type": "TEXT", "text": "{{3}}"}] } ] ) } app_logger.info("= WhatsApp Business Service initialized") def send_text_message(self, to: str, message: str) -> Dict[str, Any]: """= Gii tin nh n text""" try: # Validate Vietnamese phone number formatted_phone = self._format_phone_number(to) if not formatted_phone: return { 'success': False, 'error': 'S i n tho i khong hap l ' } payload = { "messaging_product": "whatsapp", "to": formatted_phone, "type": "text", "text": {"body": message} } response = requests.post( f"{self.base_url}/messages", headers=self.headers, json=payload, timeout=30 ) if response.status_code == 200: result = response.json() message_id = result['messages'][0]['id'] app_logger.info(f"= WhatsApp message sent to {formatted_phone}: {message_id}") return { 'success': True, 'message_id': message_id, 'to': formatted_phone, 'type': 'text', 'sent_at': datetime.now().isoformat() } else: error_data = response.json() return { 'success': False, 'error': error_data.get('error', {}).get('message', 'Unknown error'), 'error_code': error_data.get('error', {}).get('code') } except Exception as e: app_logger.error(f"L WhatsApp text message error: {str(e)}") return { 'success': False, 'error': f'L i gii WhatsApp: {str(e)}' } def send_template_message(self, to: str, template_name: str, variables: List[str], language: str = "vi") -> Dict[str, Any]: """= Gii template message""" try: formatted_phone = self._format_phone_number(to) if not formatted_phone: return { 'success': False, 'error': 'S i n tho i khong hap l ' } # Build template components with variables components = [] # Add body component with parameters if variables: body_parameters = [{"type": "text", "text": var} for var in variables] components.append({ "type": "body", "parameters": body_parameters }) payload = { "messaging_product": "whatsapp", "to": formatted_phone, "type": "template", "template": { "name": template_name, "language": {"code": language}, "components": components } } response = requests.post( f"{self.base_url}/messages", headers=self.headers, json=payload, timeout=30 ) if response.status_code == 200: result = response.json() message_id = result['messages'][0]['id'] app_logger.info(f"= WhatsApp template sent to {formatted_phone}: {template_name}") return { 'success': True, 'message_id': message_id, 'to': formatted_phone, 'type': 'template', 'template_name': template_name, 'sent_at': datetime.now().isoformat() } else: error_data = response.json() return { 'success': False, 'error': error_data.get('error', {}).get('message', 'Template error'), 'error_code': error_data.get('error', {}).get('code'), 'template': template_name } except Exception as e: app_logger.error(f"L WhatsApp template error: {str(e)}") return { 'success': False, 'error': f'L i gii template WhatsApp: {str(e)}' } def send_image_message(self, to: str, image_url: str, caption: str = "") -> Dict[str, Any]: """=  Gii tin nh n hinh nh""" try: formatted_phone = self._format_phone_number(to) if not formatted_phone: return { 'success': False, 'error': 'S i n tho i khong hap l ' } payload = { "messaging_product": "whatsapp", "to": formatted_phone, "type": "image", "image": { "link": image_url, "caption": caption } } response = requests.post( f"{self.base_url}/messages", headers=self.headers, json=payload, timeout=30 ) if response.status_code == 200: result = response.json() message_id = result['messages'][0]['id'] app_logger.info(f"=  WhatsApp image sent to {formatted_phone}") return { 'success': True, 'message_id': message_id, 'to': formatted_phone, 'type': 'image', 'sent_at': datetime.now().isoformat() } else: error_data = response.json() return { 'success': False, 'error': error_data.get('error', {}).get('message', 'Image send error'), 'error_code': error_data.get('error', {}).get('code') } except Exception as e: app_logger.error(f"L WhatsApp image error: {str(e)}") return { 'success': False, 'error': f'L i gii hinh WhatsApp: {str(e)}' } def send_interactive_message(self, to: str, header: str, body: str, buttons: List[Dict[str, str]]) -> Dict[str, Any]: """= Gii tin nh n interactive v i buttons""" try: formatted_phone = self._format_phone_number(to) if not formatted_phone: return { 'success': False, 'error': 'S i n tho i khong hap l ' } # Build button components (max 3 buttons) button_components = [] for i, button in enumerate(buttons[:3]): button_components.append({ "type": "reply", "reply": { "id": button.get('id', f'btn_{i}'), "title": button.get('title', f'Button {i+1}') } }) payload = { "messaging_product": "whatsapp", "to": formatted_phone, "type": "interactive", "interactive": { "type": "button", "header": {"type": "text", "text": header}, "body": {"text": body}, "action": { "buttons": button_components } } } response = requests.post( f"{self.base_url}/messages", headers=self.headers, json=payload, timeout=30 ) if response.status_code == 200: result = response.json() message_id = result['messages'][0]['id'] app_logger.info(f"= WhatsApp interactive sent to {formatted_phone}") return { 'success': True, 'message_id': message_id, 'to': formatted_phone, 'type': 'interactive', 'sent_at': datetime.now().isoformat() } else: error_data = response.json() return { 'success': False, 'error': error_data.get('error', {}).get('message', 'Interactive error'), 'error_code': error_data.get('error', {}).get('code') } except Exception as e: app_logger.error(f"L WhatsApp interactive error: {str(e)}") return { 'success': False, 'error': f'L i gii interactive WhatsApp: {str(e)}' } def send_fado_order_notification(self, to: str, order_data: Dict[str, Any], notification_type: str) -> Dict[str, Any]: """= Gii thong bao  n hang FADO""" try: if notification_type == 'order_confirmed': return self._send_order_confirmed_notification(to, order_data) elif notification_type == 'order_shipped': return self._send_order_shipped_notification(to, order_data) elif notification_type == 'payment_reminder': return self._send_payment_reminder_notification(to, order_data) else: return { 'success': False, 'error': f'Notification type {notification_type} khong  ac h tra' } except Exception as e: app_logger.error(f"L FADO notification error: {str(e)}") return { 'success': False, 'error': f'L i gii thong bao FADO: {str(e)}' } def _send_order_confirmed_notification(self, to: str, order_data: Dict[str, Any]) -> Dict[str, Any]: """ Thong bao xac nh n  n hang""" variables = [ order_data.get('customer_name', 'Khach hang'), order_data.get('order_code', 'N/A'), f"{order_data.get('total_amount', 0):,.0f}", order_data.get('order_date', datetime.now().strftime('%d/%m/%Y')) ] return self.send_template_message(to, 'fado_order_confirmed', variables) def _send_order_shipped_notification(self, to: str, order_data: Dict[str, Any]) -> Dict[str, Any]: """= Thong bao  n hang a ship""" variables = [ order_data.get('order_code', 'N/A'), order_data.get('shipping_company', 'GHN'), order_data.get('tracking_code', 'N/A'), order_data.get('tracking_url', 'https://fado.vn/track') ] return self.send_template_message(to, 'fado_order_shipped', variables) def _send_payment_reminder_notification(self, to: str, order_data: Dict[str, Any]) -> Dict[str, Any]: """= Nh c nh thanh toan""" variables = [ order_data.get('order_code', 'N/A'), f"{order_data.get('total_amount', 0):,.0f}", order_data.get('payment_url', 'https://fado.vn/payment') ] return self.send_template_message(to, 'fado_payment_reminder', variables) def handle_webhook(self, webhook_data: Dict[str, Any]) -> Dict[str, Any]: """= Xi ly webhook t WhatsApp""" try: # Webhook verification if 'hub.verify_token' in webhook_data: if webhook_data['hub.verify_token'] == self.webhook_verify_token: return { 'success': True, 'challenge': webhook_data.get('hub.challenge') } else: return { 'success': False, 'error': 'Invalid verify token' } # Process incoming messages entry = webhook_data.get('entry', [{}])[0] changes = entry.get('changes', [{}])[0] value = changes.get('value', {}) if 'messages' in value: messages = value['messages'] for message in messages: self._process_incoming_message(message) # Process message status updates if 'statuses' in value: statuses = value['statuses'] for status in statuses: self._process_message_status(status) return { 'success': True, 'processed_at': datetime.now().isoformat() } except Exception as e: app_logger.error(f"L WhatsApp webhook error: {str(e)}") return { 'success': False, 'error': f'Webhook processing error: {str(e)}' } def _process_incoming_message(self, message: Dict[str, Any]): """=e Xi ly tin nh n  n""" try: message_id = message.get('id') from_phone = message.get('from') message_type = message.get('type') timestamp = message.get('timestamp') app_logger.info(f"=e Incoming WhatsApp message: {message_id} from {from_phone}") # Here you would process different message types # and potentially trigger automated responses except Exception as e: app_logger.error(f"L Error processing incoming message: {str(e)}") def _process_message_status(self, status: Dict[str, Any]): """= Xi ly tr ng thai tin nh n""" try: message_id = status.get('id') message_status = status.get('status') # sent, delivered, read, failed timestamp = status.get('timestamp') app_logger.info(f"= Message status update: {message_id} -> {message_status}") # Here you would update message status in database except Exception as e: app_logger.error(f"L Error processing message status: {str(e)}") def _format_phone_number(self, phone: str) -> Optional[str]: """= Format phone number for WhatsApp""" import re if not phone: return None # Remove all non-digit characters digits = re.sub(r'\D', '', phone) # Vietnamese phone patterns if digits.startswith('84'): return digits elif digits.startswith('0'): return f'84{digits[1:]}' elif len(digits) >= 9: return f'84{digits}' else: return None def get_whatsapp_statistics(self, days: int = 30) -> Dict[str, Any]: """= Th ng ke WhatsApp (mock data)""" try: from datetime import timedelta end_date = datetime.now() start_date = end_date - timedelta(days=days) stats = { 'period': { 'start_date': start_date.isoformat(), 'end_date': end_date.isoformat(), 'days': days }, 'summary': { 'total_messages_sent': 892, 'messages_delivered': 834, 'messages_read': 756, 'messages_replied': 234, 'delivery_rate': 93.5, 'read_rate': 84.8, 'response_rate': 26.2 }, 'by_type': { 'template': {'sent': 567, 'delivered': 531, 'read': 498}, 'text': {'sent': 245, 'delivered': 232, 'read': 198}, 'image': {'sent': 56, 'delivered': 53, 'read': 45}, 'interactive': {'sent': 24, 'delivered': 18, 'read': 15} }, 'by_template': { 'fado_order_confirmed': {'sent': 234, 'delivered': 228, 'read': 215}, 'fado_order_shipped': {'sent': 189, 'delivered': 182, 'read': 167}, 'fado_payment_reminder': {'sent': 144, 'delivered': 121, 'read': 116} }, 'generated_at': datetime.now().isoformat() } return { 'success': True, 'statistics': stats } except Exception as e: app_logger.error(f"L Error getting WhatsApp statistics: {str(e)}") return { 'success': False, 'error': f'L i l y th ng ke WhatsApp: {str(e)}' } def create_whatsapp_service() -> WhatsAppService: """<i Factory  t o WhatsApp service""" return WhatsAppService()