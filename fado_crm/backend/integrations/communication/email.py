# -*- coding: utf-8 -*- """ Email Service Integration Professional email service cho FADO CRM voi SendGrid va SMTP fallback """ import smtplib import ssl from email.mime.text import MIMEText from email.mime.multipart import MIMEMultipart from email.mime.base import MIMEBase from email import encoders import requests import json from datetime import datetime from typing import Dict, List, Optional, Any from enum import Enum from logging_config import app_logger class EmailProvider(Enum): """Email Service Providers""" SENDGRID = "sendgrid" SMTP = "smtp" GMAIL = "gmail" class EmailService: """Professional Email Service Integration""" def __init__(self, provider: str = "smtp", config: Dict[str, Any] = None): self.provider = EmailProvider(provider) self.config = config or {} # Default configuration self.default_config = { 'smtp': { 'host': 'smtp.gmail.com', 'port': 587, 'use_tls': True, 'username': 'your-email@gmail.com', 'password': 'your-app-password' }, 'sendgrid': { 'api_key': 'your-sendgrid-api-key', 'api_url': 'https://api.sendgrid.com/v3/mail/send' } } # Merge with provided config if self.provider.value in self.default_config: self.default_config[self.provider.value].update(self.config) self.config = self.default_config[self.provider.value] app_logger.info(f" Email Service initialized with {provider}") def send_email(self, email_data: Dict[str, Any]) -> Dict[str, Any]: """ Gui email""" try: # Validate required fields required_fields = ['to_email', 'subject', 'content'] for field in required_fields: if field not in email_data: return { 'success': False, 'error': f'Thieu truong bat buoc: {field}' } if self.provider == EmailProvider.SENDGRID: return self._send_via_sendgrid(email_data) else: return self._send_via_smtp(email_data) except Exception as e: app_logger.error(f" Error sending email: {str(e)}") return { 'success': False, 'error': f'Loi gui email: {str(e)}' } def send_bulk_email(self, recipients: List[str], email_data: Dict[str, Any]) -> Dict[str, Any]: """ Gui email hang loat""" try: results = [] successful = 0 failed = 0 for recipient in recipients: email_copy = email_data.copy() email_copy['to_email'] = recipient result = self.send_email(email_copy) results.append({ 'recipient': recipient, 'success': result['success'], 'error': result.get('error') }) if result['success']: successful += 1 else: failed += 1 return { 'success': True, 'total_recipients': len(recipients), 'successful_sends': successful, 'failed_sends': failed, 'success_rate': (successful / len(recipients)) * 100, 'results': results, 'sent_at': datetime.now().isoformat() } except Exception as e: app_logger.error(f" Error sending bulk email: {str(e)}") return { 'success': False, 'error': f'Loi gui email hang loat: {str(e)}' } def send_template_email(self, template_id: str, email_data: Dict[str, Any], template_data: Dict[str, Any] = None) -> Dict[str, Any]: """ Gui email theo template""" try: # Load template template = self._get_email_template(template_id) if not template: return { 'success': False, 'error': f'Khong tim thay template: {template_id}' } # Replace template variables subject = self._replace_template_vars(template['subject'], template_data or {}) content = self._replace_template_vars(template['content'], template_data or {}) # Prepare email data templated_email = { **email_data, 'subject': subject, 'content': content, 'template_id': template_id } return self.send_email(templated_email) except Exception as e: app_logger.error(f" Error sending template email: {str(e)}") return { 'success': False, 'error': f'Loi gui email template: {str(e)}' } def _send_via_sendgrid(self, email_data: Dict[str, Any]) -> Dict[str, Any]: """ Gui email qua SendGrid""" try: # Prepare SendGrid payload payload = { "personalizations": [ { "to": [{"email": email_data['to_email']}], "subject": email_data['subject'] } ], "from": { "email": email_data.get('from_email', 'noreply@fado.vn'), "name": email_data.get('from_name', 'FADO Team') }, "content": [ { "type": "text/html" if email_data.get('is_html') else "text/plain", "value": email_data['content'] } ] } # Add CC/BCC if provided if email_data.get('cc_email'): payload["personalizations"][0]["cc"] = [{"email": email_data['cc_email']}] if email_data.get('bcc_email'): payload["personalizations"][0]["bcc"] = [{"email": email_data['bcc_email']}] # Send via SendGrid API headers = { 'Authorization': f"Bearer {self.config['api_key']}", 'Content-Type': 'application/json' } response = requests.post( self.config['api_url'], headers=headers, json=payload, timeout=30 ) if response.status_code == 202: app_logger.info(f" Email sent via SendGrid to {email_data['to_email']}") return { 'success': True, 'provider': 'sendgrid', 'message_id': response.headers.get('X-Message-Id'), 'sent_at': datetime.now().isoformat() } else: return { 'success': False, 'error': f'SendGrid API error: {response.status_code} - {response.text}' } except Exception as e: app_logger.error(f" SendGrid error: {str(e)}") return { 'success': False, 'error': f'SendGrid error: {str(e)}' } def _send_via_smtp(self, email_data: Dict[str, Any]) -> Dict[str, Any]: """ Gui email qua SMTP""" try: # Create message msg = MIMEMultipart() msg['From'] = email_data.get('from_email', self.config['username']) msg['To'] = email_data['to_email'] msg['Subject'] = email_data['subject'] # Add CC/BCC if email_data.get('cc_email'): msg['Cc'] = email_data['cc_email'] # Attach content if email_data.get('is_html'): msg.attach(MIMEText(email_data['content'], 'html')) else: msg.attach(MIMEText(email_data['content'], 'plain')) # Add attachments if any if email_data.get('attachments'): for attachment in email_data['attachments']: self._add_attachment(msg, attachment) # Send email server = smtplib.SMTP(self.config['host'], self.config['port']) if self.config.get('use_tls'): server.starttls() server.login(self.config['username'], self.config['password']) # Prepare recipient list recipients = [email_data['to_email']] if email_data.get('cc_email'): recipients.append(email_data['cc_email']) if email_data.get('bcc_email'): recipients.append(email_data['bcc_email']) server.sendmail(msg['From'], recipients, msg.as_string()) server.quit() app_logger.info(f" Email sent via SMTP to {email_data['to_email']}") return { 'success': True, 'provider': 'smtp', 'sent_at': datetime.now().isoformat() } except Exception as e: app_logger.error(f" SMTP error: {str(e)}") return { 'success': False, 'error': f'SMTP error: {str(e)}' } def _add_attachment(self, msg: MIMEMultipart, attachment: Dict[str, Any]): """ Them attachment vao email""" try: with open(attachment['path'], "rb") as attachment_file: part = MIMEBase('application', 'octet-stream') part.set_payload(attachment_file.read()) encoders.encode_base64(part) part.add_header( 'Content-Disposition', f'attachment; filename= {attachment["filename"]}' ) msg.attach(part) except Exception as e: app_logger.error(f" Error adding attachment: {str(e)}") def _get_email_template(self, template_id: str) -> Optional[Dict[str, str]]: """ Lay email template""" # Built-in templates cho FADO CRM templates = { 'welcome': { 'subject': 'Chao mung {{customer_name}} den voi FADO!', 'content': ''' <h2>Xin chao {{customer_name}}!</h2> <p>Chao mung ban den voi FADO - dich vu mua ho uy tin hang dau Viet Nam!</p> <p>Chung toi se giup ban mua sam cac san pham chat luong tu khap the gioi.</p> <p>Thong tin tai khoan cua ban:</p> <ul> <li>Email: {{customer_email}}</li> <li>So dien thoai: {{customer_phone}}</li> </ul> <p>Cam on ban da tin tuong FADO!</p> <p>Tran trong,<br>Doi ngu FADO</p> ''', 'is_html': True }, 'order_confirmed': { 'subject': 'Don hang {{order_code}} da duoc xac nhan', 'content': ''' <h2>Don hang cua ban da duoc xac nhan!</h2> <p>Xin chao {{customer_name}},</p> <p>Don hang <strong>{{order_code}}</strong> cua ban da duoc xac nhan va dang duoc xu ly.</p> <p><strong>Thong tin don hang:</strong></p> <ul> <li>Ma don hang: {{order_code}}</li> <li>Tong tien: {{total_amount}} VND</li> <li>Trang thai: Da xac nhan</li> </ul> <p>Chung toi se cap nhat tinh trang don hang cho ban som nhat.</p> <p>Cam on ban da mua sam cung FADO!</p> <p>Tran trong,<br>Doi ngu FADO</p> ''', 'is_html': True }, 'order_shipped': { 'subject': 'Don hang {{order_code}} dang duoc giao', 'content': ''' <h2>Don hang cua ban dang duoc giao!</h2> <p>Xin chao {{customer_name}},</p> <p>Don hang <strong>{{order_code}}</strong> cua ban dang duoc giao den dia chi cua ban.</p> <p><strong>Thong tin van chuyen:</strong></p> <ul> <li>Ma van chuyen: {{shipping_code}}</li> <li>Don vi van chuyen: {{shipping_provider}}</li> <li>Du kien giao: {{estimated_delivery}}</li> </ul> <p>Ban co the theo doi don hang tai: <a href="{{tracking_url}}">{{tracking_url}}</a></p> <p>Cam on ban da mua sam cung FADO!</p> <p>Tran trong,<br>Doi ngu FADO</p> ''', 'is_html': True }, 'order_delivered': { 'subject': 'Don hang {{order_code}} da duoc giao thanh cong', 'content': ''' <h2>Don hang cua ban da duoc giao thanh cong!</h2> <p>Xin chao {{customer_name}},</p> <p>Don hang <strong>{{order_code}}</strong> da duoc giao thanh cong den dia chi cua ban.</p> <p>Cam on ban da tin tuong va mua sam cung FADO!</p> <p>Neu ban hai long voi san pham, hay de lai danh gia cho chung toi nhe!</p> <p>Moi thac mac xin lien he: support@fado.vn hoac 1900-1234</p> <p>Tran trong,<br>Doi ngu FADO</p> ''', 'is_html': True }, 'payment_reminder': { 'subject': 'Nhac nho thanh toan don hang {{order_code}}', 'content': ''' <h2>Don hang cua ban dang cho thanh toan</h2> <p>Xin chao {{customer_name}},</p> <p>Don hang <strong>{{order_code}}</strong> cua ban dang cho thanh toan.</p> <p><strong>Thong tin thanh toan:</strong></p> <ul> <li>So tien: {{total_amount}} VND</li> <li>Han thanh toan: {{payment_deadline}}</li> </ul> <p>Vui long thanh toan de chung toi xu ly don hang cho ban.</p> <p><a href="{{payment_url}}">Thanh toan ngay</a></p> <p>Tran trong,<br>Doi ngu FADO</p> ''', 'is_html': True } } return templates.get(template_id) def _replace_template_vars(self, template: str, data: Dict[str, Any]) -> str: """ Thay the variables trong template""" result = template for key, value in data.items(): placeholder = f"{{{{{key}}}}}" result = result.replace(placeholder, str(value)) return result def validate_email(self, email: str) -> bool: """ Validate email format""" import re pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$' return re.match(pattern, email) is not None def get_email_statistics(self, days: int = 30) -> Dict[str, Any]: """ Thong ke email""" # Mock statistics - in production, query from database return { 'period': {'days': days}, 'summary': { 'total_emails': 1250, 'delivered_emails': 1180, 'bounced_emails': 45, 'opened_emails': 890, 'clicked_emails': 320, 'delivery_rate': 94.4, 'open_rate': 75.4, 'click_rate': 36.0 }, 'by_template': { 'welcome': {'sent': 150, 'opened': 135, 'clicked': 67}, 'order_confirmed': {'sent': 400, 'opened': 320, 'clicked': 128}, 'order_shipped': {'sent': 380, 'opened': 285, 'clicked': 95}, 'order_delivered': {'sent': 320, 'opened': 150, 'clicked': 30} }, 'generated_at': datetime.now().isoformat() } def create_email_service(provider: str = "smtp", config: Dict[str, Any] = None) -> EmailService: """ Factory de tao Email service""" # Default SMTP config for development if not config and provider == "smtp": config = { 'host': 'smtp.gmail.com', 'port': 587, 'use_tls': True, 'username': 'test@fado.vn', 'password': 'test-password' } return EmailService(provider, config) # Test function async def test_email_integration(): """ Test Email integration""" email_service = create_email_service() # Test email data test_email = { 'to_email': 'customer@example.com', 'subject': 'Test Email tu FADO CRM', 'content': 'Day la email test tu he thong FADO CRM. Chuc ban mot ngay tot lanh!', 'from_name': 'FADO Team' } print(" Testing email sending...") result = email_service.send_email(test_email) if result['success']: print(" Test email sent successfully") print(f"Provider: {result.get('provider')}") print(f"Sent at: {result.get('sent_at')}") else: print(f" Test email failed: {result['error']}") return result
