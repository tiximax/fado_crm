# Strawberry GraphQL schema for FADO CRM # Minimal schema exposing a few entities for read-only queries import typing as t import strawberry from sqlalchemy.orm import Session from database import SessionLocal from models import KhachHang, SanPham, DonHang # GraphQL Types @strawberry.type class KhachHangType: id: int ho_ten: str email: str so_dien_thoai: t.Optional[str] loai_khach: str @strawberry.type class SanPhamType: id: int ten_san_pham: str danh_muc: t.Optional[str] quoc_gia_nguon: t.Optional[str] gia_ban: t.Optional[float] @strawberry.type class DonHangType: id: int ma_don_hang: str tong_tien: t.Optional[float] trang_thai: str # Query resolvers @strawberry.type class Query: @strawberry.field def top_customers(self, limit: int = 10) -> t.List[KhachHangType]: db: Session = SessionLocal() try: rows = db.query(KhachHang).order_by(KhachHang.tong_tien_da_mua.desc()).limit(limit).all() return [ KhachHangType( id=r.id, ho_ten=r.ho_ten, email=r.email, so_dien_thoai=r.so_dien_thoai, loai_khach=r.loai_khach.value if r.loai_khach else "moi", ) for r in rows ] finally: db.close() @strawberry.field def products(self, search: t.Optional[str] = None, limit: int = 20) -> t.List[SanPhamType]: db: Session = SessionLocal() try: q = db.query(SanPham) if search: like = f"%{search}%" q = q.filter(SanPham.ten_san_pham.ilike(like)) rows = q.limit(limit).all() return [ SanPhamType( id=r.id, ten_san_pham=r.ten_san_pham, danh_muc=r.danh_muc, quoc_gia_nguon=r.quoc_gia_nguon, gia_ban=r.gia_ban, ) for r in rows ] finally: db.close() @strawberry.field def recent_orders(self, limit: int = 10) -> t.List[DonHangType]: db: Session = SessionLocal() try: rows = db.query(DonHang).order_by(DonHang.ngay_tao.desc()).limit(limit).all() return [ DonHangType( id=r.id, ma_don_hang=r.ma_don_hang or "", tong_tien=r.tong_tien, trang_thai=r.trang_thai.value if r.trang_thai else "cho_xac_nhan", ) for r in rows ] finally: db.close() schema = strawberry.Schema(query=Query)
