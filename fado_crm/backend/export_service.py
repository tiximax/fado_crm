# üìä FADO CRM - Export/Import Service
# Xu·∫•t/nh·∫≠p d·ªØ li·ªáu Excel & CSV chuy√™n nghi·ªáp! üöÄ

from typing import List, Dict, Any, Optional, BinaryIO
import pandas as pd
import io
from datetime import datetime, date
from sqlalchemy.orm import Session
from sqlalchemy import text
import json
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Border, Side, Alignment
from openpyxl.utils.dataframe import dataframe_to_rows

from models import KhachHang, SanPham, DonHang, ChiTietDonHang, LichSuLienHe, TrangThaiDonHang, LoaiKhachHang
from logging_config import app_logger

class ExportImportService:
    def __init__(self):
        self.db_session = None
        app_logger.info("üìä Export/Import service initialized")

    def set_session(self, db: Session):
        """üîå Set database session"""
        self.db_session = db

    # üì§ EXPORT FUNCTIONS
    def export_customers_to_excel(self, filters: Optional[Dict[str, Any]] = None) -> bytes:
        """üë• Export customers to Excel"""
        try:
            query = self.db_session.query(KhachHang)

            # Apply filters
            if filters:
                if filters.get("customer_type"):
                    query = query.filter(KhachHang.loai_khach == filters["customer_type"])
                if filters.get("created_from"):
                    query = query.filter(KhachHang.ngay_tao >= filters["created_from"])
                if filters.get("created_to"):
                    query = query.filter(KhachHang.ngay_tao <= filters["created_to"])

            customers = query.all()

            # Create DataFrame
            data = []
            for customer in customers:
                data.append({
                    "ID": customer.id,
                    "H·ªç t√™n": customer.ho_ten,
                    "Email": customer.email,
                    "S·ªë ƒëi·ªán tho·∫°i": customer.so_dien_thoai,
                    "ƒê·ªãa ch·ªâ": customer.dia_chi,
                    "Lo·∫°i kh√°ch h√†ng": customer.loai_khach.value,
                    "T·ªïng ti·ªÅn ƒë√£ mua": customer.tong_tien_da_mua,
                    "S·ªë ƒë∆°n th√†nh c√¥ng": customer.so_don_thanh_cong,
                    "Ng√†y t·∫°o": customer.ngay_tao.strftime("%d/%m/%Y %H:%M") if customer.ngay_tao else "",
                    "Ng√†y c·∫≠p nh·∫≠t": customer.ngay_cap_nhat.strftime("%d/%m/%Y %H:%M") if customer.ngay_cap_nhat else ""
                })

            df = pd.DataFrame(data)

            # Create Excel with styling
            return self._create_styled_excel(df, "Danh s√°ch kh√°ch h√†ng", "KHACH_HANG")

        except Exception as e:
            app_logger.error(f"‚ùå Error exporting customers to Excel: {str(e)}")
            raise

    def export_products_to_excel(self, filters: Optional[Dict[str, Any]] = None) -> bytes:
        """üõçÔ∏è Export products to Excel"""
        try:
            query = self.db_session.query(SanPham)

            # Apply filters
            if filters:
                if filters.get("category"):
                    query = query.filter(SanPham.danh_muc.ilike(f"%{filters['category']}%"))
                if filters.get("country"):
                    query = query.filter(SanPham.quoc_gia_nguon.ilike(f"%{filters['country']}%"))
                if filters.get("min_price"):
                    query = query.filter(SanPham.gia_ban >= filters["min_price"])
                if filters.get("max_price"):
                    query = query.filter(SanPham.gia_ban <= filters["max_price"])

            products = query.all()

            # Create DataFrame
            data = []
            for product in products:
                data.append({
                    "ID": product.id,
                    "T√™n s·∫£n ph·∫©m": product.ten_san_pham,
                    "M√¥ t·∫£": product.mo_ta,
                    "Danh m·ª•c": product.danh_muc,
                    "Gi√° b√°n": product.gia_ban,
                    "Tr·ªçng l∆∞·ª£ng (kg)": product.trong_luong,
                    "Qu·ªëc gia ngu·ªìn": product.quoc_gia_nguon,
                    "URL h√¨nh ·∫£nh": product.hinh_anh_url,
                    "Ng√†y t·∫°o": product.ngay_tao.strftime("%d/%m/%Y %H:%M") if product.ngay_tao else "",
                    "Ng√†y c·∫≠p nh·∫≠t": product.ngay_cap_nhat.strftime("%d/%m/%Y %H:%M") if product.ngay_cap_nhat else ""
                })

            df = pd.DataFrame(data)

            return self._create_styled_excel(df, "Danh s√°ch s·∫£n ph·∫©m", "SAN_PHAM")

        except Exception as e:
            app_logger.error(f"‚ùå Error exporting products to Excel: {str(e)}")
            raise

    def export_orders_to_excel(self, filters: Optional[Dict[str, Any]] = None) -> bytes:
        """üìã Export orders to Excel"""
        try:
            query = self.db_session.query(DonHang).join(KhachHang, isouter=True)

            # Apply filters
            if filters:
                if filters.get("status"):
                    if isinstance(filters["status"], list):
                        query = query.filter(DonHang.trang_thai.in_(filters["status"]))
                    else:
                        query = query.filter(DonHang.trang_thai == filters["status"])
                if filters.get("created_from"):
                    query = query.filter(DonHang.ngay_tao >= filters["created_from"])
                if filters.get("created_to"):
                    query = query.filter(DonHang.ngay_tao <= filters["created_to"])

            orders = query.all()

            # Create DataFrame
            data = []
            for order in orders:
                data.append({
                    "ID": order.id,
                    "M√£ ƒë∆°n h√†ng": order.ma_don_hang,
                    "T√™n kh√°ch h√†ng": order.khach_hang.ho_ten if order.khach_hang else "N/A",
                    "Email kh√°ch h√†ng": order.khach_hang.email if order.khach_hang else "N/A",
                    "Tr·∫°ng th√°i": order.trang_thai.value,
                    "T·ªïng ti·ªÅn": order.tong_tien,
                    "Ph√≠ ship": order.phi_ship,
                    "Ghi ch√∫": order.ghi_chu,
                    "M√£ v·∫≠n ƒë∆°n": order.ma_van_don,
                    "Ng√†y t·∫°o": order.ngay_tao.strftime("%d/%m/%Y %H:%M") if order.ngay_tao else "",
                    "Ng√†y giao h√†ng": order.ngay_giao_hang.strftime("%d/%m/%Y") if order.ngay_giao_hang else ""
                })

            df = pd.DataFrame(data)

            return self._create_styled_excel(df, "Danh s√°ch ƒë∆°n h√†ng", "DON_HANG")

        except Exception as e:
            app_logger.error(f"‚ùå Error exporting orders to Excel: {str(e)}")
            raise

    def export_to_csv(self, entity_type: str, filters: Optional[Dict[str, Any]] = None) -> str:
        """üìÑ Export to CSV format"""
        try:
            if entity_type == "customers":
                query = self.db_session.query(KhachHang)

                if filters:
                    if filters.get("customer_type"):
                        query = query.filter(KhachHang.loai_khach == filters["customer_type"])

                customers = query.all()
                data = []
                for customer in customers:
                    data.append({
                        "ID": customer.id,
                        "H·ªç t√™n": customer.ho_ten,
                        "Email": customer.email,
                        "S·ªë ƒëi·ªán tho·∫°i": customer.so_dien_thoai,
                        "ƒê·ªãa ch·ªâ": customer.dia_chi,
                        "Lo·∫°i kh√°ch h√†ng": customer.loai_khach.value,
                        "T·ªïng ti·ªÅn ƒë√£ mua": customer.tong_tien_da_mua,
                        "S·ªë ƒë∆°n th√†nh c√¥ng": customer.so_don_thanh_cong,
                        "Ng√†y t·∫°o": customer.ngay_tao.strftime("%d/%m/%Y %H:%M") if customer.ngay_tao else ""
                    })

            elif entity_type == "products":
                query = self.db_session.query(SanPham)

                if filters:
                    if filters.get("category"):
                        query = query.filter(SanPham.danh_muc.ilike(f"%{filters['category']}%"))

                products = query.all()
                data = []
                for product in products:
                    data.append({
                        "ID": product.id,
                        "T√™n s·∫£n ph·∫©m": product.ten_san_pham,
                        "M√¥ t·∫£": product.mo_ta,
                        "Danh m·ª•c": product.danh_muc,
                        "Gi√° b√°n": product.gia_ban,
                        "Tr·ªçng l∆∞·ª£ng": product.trong_luong,
                        "Qu·ªëc gia ngu·ªìn": product.quoc_gia_nguon,
                        "Ng√†y t·∫°o": product.ngay_tao.strftime("%d/%m/%Y %H:%M") if product.ngay_tao else ""
                    })

            elif entity_type == "orders":
                query = self.db_session.query(DonHang).join(KhachHang, isouter=True)

                if filters:
                    if filters.get("status"):
                        query = query.filter(DonHang.trang_thai == filters["status"])

                orders = query.all()
                data = []
                for order in orders:
                    data.append({
                        "ID": order.id,
                        "M√£ ƒë∆°n h√†ng": order.ma_don_hang,
                        "T√™n kh√°ch h√†ng": order.khach_hang.ho_ten if order.khach_hang else "N/A",
                        "Tr·∫°ng th√°i": order.trang_thai.value,
                        "T·ªïng ti·ªÅn": order.tong_tien,
                        "Ng√†y t·∫°o": order.ngay_tao.strftime("%d/%m/%Y %H:%M") if order.ngay_tao else ""
                    })

            df = pd.DataFrame(data)
            return df.to_csv(index=False, encoding='utf-8-sig')

        except Exception as e:
            app_logger.error(f"‚ùå Error exporting to CSV: {str(e)}")
            raise

    # üì• IMPORT FUNCTIONS
    def import_customers_from_excel(self, file_content: bytes, user_id: int) -> Dict[str, Any]:
        """üë• Import customers from Excel"""
        try:
            # Read Excel file
            df = pd.read_excel(io.BytesIO(file_content))

            # Validate required columns
            required_columns = ["H·ªç t√™n", "Email", "S·ªë ƒëi·ªán tho·∫°i"]
            missing_columns = [col for col in required_columns if col not in df.columns]

            if missing_columns:
                return {
                    "success": False,
                    "error": f"Thi·∫øu c√°c c·ªôt b·∫Øt bu·ªôc: {', '.join(missing_columns)}"
                }

            success_count = 0
            error_count = 0
            errors = []

            for index, row in df.iterrows():
                try:
                    # Check if customer already exists
                    existing = self.db_session.query(KhachHang).filter_by(email=row["Email"]).first()

                    if existing:
                        errors.append(f"D√≤ng {index + 2}: Email {row['Email']} ƒë√£ t·ªìn t·∫°i")
                        error_count += 1
                        continue

                    # Create new customer
                    customer = KhachHang(
                        ho_ten=row["H·ªç t√™n"],
                        email=row["Email"],
                        so_dien_thoai=str(row["S·ªë ƒëi·ªán tho·∫°i"]) if pd.notna(row["S·ªë ƒëi·ªán tho·∫°i"]) else None,
                        dia_chi=row.get("ƒê·ªãa ch·ªâ", ""),
                        loai_khach=LoaiKhachHang.TIEM_NANG,
                        nguoi_tao_id=user_id
                    )

                    self.db_session.add(customer)
                    success_count += 1

                except Exception as e:
                    errors.append(f"D√≤ng {index + 2}: {str(e)}")
                    error_count += 1

            self.db_session.commit()

            return {
                "success": True,
                "message": f"Import th√†nh c√¥ng {success_count} kh√°ch h√†ng, {error_count} l·ªói",
                "success_count": success_count,
                "error_count": error_count,
                "errors": errors[:10]  # Limit to first 10 errors
            }

        except Exception as e:
            self.db_session.rollback()
            app_logger.error(f"‚ùå Error importing customers from Excel: {str(e)}")
            return {
                "success": False,
                "error": f"L·ªói import: {str(e)}"
            }

    def import_products_from_excel(self, file_content: bytes, user_id: int) -> Dict[str, Any]:
        """üõçÔ∏è Import products from Excel"""
        try:
            df = pd.read_excel(io.BytesIO(file_content))

            # Validate required columns
            required_columns = ["T√™n s·∫£n ph·∫©m", "Gi√° b√°n"]
            missing_columns = [col for col in required_columns if col not in df.columns]

            if missing_columns:
                return {
                    "success": False,
                    "error": f"Thi·∫øu c√°c c·ªôt b·∫Øt bu·ªôc: {', '.join(missing_columns)}"
                }

            success_count = 0
            error_count = 0
            errors = []

            for index, row in df.iterrows():
                try:
                    # Create new product
                    product = SanPham(
                        ten_san_pham=row["T√™n s·∫£n ph·∫©m"],
                        mo_ta=row.get("M√¥ t·∫£", ""),
                        danh_muc=row.get("Danh m·ª•c", ""),
                        gia_ban=float(row["Gi√° b√°n"]),
                        trong_luong=float(row.get("Tr·ªçng l∆∞·ª£ng", 0)) if pd.notna(row.get("Tr·ªçng l∆∞·ª£ng")) else 0,
                        quoc_gia_nguon=row.get("Qu·ªëc gia ngu·ªìn", ""),
                        nguoi_tao_id=user_id
                    )

                    self.db_session.add(product)
                    success_count += 1

                except Exception as e:
                    errors.append(f"D√≤ng {index + 2}: {str(e)}")
                    error_count += 1

            self.db_session.commit()

            return {
                "success": True,
                "message": f"Import th√†nh c√¥ng {success_count} s·∫£n ph·∫©m, {error_count} l·ªói",
                "success_count": success_count,
                "error_count": error_count,
                "errors": errors[:10]
            }

        except Exception as e:
            self.db_session.rollback()
            app_logger.error(f"‚ùå Error importing products from Excel: {str(e)}")
            return {
                "success": False,
                "error": f"L·ªói import: {str(e)}"
            }

    # üé® HELPER FUNCTIONS
    def _create_styled_excel(self, df: pd.DataFrame, sheet_name: str, file_prefix: str) -> bytes:
        """üé® Create styled Excel file"""
        output = io.BytesIO()

        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name=sheet_name, index=False)

            # Get workbook and worksheet
            workbook = writer.book
            worksheet = writer.sheets[sheet_name]

            # Style header row
            header_font = Font(bold=True, color="FFFFFF")
            header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
            header_alignment = Alignment(horizontal="center", vertical="center")

            for col in worksheet[1]:
                col.font = header_font
                col.fill = header_fill
                col.alignment = header_alignment

            # Auto-adjust column widths
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter

                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass

                adjusted_width = min(max_length + 2, 50)
                worksheet.column_dimensions[column_letter].width = adjusted_width

            # Add borders
            thin_border = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )

            for row in worksheet.iter_rows():
                for cell in row:
                    cell.border = thin_border

        output.seek(0)
        return output.read()

    def get_export_stats(self) -> Dict[str, Any]:
        """üìä Get export statistics"""
        try:
            stats = {
                "total_customers": self.db_session.query(KhachHang).count(),
                "total_products": self.db_session.query(SanPham).count(),
                "total_orders": self.db_session.query(DonHang).count(),
                "export_formats": ["Excel (.xlsx)", "CSV (.csv)"],
                "import_formats": ["Excel (.xlsx)"],
                "last_export": datetime.now().strftime("%d/%m/%Y %H:%M")
            }

            return stats

        except Exception as e:
            app_logger.error(f"‚ùå Error getting export stats: {str(e)}")
            return {}

# üåü Global export service
export_service = ExportImportService()

print("üìä Export/Import service loaded successfully!")