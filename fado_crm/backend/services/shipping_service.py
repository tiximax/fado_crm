# -*- coding: utf-8 -*- """ Shipping Service Business logic cho shipping & logistics trong FADO CRM """ from datetime import datetime, timedelta from typing import Dict, List, Optional, Any from sqlalchemy.orm import Session from sqlalchemy import text import json from integrations.shipping.ghn import create_ghn_gateway, GHNShippingGateway, GHNServiceType from database import get_db from logging_config import app_logger from models import KhachHang, DonHang, TrangThaiDonHang class ShippingService: """Service xu ly shipping cho FADO CRM""" def __init__(self, db: Session): self.db = db self.ghn_gateway = create_ghn_gateway() # Shipping status mapping self.status_mapping = { 'ready_to_pick': 'Cho lay hang', 'picking': 'Dang lay hang', 'picked': 'Da lay hang', 'storing': 'Hang nhap kho', 'transporting': 'Dang luan chuyen', 'delivering': 'Dang giao hang', 'delivered': 'Da giao hang', 'delivery_fail': 'Giao hang that bai', 'cancel': 'Da huy' } # Default warehouse info (HCM) self.default_warehouse = { 'from_name': 'FADO Warehouse', 'from_phone': '0123456789', 'from_address': '123 Nguyen Van Cu, Quan 5', 'from_ward_name': 'Phuong 4', 'from_district_name': 'Quan 5', 'from_province_name': 'Ho Chi Minh', 'from_district_id': 1444, # GHN District ID for Quan 5 'from_ward_code': '21211' # GHN Ward code for Phuong 4 } app_logger.info(" Shipping Service initialized") def calculate_shipping_cost(self, shipping_info: Dict[str, Any]) -> Dict[str, Any]: """ Tinh phi van chuyen""" try: # Validate required fields required_fields = ['to_district_id', 'to_ward_code', 'weight'] for field in required_fields: if field not in shipping_info: return { 'success': False, 'error': f'Thieu thong tin: {field}' } # Prepare shipping data for GHN shipping_data = { 'from_district_id': self.default_warehouse['from_district_id'], 'from_ward_code': self.default_warehouse['from_ward_code'], 'to_district_id': shipping_info['to_district_id'], 'to_ward_code': shipping_info['to_ward_code'], 'weight': shipping_info['weight'], 'service_type_id': shipping_info.get('service_type_id', GHNServiceType.STANDARD.value), 'insurance_value': shipping_info.get('insurance_value', 0), 'cod_amount': shipping_info.get('cod_amount', 0), 'height': shipping_info.get('height', 5), 'length': shipping_info.get('length', 20), 'width': shipping_info.get('width', 20) } # Call GHN API to calculate fee fee_result = self.ghn_gateway.calculate_shipping_fee(shipping_data) if fee_result['success']: return { 'success': True, 'shipping_fee': fee_result['total_fee'], 'service_fee': fee_result['service_fee'], 'insurance_fee': fee_result['insurance_fee'], 'total_fee': fee_result['total_fee'], 'delivery_type': fee_result.get('delivery_type'), 'provider': 'ghn', 'calculated_at': datetime.now().isoformat() } else: return fee_result except Exception as e: app_logger.error(f" Error calculating shipping cost: {str(e)}") return { 'success': False, 'error': f'Loi tinh phi van chuyen: {str(e)}' } def create_shipping_order(self, order_id: int, shipping_info: Dict[str, Any]) -> Dict[str, Any]: """ Tao don van chuyen""" try: # Get order information order = self.db.query(DonHang).filter(DonHang.id == order_id).first() if not order: return { 'success': False, 'error': 'Don hang khong ton tai' } # Get customer information customer = self.db.query(KhachHang).filter(KhachHang.id == order.khach_hang_id).first() if not customer: return { 'success': False, 'error': 'Thong tin khach hang khong ton tai' } # Prepare order data for GHN order_data = { **self.default_warehouse, 'to_name': customer.ho_ten, 'to_phone': customer.so_dien_thoai, 'to_address': shipping_info.get('to_address', customer.dia_chi), 'to_district_id': shipping_info['to_district_id'], 'to_ward_code': shipping_info['to_ward_code'], 'cod_amount': int(order.tong_tien) if shipping_info.get('cod_enabled') else 0, 'content': f'Don hang FADO #{order.ma_don_hang}', 'weight': shipping_info.get('weight', 500), # Default 500g 'service_type_id': shipping_info.get('service_type_id', GHNServiceType.STANDARD.value), 'payment_type_id': 1, # Shop tra phi 'note': f'Don hang #{order.ma_don_hang} - Khach hang: {customer.ho_ten}', 'items': [ { 'name': f'San pham don hang #{order.ma_don_hang}', 'code': order.ma_don_hang, 'quantity': 1, 'weight': shipping_info.get('weight', 500), 'length': shipping_info.get('length', 20), 'width': shipping_info.get('width', 20), 'height': shipping_info.get('height', 5) } ] } # Create shipping order via GHN shipping_result = self.ghn_gateway.create_shipping_order(order_data) if shipping_result['success']: # Update order status self.db.execute(text(""" UPDATE don_hang SET trang_thai = :status, ngay_cap_nhat = :updated_at WHERE id = :order_id """), { "order_id": order_id, "status": TrangThaiDonHang.DANG_SHIP.value, "updated_at": datetime.now() }) self.db.commit() app_logger.info(f" Shipping order created: {shipping_result['order_code']}") # Send notification self._notify_shipping_created(order, shipping_result) return { 'success': True, 'order_id': order_id, 'shipping_code': shipping_result['order_code'], 'sort_code': shipping_result['sort_code'], 'total_fee': shipping_result['total_fee'], 'expected_delivery_time': shipping_result.get('expected_delivery_time'), 'provider': 'ghn', 'created_at': datetime.now().isoformat() } else: return shipping_result except Exception as e: app_logger.error(f" Error creating shipping order: {str(e)}") return { 'success': False, 'error': f'Loi tao don van chuyen: {str(e)}' } def track_shipping_order(self, shipping_code: str) -> Dict[str, Any]: """ Theo doi don van chuyen""" try: # Get tracking info from GHN tracking_result = self.ghn_gateway.get_order_info(shipping_code) if tracking_result['success']: # Parse tracking logs logs = tracking_result.get('logs', []) tracking_history = [] for log in logs: tracking_history.append({ 'status': log.get('status'), 'status_text': self.status_mapping.get(log.get('status'), log.get('status')), 'updated_date': log.get('updated_date'), 'description': log.get('description', ''), 'location': log.get('location', '') }) return { 'success': True, 'shipping_code': shipping_code, 'current_status': tracking_result['status'], 'current_status_text': tracking_result['status_text'], 'from_name': tracking_result['from_name'], 'to_name': tracking_result['to_name'], 'to_address': tracking_result['to_address'], 'content': tracking_result['content'], 'weight': tracking_result['weight'], 'fee': tracking_result['fee'], 'cod_amount': tracking_result.get('money_collection', 0), 'tracking_history': tracking_history, 'provider': 'ghn', 'last_updated': tracking_result['updated_at'] } else: return tracking_result except Exception as e: app_logger.error(f" Error tracking shipping order: {str(e)}") return { 'success': False, 'error': f'Loi theo doi van chuyen: {str(e)}' } def cancel_shipping_order(self, shipping_codes: List[str], reason: str = "Huy theo yeu cau") -> Dict[str, Any]: """ Huy don van chuyen""" try: # Cancel via GHN cancel_result = self.ghn_gateway.cancel_order(shipping_codes) if cancel_result['success']: app_logger.info(f" Shipping orders cancelled: {shipping_codes}") return { 'success': True, 'cancelled_orders': shipping_codes, 'reason': reason, 'provider': 'ghn', 'cancelled_at': datetime.now().isoformat() } else: return cancel_result except Exception as e: app_logger.error(f" Error cancelling shipping orders: {str(e)}") return { 'success': False, 'error': f'Loi huy don van chuyen: {str(e)}' } def get_provinces(self) -> Dict[str, Any]: """ Lay danh sach tinh/thanh pho""" try: return self.ghn_gateway.get_provinces() except Exception as e: app_logger.error(f" Error getting provinces: {str(e)}") return { 'success': False, 'error': f'Loi lay danh sach tinh: {str(e)}' } def get_districts(self, province_id: int) -> Dict[str, Any]: """ Lay danh sach quan/huyen""" try: return self.ghn_gateway.get_districts(province_id) except Exception as e: app_logger.error(f" Error getting districts: {str(e)}") return { 'success': False, 'error': f'Loi lay danh sach quan/huyen: {str(e)}' } def get_wards(self, district_id: int) -> Dict[str, Any]: """ Lay danh sach phuong/xa""" try: return self.ghn_gateway.get_wards(district_id) except Exception as e: app_logger.error(f" Error getting wards: {str(e)}") return { 'success': False, 'error': f'Loi lay danh sach phuong/xa: {str(e)}' } def get_available_services(self, to_district_id: int) -> Dict[str, Any]: """ Lay dich vu van chuyen co san""" try: from_district = self.default_warehouse['from_district_id'] return self.ghn_gateway.get_available_services(from_district, to_district_id) except Exception as e: app_logger.error(f" Error getting available services: {str(e)}") return { 'success': False, 'error': f'Loi lay dich vu van chuyen: {str(e)}' } def generate_print_token(self, shipping_codes: List[str]) -> Dict[str, Any]: """ Tao token in don hang""" try: return self.ghn_gateway.create_print_token(shipping_codes) except Exception as e: app_logger.error(f" Error generating print token: {str(e)}") return { 'success': False, 'error': f'Loi tao token in: {str(e)}' } def get_shipping_statistics(self, days: int = 30) -> Dict[str, Any]: """ Thong ke van chuyen""" try: # This would query from actual shipping data in production # For now, return mock statistics end_date = datetime.now() start_date = end_date - timedelta(days=days) stats = { 'period': { 'start_date': start_date.isoformat(), 'end_date': end_date.isoformat(), 'days': days }, 'summary': { 'total_shipments': 85, 'delivered_shipments': 78, 'in_transit_shipments': 5, 'failed_shipments': 2, 'delivery_rate': 91.8, 'avg_delivery_time': 2.5, # days 'total_shipping_cost': 2125000 # VND }, 'by_service': { 'standard': { 'shipments': 70, 'delivery_rate': 95.0, 'avg_cost': 25000 }, 'express': { 'shipments': 15, 'delivery_rate': 80.0, 'avg_cost': 45000 } }, 'by_destination': { 'hcm': {'shipments': 45, 'delivery_rate': 97.0}, 'hanoi': {'shipments': 20, 'delivery_rate': 90.0}, 'danang': {'shipments': 10, 'delivery_rate': 85.0}, 'others': {'shipments': 10, 'delivery_rate': 80.0} }, 'generated_at': datetime.now().isoformat() } return { 'success': True, 'statistics': stats } except Exception as e: app_logger.error(f" Error getting shipping statistics: {str(e)}") return { 'success': False, 'error': f'Loi lay thong ke van chuyen: {str(e)}' } def _notify_shipping_created(self, order: DonHang, shipping_info: Dict[str, Any]): """ Thong bao da tao don van chuyen""" try: from websocket_service import notify_business_milestone # This would be async in actual implementation app_logger.info(f" Sending shipping created notification for order {order.id}") except Exception as e: app_logger.error(f" Error sending shipping notification: {str(e)}") def get_shipping_service(db: Session = None) -> ShippingService: """ Factory de tao Shipping service""" if db is None: db = next(get_db()) return ShippingService(db) 