# -*- coding: utf-8 -*- """ Communication Service Orchestration layer cho tat ca communication channels trong FADO CRM """ from datetime import datetime, timedelta from typing import Dict, List, Optional, Any, Union from sqlalchemy.orm import Session from sqlalchemy import text from enum import Enum import json from integrations.communication.email import create_email_service from integrations.communication.sms import create_sms_service from integrations.communication.whatsapp import create_whatsapp_service from database import get_db from logging_config import app_logger from models import KhachHang, DonHang, TrangThaiDonHang class CommunicationChannel(Enum): """Communication channels""" EMAIL = "email" SMS = "sms" WHATSAPP = "whatsapp" ALL = "all" class NotificationTrigger(Enum): """Notification triggers""" ORDER_CREATED = "order_created" ORDER_CONFIRMED = "order_confirmed" ORDER_PAID = "order_paid" ORDER_SHIPPED = "order_shipped" ORDER_DELIVERED = "order_delivered" PAYMENT_REMINDER = "payment_reminder" WELCOME_NEW_CUSTOMER = "welcome_new_customer" ABANDONED_CART = "abandoned_cart" PROMO_CAMPAIGN = "promo_campaign" class CommunicationService: """< Unified Communication Service cho FADO CRM""" def __init__(self, db: Session): self.db = db self.email_service = create_email_service() self.sms_service = create_sms_service() self.whatsapp_service = create_whatsapp_service() # Customer communication preferences (would be in DB in production) self.customer_preferences = { 'default': { 'email': True, 'sms': True, 'whatsapp': False, 'priority_channel': CommunicationChannel.EMAIL } } # Automation rules configuration self.automation_rules = { NotificationTrigger.ORDER_CONFIRMED: { 'enabled': True, 'channels': [CommunicationChannel.EMAIL, CommunicationChannel.SMS], 'delay_minutes': 0, 'templates': { 'email': 'order_confirmed', 'sms': 'order_confirmed', 'whatsapp': 'order_confirmed' } }, NotificationTrigger.ORDER_SHIPPED: { 'enabled': True, 'channels': [CommunicationChannel.EMAIL, CommunicationChannel.SMS, CommunicationChannel.WHATSAPP], 'delay_minutes': 0, 'templates': { 'email': 'order_shipped', 'sms': 'order_shipped', 'whatsapp': 'order_shipped' } }, NotificationTrigger.PAYMENT_REMINDER: { 'enabled': True, 'channels': [CommunicationChannel.EMAIL, CommunicationChannel.SMS], 'delay_minutes': 1440, # 24 hours 'templates': { 'email': 'payment_reminder', 'sms': 'payment_reminder', 'whatsapp': 'payment_reminder' } }, NotificationTrigger.WELCOME_NEW_CUSTOMER: { 'enabled': True, 'channels': [CommunicationChannel.EMAIL], 'delay_minutes': 0, 'templates': { 'email': 'welcome' } } } app_logger.info("< Communication Service initialized with all channels") def send_unified_message(self, customer_id: int, message_data: Dict[str, Any], channels: List[CommunicationChannel] = None) -> Dict[str, Any]: """= G i message qua nhi u channels""" try: # Get customer info customer = self.db.query(KhachHang).filter(KhachHang.id == customer_id).first() if not customer: return { 'success': False, 'error': 'Kh ch h ng kh ng t n t i' } # Get customer preferences preferences = self._get_customer_preferences(customer_id) # Determine channels to use if channels is None: channels = [CommunicationChannel.EMAIL, CommunicationChannel.SMS] results = {} success_count = 0 failed_count = 0 # Send via each channel for channel in channels: if not preferences.get(channel.value, True): results[channel.value] = { 'success': False, 'error': 'Kh ch h ng  t t k nh n y', 'skipped': True } continue if channel == CommunicationChannel.EMAIL: result = self._send_email_message(customer, message_data) elif channel == CommunicationChannel.SMS: result = self._send_sms_message(customer, message_data) elif channel == CommunicationChannel.WHATSAPP: result = self._send_whatsapp_message(customer, message_data) else: result = { 'success': False, 'error': f'Channel {channel.value} kh ng  c h tr ' } results[channel.value] = result if result.get('success'): success_count += 1 else: failed_count += 1 # Log communication activity self._log_communication_activity(customer_id, message_data, results) return { 'success': success_count > 0, 'customer_id': customer_id, 'customer_name': customer.ho_ten, 'channels_attempted': len(channels), 'successful_channels': success_count, 'failed_channels': failed_count, 'results': results, 'sent_at': datetime.now().isoformat() } except Exception as e: app_logger.error(f"L Error sending unified message: {str(e)}") return { 'success': False, 'error': f'L i g i message: {str(e)}' } def trigger_automated_notification(self, trigger: NotificationTrigger, data: Dict[str, Any]) -> Dict[str, Any]: """> Trigger automated notification""" try: # Get automation rule rule = self.automation_rules.get(trigger) if not rule or not rule['enabled']: return { 'success': False, 'error': f'Automation rule for {trigger.value} kh ng  c k ch ho t' } # Extract customer info from data customer_id = data.get('customer_id') order_id = data.get('order_id') if not customer_id: return { 'success': False, 'error': 'Thi u customer_id trong data' } # Get customer and order info customer = self.db.query(KhachHang).filter(KhachHang.id == customer_id).first() if not customer: return { 'success': False, 'error': 'Kh ch h ng kh ng t n t i' } order = None if order_id: order = self.db.query(DonHang).filter(DonHang.id == order_id).first() # Prepare message data based on trigger message_data = self._prepare_trigger_message_data(trigger, customer, order, data) # Apply delay if configured delay_minutes = rule.get('delay_minutes', 0) if delay_minutes > 0: # In production, you would queue this for delayed execution app_logger.info(f" Scheduling notification for {delay_minutes} minutes delay") # Send notification result = self.send_unified_message(customer_id, message_data, rule['channels']) if result['success']: app_logger.info(f"> Automated notification triggered: {trigger.value} for customer {customer_id}") return result except Exception as e: app_logger.error(f"L Error triggering automated notification: {str(e)}") return { 'success': False, 'error': f'L i trigger notification: {str(e)}' } def send_campaign_message(self, campaign_data: Dict[str, Any], target_customers: List[int] = None) -> Dict[str, Any]: """= G i campaign message  n nhi u customers""" try: # Get target customers if target_customers: customers = self.db.query(KhachHang).filter(KhachHang.id.in_(target_customers)).all() else: # Default: all active customers customers = self.db.query(KhachHang).filter(KhachHang.trang_thai == True).all() if not customers: return { 'success': False, 'error': 'Kh ng c kh ch h ng n o  g i campaign' } # Campaign settings channels = campaign_data.get('channels', [CommunicationChannel.EMAIL]) template_name = campaign_data.get('template_name') custom_message = campaign_data.get('custom_message') results = [] success_count = 0 failed_count = 0 # Send to each customer for customer in customers: try: # Personalize message data personalized_data = { **campaign_data, 'customer_name': customer.ho_ten, 'customer_email': customer.email, 'customer_phone': customer.so_dien_thoai } if template_name: personalized_data['template_name'] = template_name elif custom_message: personalized_data['message'] = custom_message # Send unified message result = self.send_unified_message(customer.id, personalized_data, channels) results.append({ 'customer_id': customer.id, 'customer_name': customer.ho_ten, **result }) if result['success']: success_count += 1 else: failed_count += 1 except Exception as e: app_logger.error(f"L Campaign send error for customer {customer.id}: {str(e)}") results.append({ 'customer_id': customer.id, 'customer_name': customer.ho_ten, 'success': False, 'error': str(e) }) failed_count += 1 app_logger.info(f"= Campaign completed: {success_count} success, {failed_count} failed") return { 'success': True, 'campaign_name': campaign_data.get('campaign_name', 'Unnamed Campaign'), 'total_customers': len(customers), 'successful_sends': success_count, 'failed_sends': failed_count, 'results': results, 'sent_at': datetime.now().isoformat() } except Exception as e: app_logger.error(f"L Error sending campaign: {str(e)}") return { 'success': False, 'error': f'L i g i campaign: {str(e)}' } def _send_email_message(self, customer: KhachHang, message_data: Dict[str, Any]) -> Dict[str, Any]: """= Send email message""" try: template_name = message_data.get('template_name') custom_message = message_data.get('message') subject = message_data.get('subject', 'Th ng b o t FADO') if template_name: variables = { 'customer_name': customer.ho_ten, **message_data.get('variables', {}) } return self.email_service.send_template_email( to_email=customer.email, template_name=template_name, variables=variables ) elif custom_message: return self.email_service.send_email( to_email=customer.email, subject=subject, body=custom_message ) else: return { 'success': False, 'error': 'Thi u template_name ho c message' } except Exception as e: return { 'success': False, 'error': f'Email error: {str(e)}' } def _send_sms_message(self, customer: KhachHang, message_data: Dict[str, Any]) -> Dict[str, Any]: """= Send SMS message""" try: template_name = message_data.get('template_name') custom_message = message_data.get('message') if not customer.so_dien_thoai: return { 'success': False, 'error': 'Kh ch h ng kh ng c s i n tho i' } if template_name: variables = { 'customer_name': customer.ho_ten, **message_data.get('variables', {}) } return self.sms_service.send_template_sms( phone=customer.so_dien_thoai, template_name=template_name, variables=variables ) elif custom_message: return self.sms_service.send_sms( phone=customer.so_dien_thoai, message=custom_message ) else: return { 'success': False, 'error': 'Thi u template_name ho c message' } except Exception as e: return { 'success': False, 'error': f'SMS error: {str(e)}' } def _send_whatsapp_message(self, customer: KhachHang, message_data: Dict[str, Any]) -> Dict[str, Any]: """= Send WhatsApp message""" try: template_name = message_data.get('template_name') custom_message = message_data.get('message') if not customer.so_dien_thoai: return { 'success': False, 'error': 'Kh ch h ng kh ng c s i n tho i' } if template_name: variables = [ customer.ho_ten, *message_data.get('template_variables', []) ] return self.whatsapp_service.send_template_message( to=customer.so_dien_thoai, template_name=f'fado_{template_name}', variables=variables ) elif custom_message: return self.whatsapp_service.send_text_message( to=customer.so_dien_thoai, message=custom_message ) else: return { 'success': False, 'error': 'Thi u template_name ho c message' } except Exception as e: return { 'success': False, 'error': f'WhatsApp error: {str(e)}' } def _prepare_trigger_message_data(self, trigger: NotificationTrigger, customer: KhachHang, order: DonHang, data: Dict[str, Any]) -> Dict[str, Any]: """= Prepare message data for automated triggers""" base_data = { 'customer_name': customer.ho_ten, 'customer_email': customer.email, 'customer_phone': customer.so_dien_thoai } if trigger == NotificationTrigger.ORDER_CONFIRMED: return { **base_data, 'template_name': 'order_confirmed', 'subject': 'X c nh n  n h ng FADO', 'variables': { 'order_code': order.ma_don_hang if order else 'N/A', 'total_amount': f"{order.tong_tien:,.0f}" if order else '0', 'order_date': order.ngay_tao.strftime('%d/%m/%Y') if order else datetime.now().strftime('%d/%m/%Y') }, 'template_variables': [ order.ma_don_hang if order else 'N/A', f"{order.tong_tien:,.0f}" if order else '0', order.ngay_tao.strftime('%d/%m/%Y') if order else datetime.now().strftime('%d/%m/%Y') ] } elif trigger == NotificationTrigger.ORDER_SHIPPED: return { **base_data, 'template_name': 'order_shipped', 'subject': ' n h ng   c giao ship', 'variables': { 'order_code': order.ma_don_hang if order else 'N/A', 'shipping_company': data.get('shipping_company', 'GHN'), 'tracking_code': data.get('tracking_code', 'N/A'), 'tracking_url': data.get('tracking_url', 'https://fado.vn/track') }, 'template_variables': [ order.ma_don_hang if order else 'N/A', data.get('shipping_company', 'GHN'), data.get('tracking_code', 'N/A'), data.get('tracking_url', 'https://fado.vn/track') ] } elif trigger == NotificationTrigger.PAYMENT_REMINDER: return { **base_data, 'template_name': 'payment_reminder', 'subject': 'Nh c nh thanh to n  n h ng', 'variables': { 'order_code': order.ma_don_hang if order else 'N/A', 'total_amount': f"{order.tong_tien:,.0f}" if order else '0', 'payment_url': data.get('payment_url', 'https://fado.vn/payment') }, 'template_variables': [ order.ma_don_hang if order else 'N/A', f"{order.tong_tien:,.0f}" if order else '0', data.get('payment_url', 'https://fado.vn/payment') ] } elif trigger == NotificationTrigger.WELCOME_NEW_CUSTOMER: return { **base_data, 'template_name': 'welcome', 'subject': 'Ch o m ng  n v i FADO!', 'variables': {} } else: return base_data def _get_customer_preferences(self, customer_id: int) -> Dict[str, bool]: """  Get customer communication preferences""" # In production, this would query from database return self.customer_preferences.get(str(customer_id), self.customer_preferences['default']) def _log_communication_activity(self, customer_id: int, message_data: Dict[str, Any], results: Dict[str, Any]): """= Log communication activity""" try: # In production, this would save to communication_logs table log_data = { 'customer_id': customer_id, 'message_type': message_data.get('template_name', 'custom'), 'channels': list(results.keys()), 'success_channels': [ch for ch, res in results.items() if res.get('success')], 'timestamp': datetime.now().isoformat() } app_logger.info(f"= Communication logged: {json.dumps(log_data, ensure_ascii=False)}") except Exception as e: app_logger.error(f"L Error logging communication: {str(e)}") def get_communication_statistics(self, days: int = 30) -> Dict[str, Any]: """= Get communication statistics""" try: # Mock statistics - in production, query from logs end_date = datetime.now() start_date = end_date - timedelta(days=days) stats = { 'period': { 'start_date': start_date.isoformat(), 'end_date': end_date.isoformat(), 'days': days }, 'summary': { 'total_communications': 2156, 'successful_communications': 1987, 'failed_communications': 169, 'success_rate': 92.2, 'unique_customers_reached': 892 }, 'by_channel': { 'email': { 'sent': 1245, 'delivered': 1189, 'opened': 756, 'clicked': 234, 'delivery_rate': 95.5, 'open_rate': 60.7, 'click_rate': 18.8 }, 'sms': { 'sent': 687, 'delivered': 651, 'delivery_rate': 94.8, 'response_rate': 12.3 }, 'whatsapp': { 'sent': 224, 'delivered': 212, 'read': 189, 'replied': 67, 'delivery_rate': 94.6, 'read_rate': 84.4, 'response_rate': 29.9 } }, 'by_trigger': { 'order_confirmed': {'sent': 456, 'success_rate': 96.5}, 'order_shipped': {'sent': 423, 'success_rate': 94.8}, 'payment_reminder': {'sent': 234, 'success_rate': 89.3}, 'welcome_new_customer': {'sent': 67, 'success_rate': 98.5}, 'campaign': {'sent': 976, 'success_rate': 91.2} }, 'generated_at': datetime.now().isoformat() } return { 'success': True, 'statistics': stats } except Exception as e: app_logger.error(f"L Error getting communication statistics: {str(e)}") return { 'success': False, 'error': f'L i l y th ng k communication: {str(e)}' } def get_communication_service(db: Session = None) -> CommunicationService: """< Factory  t o Communication service""" if db is None: db = next(get_db()) return CommunicationService(db)