# -*- coding: utf-8 -*- """ Payment Service Business logic cho payment processing trong FADO CRM """ from datetime import datetime, timedelta from typing import Dict, List, Optional, Any from sqlalchemy.orm import Session from sqlalchemy import text import uuid import json from integrations.payment.vnpay import create_vnpay_gateway, VNPayGateway from database import get_db from logging_config import app_logger from models import KhachHang, DonHang, TrangThaiDonHang class PaymentService: """Service xu ly payment cho FADO CRM""" def __init__(self, db: Session): self.db = db self.vnpay_gateway = create_vnpay_gateway() app_logger.info(" Payment Service initialized") def create_payment_transaction(self, order_id: int, payment_method: str = 'vnpay', return_url: str = None, ipn_url: str = None) -> Dict[str, Any]: """ Tao giao dich thanh toan moi""" try: # Get order information order = self.db.query(DonHang).filter(DonHang.id == order_id).first() if not order: return { 'success': False, 'error': 'Don hang khong ton tai' } # Get customer information customer = self.db.query(KhachHang).filter(KhachHang.id == order.khach_hang_id).first() if not customer: return { 'success': False, 'error': 'Thong tin khach hang khong ton tai' } # Generate transaction ID transaction_id = f"TXN_{order_id}_{uuid.uuid4().hex[:8].upper()}" # Prepare order data for payment gateway order_data = { 'order_id': order_id, 'amount': float(order.tong_tien), 'description': f'Thanh toan don hang #{order.ma_don_hang}', 'order_type': 'other', 'customer': { 'phone': customer.so_dien_thoai, 'email': customer.email, 'full_name': customer.ho_ten, 'address': customer.dia_chi } } # Default URLs if not provided if not return_url: return_url = "https://fado.vn/payment/return" if not ipn_url: ipn_url = "https://fado.vn/payment/webhook" # Create payment with VNPay payment_result = self.vnpay_gateway.create_payment_url( order_data, return_url, ipn_url ) if not payment_result['success']: return payment_result app_logger.info(f" Payment transaction created: {transaction_id}") return { 'success': True, 'transaction_id': transaction_id, 'payment_url': payment_result['payment_url'], 'amount': order_data['amount'], 'currency': 'VND', 'expires_at': payment_result.get('expires_at'), 'order_id': order_id, 'payment_method': payment_method, 'created_at': datetime.now().isoformat() } except Exception as e: app_logger.error(f" Error creating payment transaction: {str(e)}") return { 'success': False, 'error': f'Loi tao giao dich thanh toan: {str(e)}' } def handle_payment_callback(self, payment_method: str, callback_params: Dict[str, str]) -> Dict[str, Any]: """ Xu ly callback tu payment gateway""" try: if payment_method == 'vnpay': # Verify VNPay response verification_result = self.vnpay_gateway.verify_payment_response(callback_params.copy()) if not verification_result['success']: return verification_result # Extract transaction information gateway_ref = verification_result.get('transaction_ref') is_successful = verification_result.get('payment_successful', False) # Update order status based on payment result if gateway_ref and gateway_ref.startswith('FADO_'): order_id = int(gateway_ref.split('_')[1]) if is_successful: order_status = TrangThaiDonHang.DA_XAC_NHAN app_logger.info(f" Payment successful for order {order_id}") else: order_status = TrangThaiDonHang.THANH_TOAN_THAT_BAI app_logger.warning(f" Payment failed for order {order_id}") self.db.execute(text(""" UPDATE don_hang SET trang_thai = :status, ngay_cap_nhat = :updated_at WHERE id = :order_id """), { "order_id": order_id, "status": order_status.value, "updated_at": datetime.now() }) self.db.commit() return { 'success': True, 'payment_successful': is_successful, 'amount': verification_result.get('amount'), 'gateway_response': verification_result, 'updated_at': datetime.now().isoformat() } else: return { 'success': False, 'error': f'Payment method {payment_method} khong duoc ho tro' } except Exception as e: app_logger.error(f" Error handling payment callback: {str(e)}") return { 'success': False, 'error': f'Loi xu ly callback thanh toan: {str(e)}' } def get_payment_service(db: Session = None) -> PaymentService: """ Factory de tao Payment service""" if db is None: db = next(get_db()) return PaymentService(db)
