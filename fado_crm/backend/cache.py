# Simple Redis Cache Wrapper for FADO CRM # Uses Redis if REDIS_URL is provided, otherwise falls back to in-memory cache import os import json import time from typing import Any, Optional, Dict try: import redis except Exception: redis = None class NullCache: def __init__(self): self._store: Dict[str, Any] = {} self._ttl: Dict[str, float] = {} def get(self, key: str) -> Optional[str]: now = time.time() if key in self._ttl and self._ttl[key] < now: self._store.pop(key, None) self._ttl.pop(key, None) return None return self._store.get(key) def set(self, key: str, value: str, ex: Optional[int] = None): self._store[key] = value if ex: self._ttl[key] = time.time() + ex def delete(self, key: str): self._store.pop(key, None) self._ttl.pop(key, None) def flush(self): self._store.clear() self._ttl.clear() def health(self) -> Dict[str, Any]: return {"backend": "memory", "entries": len(self._store)} def incr(self, key: str, ex: Optional[int] = None) -> int: current = self.get(key) try: val = int(current) if current is not None else 0 except ValueError: val = 0 val += 1 self.set(key, str(val), ex=ex) return val class RedisCache: def __init__(self, url: str): self._client = redis.Redis.from_url(url, decode_responses=True) def get(self, key: str) -> Optional[str]: return self._client.get(key) def set(self, key: str, value: str, ex: Optional[int] = None): self._client.set(name=key, value=value, ex=ex) def delete(self, key: str): self._client.delete(key) def flush(self): self._client.flushdb() def incr(self, key: str, ex: Optional[int] = None) -> int: val = int(self._client.incr(key)) if ex: self._client.expire(key, ex) return val def health(self) -> Dict[str, Any]: try: pong = self._client.ping() info = self._client.info() return { "backend": "redis", "pong": pong, "used_memory_human": info.get("used_memory_human"), "connected_clients": info.get("connected_clients"), "dbsize": self._client.dbsize(), } except Exception as e: return {"backend": "redis", "status": "error", "error": str(e)} # Factory REDIS_URL = os.getenv("REDIS_URL") if redis and REDIS_URL: cache = RedisCache(REDIS_URL) else: cache = NullCache()
