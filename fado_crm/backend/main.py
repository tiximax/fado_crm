# FADO CRM - FastAPI Backend Sieu Toc! # API nay nhanh nhu tia chop va manh nhu Thor! from fastapi import FastAPI, Depends, HTTPException, Query, status, UploadFile, File, Form, WebSocket, WebSocketDisconnect, Response, Request from fastapi.middleware.cors import CORSMiddleware from fastapi.staticfiles import StaticFiles from sqlalchemy.orm import Session from sqlalchemy import func, and_, extract, or_, desc, asc, text from typing import List, Optional, Dict, Any from datetime import datetime, timedelta import uuid import os # Import cac modules tu tao - Day la nhung dua con tinh than cua chung ta! from database import get_db, create_tables from models import KhachHang, SanPham, DonHang, ChiTietDonHang, LichSuLienHe, NguoiDung, TrangThaiDonHang, LoaiKhachHang, VaiTro, AuditLog, SystemSetting, PaymentStatus import schemas # Import authentication system from auth import ( login_user, get_current_user, get_current_active_user, get_admin_user, get_manager_user, get_password_hash, refresh_access_token ) # Import advanced analytics from analytics_service import get_analytics_data, get_business_insights # Optional advanced modules (non-blocking) try: from analytics import get_analytics_service from ai_recommendations import get_ai_recommendation_engine from advanced_export import get_advanced_export_service from performance_monitor import get_performance_monitor, PerformanceMiddleware OPTIONAL_MODULES_AVAILABLE = True except Exception: OPTIONAL_MODULES_AVAILABLE = False # Import payment service from services.payment_service import get_payment_service # Import shipping service from services.shipping_service import get_shipping_service # Import communication services from services.communication_service import get_communication_service, CommunicationChannel, NotificationTrigger from services.template_engine import create_template_engine # Import file service from file_service import upload_product_image, upload_multiple_images, delete_product_image, file_service # Import search service from search_service import universal_search, advanced_search, get_search_suggestions # Import export/import service from export_service import export_service from services.payment_service import ( create_transaction, get_order_amount, generate_txn_ref, set_txn_gateway_ref, update_status_by_ref ) from integrations.payment.vnpay import build_payment_url, verify_signature # Import WebSocket service from websocket_service import manager, notification_service # Optional metrics (Prometheus) try: from prometheus_client import generate_latest, CONTENT_TYPE_LATEST, REGISTRY METRICS_AVAILABLE = True except Exception: METRICS_AVAILABLE = False # Optional rate limiting try: from slowapi import Limiter from slowapi.util import get_remote_address from slowapi.errors import RateLimitExceeded from slowapi.middleware import SlowAPIMiddleware limiter = Limiter(key_func=get_remote_address, default_limits=["200/minute"]) # default RATE_LIMITING = True except Exception: limiter = None RATE_LIMITING = False # Helper decorator to conditionally apply rate limits def rate_limit(limit_str: str): def decorator(func): if RATE_LIMITING and limiter: return limiter.limit(limit_str)(func) return func return decorator # Database engine (for health check) from database import engine # Caching (Redis) optional try: from cache import cache CACHE_AVAILABLE = True except Exception: CACHE_AVAILABLE = False # Import error handling & logging from exceptions import ( NotFoundError, ValidationError, ConflictError, DatabaseError, format_success_response ) from logging_config import app_logger, log_user_action, log_business_event from middleware import ErrorHandlerMiddleware, RequestLoggingMiddleware, SecurityHeadersMiddleware # Khoi tao FastAPI app voi title sieu ngau! app = FastAPI( title=" FADO.VN CRM API", description="API CRM cho nganh mua ho - Code boi AI voi tinh yeu! ", version="1.0.0", docs_url="/docs", # Swagger UI redoc_url="/redoc" # ReDoc ) # Add Performance Monitoring Middleware (optional) try: if OPTIONAL_MODULES_AVAILABLE: app.add_middleware(PerformanceMiddleware) except Exception: pass # Optional GraphQL endpoint at /graphql try: from strawberry.fastapi import GraphQLRouter from graphql_schema import schema as gql_schema graphql_app = GraphQLRouter(gql_schema) app.include_router(graphql_app, prefix="/graphql") except Exception: app_logger.info("GraphQL not enabled (strawberry not installed or schema import failed)") # Add security and error handling middleware app.add_middleware(SecurityHeadersMiddleware) app.add_middleware(ErrorHandlerMiddleware) app.add_middleware(RequestLoggingMiddleware) # Add rate limiting middleware if available if RATE_LIMITING: app.state.limiter = limiter app.add_exception_handler(RateLimitExceeded, lambda r, e: Response(status_code=429, content='{"message":"Rate limit exceeded","success":false}', media_type="application/json")) app.add_middleware(SlowAPIMiddleware) # CORS - Cho phep frontend goi API tu domain khac app.add_middleware( CORSMiddleware, allow_origins=["*"], # Trong production nen chi dinh cu the domain allow_credentials=True, allow_methods=["*"], allow_headers=["*"], ) # Static file serving for uploads app.mount("/uploads", StaticFiles(directory="uploads"), name="uploads") # Startup event - Tao database khi khoi dong @app.on_event("startup") async def startup_event(): app_logger.info(" Starting FADO CRM API...") try: create_tables() app_logger.success(" Database tables created successfully") app_logger.info(" FADO CRM API is ready to serve!") # Log business event log_business_event("API_STARTUP", { "version": "1.0.0", "environment": "development" }) except Exception as e: app_logger.error(f" Failed to start API: {str(e)}") raise # Root endpoint - Chao mung den voi API! @app.get("/", response_model=schemas.MessageResponse) async def root(): """Endpoint chao mung - Hello World phien ban sieu xin!""" return schemas.MessageResponse( message="Chao mung den voi FADO.VN CRM API! San sang phuc vu!", success=True ) # Health check endpoint @app.get("/health") async def health_check(): # Database health db_ok = False db_error = None try: with engine.connect() as conn: conn.execute(text("SELECT 1")) db_ok = True except Exception as e: db_error = str(e) # Cache health cache_status = {"enabled": CACHE_AVAILABLE} if CACHE_AVAILABLE: try: info = cache.health() cache_status.update({"status": "ok", **info}) except Exception as e: cache_status.update({"status": "error", "error": str(e)}) else: cache_status.update({"status": "disabled"}) return { "status": "ok" if db_ok else "degraded", "database": "ok" if db_ok else {"status": "error", "error": db_error}, "cache": cache_status, "version": "1.0.0" } # PAYMENTS ENDPOINTS (VNPay) @app.post("/payments/create", response_model=schemas.PaymentCreateResponse) async def create_payment(payload: schemas.PaymentCreateRequest, current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db)): order_id = payload.order_id amount = get_order_amount(db, order_id) if amount is None or amount <= 0: raise HTTPException(status_code=400, detail="Don hang khong hop le hoac so tien = 0") txn = create_transaction(db, order_id, amount, method="vnpay") txn_ref = generate_txn_ref() set_txn_gateway_ref(db, txn.transaction_id, txn_ref) # Build VNPay redirect URL tmn_code = os.getenv("VNPAY_TMN_CODE", "demo") return_url = os.getenv("VNPAY_RETURN_URL", "http://127.0.0.1:8000/payments/return") pay_url = os.getenv("VNPAY_PAYMENT_URL", "https://sandbox.vnpayment.vn/paymentv2/vpcpay.html") secret = os.getenv("VNPAY_HASH_SECRET", "secret") params = { "vnp_Version": "2.1.0", "vnp_Command": "pay", "vnp_TmnCode": tmn_code, "vnp_Amount": int(amount * 100), # VND x100 "vnp_CurrCode": "VND", "vnp_TxnRef": txn_ref, "vnp_OrderInfo": f"FADO Order {order_id}", "vnp_OrderType": "other", "vnp_Locale": "vn", "vnp_ReturnUrl": return_url, "vnp_CreateDate": datetime.utcnow().strftime("%Y%m%d%H%M%S"), "vnp_IpAddr": "127.0.0.1", } redirect_url = build_payment_url(params, secret, pay_url) return schemas.PaymentCreateResponse( transaction_id=txn.transaction_id, txn_ref=txn_ref, redirect_url=redirect_url ) @app.get("/payments/return") async def vnpay_return(request: Request, db: Session = Depends(get_db)): q = dict(request.query_params) secret = os.getenv("VNPAY_HASH_SECRET", "secret") if not verify_signature(q, secret): raise HTTPException(status_code=400, detail="Chu ky khong hop le") txn_ref = q.get("vnp_TxnRef") resp_code = q.get("vnp_ResponseCode") status = PaymentStatus.SUCCESS if resp_code == "00" else PaymentStatus.FAILED update_status_by_ref(db, txn_ref, status) return {"success": True, "message": "Payment processed", "txn_ref": txn_ref, "status": status.value} @rate_limit("30/minute") @app.post("/payments/webhook") async def vnpay_webhook(payload: Dict[str, Any], request: Request, db: Session = Depends(get_db)): # VNPay may send form or json; handle both data = payload or {} if not data and request.headers.get("content-type", "").startswith("application/x-www-form-urlencoded"): body = await request.body() s = body.decode("utf-8") pairs = [kv.split("=") for kv in s.split("&") if "=" in kv] data = {k: v for k, v in pairs} secret = os.getenv("VNPAY_HASH_SECRET", "secret") if not verify_signature(data, secret): raise HTTPException(status_code=400, detail="Chu ky khong hop le") txn_ref = data.get("vnp_TxnRef") resp_code = data.get("vnp_ResponseCode") status = PaymentStatus.SUCCESS if resp_code == "00" else PaymentStatus.FAILED update_status_by_ref(db, txn_ref, status) return {"RspCode": "00", "Message": "Confirm Success"} # Prometheus metrics (if available) if METRICS_AVAILABLE: @app.get("/metrics") async def metrics(): data = generate_latest(REGISTRY) return Response(content=data, media_type=CONTENT_TYPE_LATEST) # Admin: Audit logs @app.get("/admin/audit-logs", response_model=List[schemas.AuditLog]) async def list_audit_logs( skip: int = Query(0, ge=0), limit: int = Query(100, ge=1, le=1000), admin_user: NguoiDung = Depends(get_admin_user), db: Session = Depends(get_db) ): logs = db.query(AuditLog).order_by(AuditLog.created_at.desc()).offset(skip).limit(limit).all() return logs # Admin: System Settings @app.get("/admin/system-settings", response_model=List[schemas.SystemSetting]) async def list_settings( admin_user: NguoiDung = Depends(get_admin_user), db: Session = Depends(get_db) ): settings = db.query(SystemSetting).order_by(SystemSetting.key.asc()).all() return settings @app.get("/admin/system-settings/{key}", response_model=schemas.SystemSetting) async def get_setting( key: str, admin_user: NguoiDung = Depends(get_admin_user), db: Session = Depends(get_db) ): setting = db.query(SystemSetting).filter(SystemSetting.key == key).first() if not setting: raise HTTPException(status_code=404, detail="Khong tim thay cau hinh") return setting @app.put("/admin/system-settings/{key}", response_model=schemas.SystemSetting) async def upsert_setting( key: str, payload: schemas.SystemSettingUpdate, admin_user: NguoiDung = Depends(get_admin_user), db: Session = Depends(get_db) ): setting = db.query(SystemSetting).filter(SystemSetting.key == key).first() if not setting: setting = SystemSetting(key=key, value=payload.value, description=payload.description) db.add(setting) else: setting.value = payload.value if payload.description is not None: setting.description = payload.description setting.updated_at = datetime.utcnow() db.commit() db.refresh(setting) return setting # Cache control endpoints (Admin only) @app.post("/cache/flush", response_model=schemas.MessageResponse) async def flush_cache(admin_user: NguoiDung = Depends(get_admin_user)): if not CACHE_AVAILABLE: return schemas.MessageResponse(message="Cache is disabled", success=False) try: cache.flush() return schemas.MessageResponse(message="Da xoa cache thanh cong", success=True) except Exception as e: raise HTTPException(status_code=500, detail=f"Flush cache failed: {str(e)}") # Public settings (read-only) @app.get("/settings/public") async def get_public_settings(db: Session = Depends(get_db)): """Tra ve cac cau hinh cong khai cho frontend (khong can xac thuc).""" public_keys = ["app_name"] result: Dict[str, Any] = {} for key in public_keys: setting = db.query(SystemSetting).filter(SystemSetting.key == key).first() if setting: result[key] = setting.value # Gia tri mac dinh neu chua co trong DB result.setdefault("app_name", "FADO.VN CRM") return result # AUTHENTICATION ENDPOINTS - He thong xac thuc sieu bao mat! @rate_limit("10/minute") @app.post("/auth/login", response_model=schemas.LoginResponse) async def login(login_data: schemas.LoginRequest, db: Session = Depends(get_db), request: Request = None): """ Dang nhap va lay JWT token""" try: # Per-IP login burst protection (10 attempts per 60s) try: if CACHE_AVAILABLE and request is not None: ip = request.client.host if request.client else "unknown" rl_key = f"rl:login:{ip}" attempts = cache.incr(rl_key, ex=60) if attempts > 10: raise HTTPException(status_code=429, detail="Qua nhieu lan dang nhap. Vui long thu lai sau 1 phut.") except Exception: # Fail-open if cache not available pass result = login_user(db, login_data.email, login_data.password) # Record audit log try: user_id = result["user"]["id"] if isinstance(result, dict) and "user" in result else None ip = request.client.host if request and request.client else None ua = request.headers.get("user-agent") if request else None audit = AuditLog( action="login", resource="auth", resource_id="login", user_id=user_id, ip_address=ip, user_agent=ua, details=None ) db.add(audit) db.commit() except Exception: db.rollback() log_user_action( user_id=str(result["user"]["id"]), action="login", resource="auth", resource_id="login" ) return schemas.LoginResponse(**result) except Exception as e: app_logger.error(f"Login failed for {login_data.email}: {str(e)}") raise HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail="Email hoac mat khau khong chinh xac" ) @app.post("/auth/refresh", response_model=schemas.TokenResponse) async def refresh_token(refresh_data: schemas.RefreshTokenRequest, db: Session = Depends(get_db)): """ Refresh JWT access token""" try: result = refresh_access_token(refresh_data.refresh_token, db) return schemas.TokenResponse(**result) except Exception as e: app_logger.error(f"Token refresh failed: {str(e)}") raise HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail="Refresh token khong hop le" ) @app.get("/auth/me", response_model=schemas.NguoiDung) async def get_current_user_info(current_user: NguoiDung = Depends(get_current_active_user)): """ Lay thong tin nguoi dung hien tai""" return current_user @app.post("/auth/change-password", response_model=schemas.MessageResponse) async def change_password( password_data: schemas.ChangePasswordRequest, current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Doi mat khau""" from auth import verify_password, get_password_hash # Verify old password if not verify_password(password_data.old_password, current_user.mat_khau_hash): raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail="Mat khau cu khong chinh xac" ) # Update password current_user.mat_khau_hash = get_password_hash(password_data.new_password) db.commit() log_user_action( user_id=str(current_user.id), action="change_password", resource="auth", resource_id=str(current_user.id) ) return schemas.MessageResponse( message=" Doi mat khau thanh cong!", success=True ) # USER MANAGEMENT ENDPOINTS - Quan ly nguoi dung sieu pro! @app.get("/users/", response_model=List[schemas.NguoiDung]) async def get_users_list( skip: int = Query(0, ge=0), limit: int = Query(100, ge=1, le=1000), admin_user: NguoiDung = Depends(get_admin_user), db: Session = Depends(get_db) ): """ Lay danh sach nguoi dung (Admin only)""" users = db.query(NguoiDung).offset(skip).limit(limit).all() return users @app.post("/users/", response_model=schemas.NguoiDung) async def create_user( user_data: schemas.NguoiDungCreate, admin_user: NguoiDung = Depends(get_admin_user), db: Session = Depends(get_db) ): """ Tao nguoi dung moi (Admin only)""" # Check if email already exists existing_user = db.query(NguoiDung).filter(NguoiDung.email == user_data.email).first() if existing_user: raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail=" Email nay da duoc su dung!" ) # Create new user user_dict = user_data.dict() password = user_dict.pop("password") user_dict["mat_khau_hash"] = get_password_hash(password) new_user = NguoiDung(**user_dict) db.add(new_user) db.commit() db.refresh(new_user) log_user_action( user_id=str(admin_user.id), action="create", resource="user", resource_id=str(new_user.id) ) return new_user @app.put("/users/{user_id}", response_model=schemas.NguoiDung) async def update_user( user_id: int, user_update: schemas.NguoiDungUpdate, manager_user: NguoiDung = Depends(get_manager_user), db: Session = Depends(get_db) ): """ Cap nhat nguoi dung (Manager/Admin only)""" user = db.query(NguoiDung).filter(NguoiDung.id == user_id).first() if not user: raise HTTPException( status_code=status.HTTP_404_NOT_FOUND, detail=" Khong tim thay nguoi dung!" ) # Update user fields update_data = user_update.dict(exclude_unset=True) for field, value in update_data.items(): setattr(user, field, value) db.commit() db.refresh(user) log_user_action( user_id=str(manager_user.id), action="update", resource="user", resource_id=str(user_id) ) return user # Dashboard/Thong ke tong quan @app.get("/dashboard", response_model=schemas.ThongKeResponse) async def get_dashboard( current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Dashboard sieu cool voi thong ke realtime!""" # Thoi gian cho thong ke thang nay now = datetime.utcnow() start_of_month = datetime(now.year, now.month, 1) # Tinh toan cac chi so nhu mot data scientist! tong_khach_hang = db.query(KhachHang).count() tong_don_hang = db.query(DonHang).count() # Doanh thu thang nay doanh_thu_thang = db.query(func.sum(DonHang.tong_tien)).filter( DonHang.ngay_tao >= start_of_month, DonHang.trang_thai != TrangThaiDonHang.HUY ).scalar() or 0.0 # Don cho xu ly don_cho_xu_ly = db.query(DonHang).filter( DonHang.trang_thai.in_([ TrangThaiDonHang.CHO_XAC_NHAN, TrangThaiDonHang.DA_XAC_NHAN, TrangThaiDonHang.DANG_MUA ]) ).count() # Khach moi thang nay khach_moi_thang = db.query(KhachHang).filter( KhachHang.ngay_tao >= start_of_month ).count() return schemas.ThongKeResponse( tong_khach_hang=tong_khach_hang, tong_don_hang=tong_don_hang, doanh_thu_thang=doanh_thu_thang, don_cho_xu_ly=don_cho_xu_ly, khach_moi_thang=khach_moi_thang ) # ADVANCED ANALYTICS ENDPOINTS - Business Intelligence sieu dinh! @app.get("/analytics/dashboard") async def get_advanced_dashboard( date_range: int = Query(30, ge=1, le=365, description=" So ngay phan tich"), current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Dashboard analytics nang cao voi charts va insights""" try: log_user_action( user_id=str(current_user.id), action="view", resource="analytics", resource_id="dashboard" ) analytics_data = get_analytics_data(db, date_range) # Log business event log_business_event("ANALYTICS_VIEWED", { "user_id": current_user.id, "user_role": current_user.vai_tro.value, "date_range": date_range }) return { "success": True, "data": analytics_data, "message": f" Analytics data for {date_range} days" } except Exception as e: app_logger.error(f" Error getting advanced analytics: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi lay du lieu analytics" ) @app.get("/analytics/insights") async def get_ai_insights( current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ AI-powered business insights va recommendations""" try: # Require manager or admin for insights if current_user.vai_tro not in [VaiTro.ADMIN, VaiTro.MANAGER]: raise HTTPException( status_code=status.HTTP_403_FORBIDDEN, detail="Can quyen Manager hoac Admin de xem insights" ) insights_data = get_business_insights(db) log_user_action( user_id=str(current_user.id), action="view", resource="analytics", resource_id="insights" ) return { "success": True, "data": insights_data, "message": " AI Business Insights generated successfully" } except HTTPException: raise except Exception as e: app_logger.error(f" Error getting business insights: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi tao business insights" ) @app.get("/analytics/revenue-trend") async def get_revenue_trend( days: int = Query(30, ge=7, le=365, description=" So ngay"), current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Chi tiet xu huong doanh thu theo ngay""" try: from analytics_service import analytics_service analytics_service.set_session(db) trend_data = analytics_service.get_daily_revenue_trend(days) return { "success": True, "data": trend_data, "message": f" Revenue trend for {days} days" } except Exception as e: app_logger.error(f" Error getting revenue trend: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi lay xu huong doanh thu" ) @app.get("/analytics/customers") async def get_customer_analytics( current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Phan tich chi tiet ve khach hang""" try: from analytics_service import analytics_service analytics_service.set_session(db) customer_data = analytics_service.get_customer_analytics() return { "success": True, "data": customer_data, "message": " Customer analytics generated" } except Exception as e: app_logger.error(f" Error getting customer analytics: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi phan tich khach hang" ) @app.get("/analytics/products") async def get_product_analytics( limit: int = Query(20, ge=5, le=100, description=" So luong san pham top"), current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Phan tich hieu suat san pham""" try: from analytics_service import analytics_service analytics_service.set_session(db) product_data = analytics_service.get_product_performance(limit) return { "success": True, "data": product_data, "message": f" Top {limit} product performance data" } except Exception as e: app_logger.error(f" Error getting product analytics: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi phan tich san pham" ) # FILE UPLOAD ENDPOINTS - Quan ly file nhu Google Drive! @app.post("/upload/product-image") async def upload_product_image_endpoint( file: UploadFile = File(..., description=" Hinh anh san pham"), product_id: Optional[int] = Form(None, description=" ID san pham (optional)"), current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Upload hinh anh cho san pham""" try: # Check permission (Staff+ can upload) if current_user.vai_tro not in [VaiTro.ADMIN, VaiTro.MANAGER, VaiTro.STAFF]: raise HTTPException( status_code=status.HTTP_403_FORBIDDEN, detail="Can quyen Staff tro len de upload hinh anh" ) # Validate product exists if product_id provided if product_id: product = db.query(SanPham).filter(SanPham.id == product_id).first() if not product: raise HTTPException( status_code=status.HTTP_404_NOT_FOUND, detail="Khong tim thay san pham" ) # Upload image result = await upload_product_image(file, current_user, product_id) # Log activity log_user_action( user_id=str(current_user.id), action="upload", resource="product_image", resource_id=str(product_id) if product_id else "new" ) # Log business event log_business_event("IMAGE_UPLOADED", { "user_id": current_user.id, "filename": result["file_info"]["stored_filename"], "product_id": product_id, "file_size": result["file_info"]["file_size"] }) return { "success": True, "message": " Upload hinh anh thanh cong!", "data": result } except HTTPException: raise except Exception as e: app_logger.error(f" Error uploading product image: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi upload hinh anh" ) @app.post("/upload/multiple-images") async def upload_multiple_images_endpoint( files: List[UploadFile] = File(..., description=" Nhieu hinh anh san pham"), product_id: Optional[int] = Form(None, description=" ID san pham (optional)"), current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Upload nhieu hinh anh cung luc""" try: # Check permission if current_user.vai_tro not in [VaiTro.ADMIN, VaiTro.MANAGER, VaiTro.STAFF]: raise HTTPException( status_code=status.HTTP_403_FORBIDDEN, detail="Can quyen Staff tro len de upload hinh anh" ) # Limit number of files if len(files) > 10: raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail="Toi da 10 file moi lan upload" ) # Validate product if provided if product_id: product = db.query(SanPham).filter(SanPham.id == product_id).first() if not product: raise HTTPException( status_code=status.HTTP_404_NOT_FOUND, detail="Khong tim thay san pham" ) # Upload all images results = await upload_multiple_images(files, current_user, product_id) # Count successes successful_uploads = sum(1 for result in results if result.get("success", False)) failed_uploads = len(results) - successful_uploads # Log activity log_user_action( user_id=str(current_user.id), action="bulk_upload", resource="product_images", resource_id=str(product_id) if product_id else "multiple" ) return { "success": True, "message": f" Upload hoan thanh: {successful_uploads} thanh cong, {failed_uploads} that bai", "data": { "total_files": len(files), "successful": successful_uploads, "failed": failed_uploads, "results": results } } except HTTPException: raise except Exception as e: app_logger.error(f" Error uploading multiple images: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi upload nhieu hinh anh" ) @app.delete("/upload/image/{filename}") async def delete_image_endpoint( filename: str, current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Xoa hinh anh san pham""" try: # Check permission (Manager+ can delete) if current_user.vai_tro not in [VaiTro.ADMIN, VaiTro.MANAGER]: raise HTTPException( status_code=status.HTTP_403_FORBIDDEN, detail="Can quyen Manager tro len de xoa hinh anh" ) # Get file info first file_info = file_service.get_file_info(filename, "image") if not file_info: raise HTTPException( status_code=status.HTTP_404_NOT_FOUND, detail="Khong tim thay file hinh anh" ) # Delete file success = delete_product_image(filename) if not success: raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi xoa file" ) # Log activity log_user_action( user_id=str(current_user.id), action="delete", resource="product_image", resource_id=filename ) return { "success": True, "message": f" Da xoa hinh anh: {filename}" } except HTTPException: raise except Exception as e: app_logger.error(f" Error deleting image: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi xoa hinh anh" ) @app.get("/upload/storage-stats") async def get_storage_stats( admin_user: NguoiDung = Depends(get_admin_user), db: Session = Depends(get_db) ): """ Thong ke storage (Admin only)""" try: stats = file_service.get_storage_stats() return { "success": True, "data": stats, "message": " Storage statistics retrieved" } except Exception as e: app_logger.error(f" Error getting storage stats: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi lay thong ke storage" ) @app.post("/upload/cleanup-temp") async def cleanup_temp_files( older_than_hours: int = Query(24, ge=1, le=168, description=" Xoa file cu hon (gio)"), admin_user: NguoiDung = Depends(get_admin_user), db: Session = Depends(get_db) ): """ Don dep file tam (Admin only)""" try: deleted_count = file_service.cleanup_temp_files(older_than_hours) return { "success": True, "message": f" Da xoa {deleted_count} file tam", "data": { "deleted_files": deleted_count, "older_than_hours": older_than_hours } } except Exception as e: app_logger.error(f" Error cleaning up temp files: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi don dep file tam" ) @app.get("/upload/list") async def list_uploaded_files( category: str = Query(..., description="Danh muc: product_images | thumbnails | documents"), limit: int = Query(50, ge=1, le=1000), current_user: NguoiDung = Depends(get_current_active_user), request: Request = None ): """ Liet ke file da upload trong 1 category, tra ve URL tuyet doi""" try: items = file_service.list_files(category, limit=limit) base = str(request.base_url).rstrip('/') if request else '' driver = os.getenv('STORAGE_DRIVER', 'local').lower() for it in items: url = it.get("url", "") if driver == 'local' and url.startswith('/'): it["url"] = f"{base}{url}" return { "success": True, "category": category, "total": len(items), "items": items } except Exception as e: app_logger.error(f" Error listing uploaded files: {str(e)}") raise HTTPException(status_code=500, detail="Loi khi liet ke file da upload") @app.delete("/upload/file") async def delete_uploaded_file( category: str = Query(..., description="Danh muc: product_images | thumbnails | documents"), filename: str = Query(..., description="Ten file can xoa"), manager_user: NguoiDung = Depends(get_manager_user), ): """ Xoa file da upload. Neu la anh san pham, xoa kem all thumbnails""" try: if category == "product_images": ok = file_service.delete_file(filename, "image") elif category in ("thumbnails", "documents"): ok = file_service.storage.delete(category, filename) else: raise HTTPException(status_code=400, detail="Category khong hop le") if not ok: raise HTTPException(status_code=500, detail="Xoa file that bai") # Log activity log_user_action( user_id=str(manager_user.id), action="delete", resource=category, resource_id=filename ) return {"success": True, "message": f"Da xoa {filename} khoi {category}"} except HTTPException: raise except Exception as e: app_logger.error(f" Error deleting uploaded file: {str(e)}") raise HTTPException(status_code=500, detail="Loi khi xoa file") # ADVANCED SEARCH ENDPOINTS - Tim kiem nhu Google! @app.get("/search") async def universal_search_endpoint( q: str = Query(..., min_length=2, description=" Tu khoa tim kiem"), limit: int = Query(50, ge=1, le=100, description=" Gioi han ket qua"), current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Universal search across all entities""" try: results = universal_search(db, q, limit) log_user_action( user_id=str(current_user.id), action="search", resource="universal", resource_id=q ) return { "success": True, "query": q, "data": results, "message": f" Tim thay {results['total']} ket qua cho '{q}'" } except Exception as e: app_logger.error(f" Error in universal search: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi tim kiem" ) @app.get("/search/suggestions") async def get_search_suggestions_endpoint( q: str = Query(..., min_length=1, description=" Tu khoa goi y"), category: str = Query("all", description=" Danh muc (all, customers, products, orders)"), current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Get search suggestions""" try: suggestions = get_search_suggestions(db, q, category) return { "success": True, "query": q, "suggestions": suggestions } except Exception as e: app_logger.error(f" Error getting search suggestions: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi lay goi y tim kiem" ) @app.post("/search/advanced/customers") async def advanced_customer_search( filters: Dict[str, Any], current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Advanced customer search with filters""" try: customers = advanced_search(db, "customers", filters) # Convert to response format results = [] for customer in customers: results.append({ "id": customer.id, "ho_ten": customer.ho_ten, "email": customer.email, "so_dien_thoai": customer.so_dien_thoai, "loai_khach": customer.loai_khach.value, "tong_tien_da_mua": customer.tong_tien_da_mua, "so_don_thanh_cong": customer.so_don_thanh_cong, "ngay_tao": customer.ngay_tao.isoformat() if customer.ngay_tao else None }) return { "success": True, "data": results, "total": len(results), "filters": filters } except Exception as e: app_logger.error(f" Error in advanced customer search: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi tim kiem khach hang nang cao" ) @app.post("/search/advanced/products") async def advanced_product_search( filters: Dict[str, Any], current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Advanced product search with filters""" try: products = advanced_search(db, "products", filters) # Convert to response format results = [] for product in products: results.append({ "id": product.id, "ten_san_pham": product.ten_san_pham, "danh_muc": product.danh_muc, "quoc_gia_nguon": product.quoc_gia_nguon, "gia_ban": product.gia_ban, "gia_goc": product.gia_goc, "trong_luong": product.trong_luong, "ngay_tao": product.ngay_tao.isoformat() if product.ngay_tao else None }) return { "success": True, "data": results, "total": len(results), "filters": filters } except Exception as e: app_logger.error(f" Error in advanced product search: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi tim kiem san pham nang cao" ) @app.post("/search/advanced/orders") async def advanced_order_search( filters: Dict[str, Any], current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Advanced order search with filters""" try: orders = advanced_search(db, "orders", filters) # Convert to response format results = [] for order in orders: results.append({ "id": order.id, "ma_don_hang": order.ma_don_hang, "khach_hang": { "id": order.khach_hang.id if order.khach_hang else None, "ho_ten": order.khach_hang.ho_ten if order.khach_hang else None, "email": order.khach_hang.email if order.khach_hang else None }, "trang_thai": order.trang_thai.value, "tong_tien": order.tong_tien, "ngay_tao": order.ngay_tao.isoformat() if order.ngay_tao else None, "ngay_giao_hang": order.ngay_giao_hang.isoformat() if order.ngay_giao_hang else None, "ma_van_don": order.ma_van_don }) return { "success": True, "data": results, "total": len(results), "filters": filters } except Exception as e: app_logger.error(f" Error in advanced order search: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi tim kiem don hang nang cao" ) # KH CH H NG ENDPOINTS - Quan ly customer nhu mot pro! @app.get("/khach-hang/", response_model=List[schemas.KhachHang]) async def get_khach_hang_list( skip: int = Query(0, ge=0, description=" Bo qua so record"), limit: int = Query(100, ge=1, le=1000, description=" Gioi han so record"), search: Optional[str] = Query(None, description=" Tim kiem theo ten/email"), loai_khach: Optional[LoaiKhachHang] = Query(None, description=" Loc theo loai khach"), current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Lay danh sach khach hang voi filter va search sieu manh!""" query = db.query(KhachHang) # Search nhu Google! if search: search_filter = f"%{search}%" query = query.filter( (KhachHang.ho_ten.ilike(search_filter)) | (KhachHang.email.ilike(search_filter)) | (KhachHang.so_dien_thoai.ilike(search_filter)) ) # Filter theo loai khach if loai_khach: query = query.filter(KhachHang.loai_khach == loai_khach) # Order by ngay tao moi nhat query = query.order_by(KhachHang.ngay_tao.desc()) return query.offset(skip).limit(limit).all() @app.get("/khach-hang/{khach_hang_id}", response_model=schemas.KhachHang) async def get_khach_hang_detail(khach_hang_id: int, db: Session = Depends(get_db)): """ Lay thong tin chi tiet mot khach hang""" khach_hang = db.query(KhachHang).filter(KhachHang.id == khach_hang_id).first() if not khach_hang: raise HTTPException(status_code=404, detail=" Khong tim thay khach hang!") return khach_hang @app.post("/khach-hang/", response_model=schemas.KhachHang) async def create_khach_hang( khach_hang: schemas.KhachHangCreate, current_user: NguoiDung = Depends(get_manager_user), db: Session = Depends(get_db) ): """ Tao khach hang moi - Chao mung thanh vien moi!""" # Kiem tra email da ton tai chua existing_khach = db.query(KhachHang).filter(KhachHang.email == khach_hang.email).first() if existing_khach: raise HTTPException(status_code=400, detail=" Email nay da duoc su dung roi!") # Tao khach hang moi db_khach_hang = KhachHang(**khach_hang.dict()) db.add(db_khach_hang) db.commit() db.refresh(db_khach_hang) # Send WebSocket notification try: from websocket_service import notify_customer_created customer_data = { "id": db_khach_hang.id, "ho_ten": db_khach_hang.ho_ten, "email": db_khach_hang.email, "loai_khach": db_khach_hang.loai_khach.value } await notify_customer_created(customer_data, current_user.id) except Exception as e: app_logger.error(f" Failed to send notification: {str(e)}") return db_khach_hang @app.put("/khach-hang/{khach_hang_id}", response_model=schemas.KhachHang) async def update_khach_hang( khach_hang_id: int, khach_hang_update: schemas.KhachHangUpdate, db: Session = Depends(get_db) ): """ Cap nhat thong tin khach hang""" khach_hang = db.query(KhachHang).filter(KhachHang.id == khach_hang_id).first() if not khach_hang: raise HTTPException(status_code=404, detail=" Khong tim thay khach hang!") # Update cac field co gia tri update_data = khach_hang_update.dict(exclude_unset=True) for field, value in update_data.items(): setattr(khach_hang, field, value) db.commit() db.refresh(khach_hang) return khach_hang # S N PH M ENDPOINTS - Quan ly hang hoa nhu Amazon! @app.get("/san-pham/", response_model=List[schemas.SanPham]) async def get_san_pham_list( skip: int = Query(0, ge=0, description=" Bo qua so record"), limit: int = Query(100, ge=1, le=1000, description=" Gioi han so record"), search: Optional[str] = Query(None, description=" Tim kiem san pham"), danh_muc: Optional[str] = Query(None, description=" Loc theo danh muc"), quoc_gia: Optional[str] = Query(None, description=" Loc theo quoc gia"), gia_min: Optional[float] = Query(None, ge=0, description=" Gia toi thieu"), gia_max: Optional[float] = Query(None, ge=0, description=" Gia toi da"), sort_by: Optional[str] = Query("ngay_tao", description=" Sap xep theo (ten_san_pham, gia_ban, ngay_tao)"), order: Optional[str] = Query("desc", description=" Thu tu (asc, desc)"), db: Session = Depends(get_db) ): """ Lay danh sach san pham voi advanced search va filter""" query = db.query(SanPham).filter(SanPham.is_active == True) # Advanced search if search: search_filter = f"%{search}%" query = query.filter( or_( SanPham.ten_san_pham.ilike(search_filter), SanPham.mo_ta.ilike(search_filter), SanPham.danh_muc.ilike(search_filter) ) ) # Filter by category if danh_muc: query = query.filter(SanPham.danh_muc.ilike(f"%{danh_muc}%")) # Filter by country if quoc_gia: query = query.filter(SanPham.quoc_gia_nguon.ilike(f"%{quoc_gia}%")) # Price range filter if gia_min is not None: query = query.filter(SanPham.gia_ban >= gia_min) if gia_max is not None: query = query.filter(SanPham.gia_ban <= gia_max) # Dynamic sorting sort_column = getattr(SanPham, sort_by, SanPham.ngay_tao) if order.lower() == "asc": query = query.order_by(asc(sort_column)) else: query = query.order_by(desc(sort_column)) return query.offset(skip).limit(limit).all() @app.post("/san-pham/", response_model=schemas.SanPham) async def create_san_pham(san_pham: schemas.SanPhamCreate, db: Session = Depends(get_db)): """ Them san pham moi vao kho""" try: db_san_pham = SanPham(**san_pham.dict()) db.add(db_san_pham) db.commit() db.refresh(db_san_pham) # Log user action log_user_action( user_id="system", action="create", resource="product", resource_id=str(db_san_pham.id) ) # Log business event log_business_event("PRODUCT_CREATED", { "product_id": db_san_pham.id, "product_name": db_san_pham.ten_san_pham, "category": db_san_pham.danh_muc, "price": str(db_san_pham.gia) }) return db_san_pham except Exception as e: db.rollback() raise DatabaseError(message="Loi khi tao san pham moi", details={"error": str(e)}) @app.get("/san-pham-count") async def get_san_pham_count( search: Optional[str] = Query(None, description=" Tim kiem san pham"), danh_muc: Optional[str] = Query(None, description=" Loc theo danh muc"), quoc_gia: Optional[str] = Query(None, description=" Loc theo quoc gia"), gia_min: Optional[float] = Query(None, ge=0, description=" Gia toi thieu"), gia_max: Optional[float] = Query(None, ge=0, description=" Gia toi da"), db: Session = Depends(get_db) ): """ Dem so luong san pham voi filter""" query = db.query(SanPham) # Apply same filters as list endpoint if search: search_filter = f"%{search}%" query = query.filter( or_( SanPham.ten_san_pham.ilike(search_filter), SanPham.mo_ta.ilike(search_filter), SanPham.danh_muc.ilike(search_filter) ) ) if danh_muc: query = query.filter(SanPham.danh_muc.ilike(f"%{danh_muc}%")) if quoc_gia: query = query.filter(SanPham.quoc_gia_nguon.ilike(f"%{quoc_gia}%")) if gia_min is not None: query = query.filter(SanPham.gia_ban >= gia_min) if gia_max is not None: query = query.filter(SanPham.gia_ban <= gia_max) total = query.count() return {"total": total} @app.get("/san-pham/{san_pham_id}", response_model=schemas.SanPham) async def get_san_pham_detail(san_pham_id: int, db: Session = Depends(get_db)): """ Lay thong tin chi tiet mot san pham""" san_pham = db.query(SanPham).filter( and_(SanPham.id == san_pham_id, SanPham.is_active == True) ).first() if not san_pham: raise NotFoundError(resource="san pham", resource_id=san_pham_id) # Log user action log_user_action( user_id="system", # Se duoc thay bang user thuc sau khi co auth action="view", resource="product", resource_id=str(san_pham_id) ) return san_pham @app.put("/san-pham/{san_pham_id}", response_model=schemas.SanPham) async def update_san_pham( san_pham_id: int, san_pham_update: schemas.SanPhamUpdate, db: Session = Depends(get_db) ): """ Cap nhat thong tin san pham""" san_pham = db.query(SanPham).filter( and_(SanPham.id == san_pham_id, SanPham.is_active == True) ).first() if not san_pham: raise NotFoundError(resource="san pham", resource_id=san_pham_id) try: # Update cac field co gia tri update_data = san_pham_update.dict(exclude_unset=True) for field, value in update_data.items(): setattr(san_pham, field, value) db.commit() db.refresh(san_pham) # Log user action log_user_action( user_id="system", action="update", resource="product", resource_id=str(san_pham_id) ) return san_pham except Exception as e: db.rollback() raise DatabaseError(message="Loi khi cap nhat san pham", details={"error": str(e)}) @app.delete("/san-pham/{san_pham_id}") async def delete_san_pham(san_pham_id: int, db: Session = Depends(get_db)): """ Xoa san pham (soft delete)""" san_pham = db.query(SanPham).filter(SanPham.id == san_pham_id).first() if not san_pham: raise NotFoundError(resource="san pham", resource_id=san_pham_id) try: # Soft delete - set is_active = False product_name = san_pham.ten_san_pham san_pham.is_active = False db.commit() # Log user action log_user_action( user_id="system", action="delete", resource="product", resource_id=str(san_pham_id) ) # Log business event log_business_event("PRODUCT_DELETED", { "product_id": san_pham_id, "product_name": product_name }) return format_success_response( message=f" Da xoa san pham: {product_name}" ) except Exception as e: db.rollback() raise DatabaseError(message="Loi khi xoa san pham", details={"error": str(e)}) # D N H NG ENDPOINTS - Trai tim cua viec mua ho! def generate_ma_don_hang() -> str: """ Generate ma don hang unique nhu snowflake!""" now = datetime.utcnow() timestamp = now.strftime("%y%m%d") random_part = str(uuid.uuid4())[:6].upper() return f"FD{timestamp}{random_part}" @app.get("/don-hang/", response_model=List[schemas.DonHang]) async def get_don_hang_list( skip: int = Query(0, ge=0), limit: int = Query(50, ge=1, le=500), trang_thai: Optional[TrangThaiDonHang] = Query(None, description=" Loc theo trang thai"), khach_hang_id: Optional[int] = Query(None, description=" Loc theo khach hang"), db: Session = Depends(get_db) ): """ Lay danh sach don hang voi filter sieu manh!""" query = db.query(DonHang) # Filter by status if trang_thai: query = query.filter(DonHang.trang_thai == trang_thai) # Filter by customer if khach_hang_id: query = query.filter(DonHang.khach_hang_id == khach_hang_id) return query.order_by(DonHang.ngay_tao.desc()).offset(skip).limit(limit).all() @app.get("/don-hang/{don_hang_id}", response_model=schemas.DonHang) async def get_don_hang_detail(don_hang_id: int, db: Session = Depends(get_db)): """ Lay chi tiet don hang voi tat ca thong tin""" don_hang = db.query(DonHang).filter(DonHang.id == don_hang_id).first() if not don_hang: raise HTTPException(status_code=404, detail=" Khong tim thay don hang!") return don_hang @app.post("/don-hang/", response_model=schemas.DonHang) async def create_don_hang(don_hang: schemas.DonHangCreate, db: Session = Depends(get_db)): """ Tao don hang moi - Bat dau cuoc phieu luu mua ho!""" # Kiem tra khach hang ton tai khach_hang = db.query(KhachHang).filter(KhachHang.id == don_hang.khach_hang_id).first() if not khach_hang: raise HTTPException(status_code=404, detail=" Khong tim thay khach hang!") # Tao ma don hang unique ma_don_hang = generate_ma_don_hang() while db.query(DonHang).filter(DonHang.ma_don_hang == ma_don_hang).first(): ma_don_hang = generate_ma_don_hang() # Tao lai neu trung # Tinh tong tien tong_tien = (don_hang.tong_gia_san_pham + don_hang.phi_mua_ho + don_hang.phi_van_chuyen + don_hang.phi_khac) # Tao don hang db_don_hang = DonHang( ma_don_hang=ma_don_hang, tong_tien=tong_tien, **don_hang.dict(exclude={'chi_tiet_list'}) ) db.add(db_don_hang) db.commit() db.refresh(db_don_hang) # Them chi tiet don hang for chi_tiet in don_hang.chi_tiet_list: # Kiem tra san pham ton tai san_pham = db.query(SanPham).filter(SanPham.id == chi_tiet.san_pham_id).first() if not san_pham: raise HTTPException( status_code=404, detail=f" Khong tim thay san pham ID {chi_tiet.san_pham_id}!" ) db_chi_tiet = ChiTietDonHang( don_hang_id=db_don_hang.id, **chi_tiet.dict() ) db.add(db_chi_tiet) db.commit() db.refresh(db_don_hang) # Send WebSocket notification try: from websocket_service import notify_order_created order_data = { "id": db_don_hang.id, "ma_don_hang": db_don_hang.ma_don_hang, "khach_hang_ten": khach_hang.ho_ten, "tong_tien": db_don_hang.tong_tien, "trang_thai": db_don_hang.trang_thai.value } await notify_order_created(order_data, 0) # System created except Exception as e: app_logger.error(f" Failed to send order notification: {str(e)}") return db_don_hang @app.put("/don-hang/{don_hang_id}", response_model=schemas.DonHang) async def update_don_hang( don_hang_id: int, don_hang_update: schemas.DonHangUpdate, db: Session = Depends(get_db) ): """ Cap nhat don hang - Theo doi tien trinh nhu tracking!""" don_hang = db.query(DonHang).filter(DonHang.id == don_hang_id).first() if not don_hang: raise HTTPException(status_code=404, detail=" Khong tim thay don hang!") # Update fields update_data = don_hang_update.dict(exclude_unset=True) for field, value in update_data.items(): setattr(don_hang, field, value) # Tinh lai tong tien neu co thay doi phi if any(field in update_data for field in ['phi_mua_ho', 'phi_van_chuyen', 'phi_khac']): don_hang.tong_tien = (don_hang.tong_gia_san_pham + don_hang.phi_mua_ho + don_hang.phi_van_chuyen + don_hang.phi_khac) # Cap nhat thoi gian don_hang.ngay_cap_nhat = datetime.utcnow() db.commit() db.refresh(don_hang) return don_hang # ORDER MANAGEMENT ENHANCEMENT ENDPOINTS @app.put("/don-hang/{don_hang_id}/chi-tiet", response_model=schemas.DonHang) async def update_order_details( don_hang_id: int, order_details: schemas.OrderDetailsUpdate, db: Session = Depends(get_db) ): """ Cap nhat chi tiet don hang - Thay doi san pham trong don""" don_hang = db.query(DonHang).filter(DonHang.id == don_hang_id).first() if not don_hang: raise NotFoundError(resource="don hang", resource_id=don_hang_id) try: # Xoa chi tiet cu db.query(ChiTietDonHang).filter(ChiTietDonHang.don_hang_id == don_hang_id).delete() # Tinh tong gia san pham moi tong_gia_san_pham = 0.0 # Them chi tiet moi for chi_tiet_data in order_details.chi_tiet_list: # Kiem tra san pham ton tai san_pham = db.query(SanPham).filter( and_(SanPham.id == chi_tiet_data.san_pham_id, SanPham.is_active == True) ).first() if not san_pham: raise NotFoundError(resource="san pham", resource_id=chi_tiet_data.san_pham_id) chi_tiet = ChiTietDonHang( don_hang_id=don_hang_id, **chi_tiet_data.dict() ) db.add(chi_tiet) # Su dung gia ban cua san pham neu khong co gia_mua gia = chi_tiet_data.gia_mua or san_pham.gia_ban or 0 tong_gia_san_pham += gia * chi_tiet_data.so_luong # Cap nhat tong gia va tong tien don hang don_hang.tong_gia_san_pham = tong_gia_san_pham don_hang.tong_tien = ( don_hang.tong_gia_san_pham + don_hang.phi_mua_ho + don_hang.phi_van_chuyen + don_hang.phi_khac ) don_hang.ngay_cap_nhat = datetime.utcnow() db.commit() db.refresh(don_hang) # Log user action log_user_action( user_id="system", action="update_details", resource="order", resource_id=str(don_hang_id) ) return don_hang except Exception as e: db.rollback() raise DatabaseError(message="Loi khi cap nhat chi tiet don hang", details={"error": str(e)}) @app.post("/don-hang/{don_hang_id}/trang-thai", response_model=schemas.DonHang) async def update_order_status( don_hang_id: int, status_update: schemas.OrderStatusUpdate, db: Session = Depends(get_db) ): """ Cap nhat trang thai don hang - Theo doi tien do""" don_hang = db.query(DonHang).filter(DonHang.id == don_hang_id).first() if not don_hang: raise NotFoundError(resource="don hang", resource_id=don_hang_id) try: old_status = don_hang.trang_thai # Cap nhat trang thai don_hang.trang_thai = status_update.trang_thai if status_update.ghi_chu: don_hang.ghi_chu_noi_bo = status_update.ghi_chu don_hang.ngay_cap_nhat = datetime.utcnow() db.commit() db.refresh(don_hang) # Log user action log_user_action( user_id="system", action="update_status", resource="order", resource_id=str(don_hang_id) ) # Log business event log_business_event("ORDER_STATUS_CHANGED", { "order_id": don_hang_id, "old_status": old_status.value, "new_status": status_update.trang_thai.value, "ma_don_hang": don_hang.ma_don_hang }) return don_hang except Exception as e: db.rollback() raise DatabaseError(message="Loi khi cap nhat trang thai don hang", details={"error": str(e)}) # L CH S LI N H ENDPOINTS - CRM khong the thieu! @app.get("/lich-su-lien-he/", response_model=List[schemas.LichSuLienHe]) async def get_lich_su_lien_he( khach_hang_id: Optional[int] = Query(None, description=" ID khach hang"), skip: int = Query(0, ge=0), limit: int = Query(100, ge=1, le=500), db: Session = Depends(get_db) ): """ Lay lich su lien he voi khach hang""" query = db.query(LichSuLienHe) if khach_hang_id: query = query.filter(LichSuLienHe.khach_hang_id == khach_hang_id) return query.order_by(LichSuLienHe.ngay_lien_he.desc()).offset(skip).limit(limit).all() @app.post("/lich-su-lien-he/", response_model=schemas.LichSuLienHe) async def create_lich_su_lien_he( lich_su: schemas.LichSuLienHeCreate, db: Session = Depends(get_db) ): """ Ghi lai cuoc lien he voi khach hang""" # Kiem tra khach hang ton tai khach_hang = db.query(KhachHang).filter(KhachHang.id == lich_su.khach_hang_id).first() if not khach_hang: raise HTTPException(status_code=404, detail=" Khong tim thay khach hang!") db_lich_su = LichSuLienHe(**lich_su.dict()) db.add(db_lich_su) db.commit() db.refresh(db_lich_su) return db_lich_su # Endpoint dac biet cho viec cap nhat loai khach hang tu dong @app.post("/khach-hang/{khach_hang_id}/cap-nhat-loai") async def auto_update_loai_khach_hang(khach_hang_id: int, db: Session = Depends(get_db)): """ Tu dong cap nhat loai khach hang dua tren lich su mua hang""" khach_hang = db.query(KhachHang).filter(KhachHang.id == khach_hang_id).first() if not khach_hang: raise HTTPException(status_code=404, detail=" Khong tim thay khach hang!") # Logic phan loai khach hang tu dong if khach_hang.tong_tien_da_mua >= 50000000: # 50 trieu VND new_loai = LoaiKhachHang.VIP elif khach_hang.tong_tien_da_mua >= 10000000: # 10 trieu VND new_loai = LoaiKhachHang.THAN_THIET else: new_loai = LoaiKhachHang.MOI # Cap nhat neu khac loai hien tai if khach_hang.loai_khach != new_loai: khach_hang.loai_khach = new_loai db.commit() db.refresh(khach_hang) return schemas.MessageResponse( message=f" Da cap nhat loai khach hang thanh {new_loai.value}!", success=True ) return schemas.MessageResponse( message=" Loai khach hang da phu hop, khong can cap nhat.", success=True ) # EXPORT/IMPORT ENDPOINTS - Xuat nhap du lieu Excel & CSV! @app.get("/export/customers/excel") async def export_customers_excel( customer_type: Optional[str] = Query(None, description=" Loai khach hang"), created_from: Optional[datetime] = Query(None, description=" Tu ngay"), created_to: Optional[datetime] = Query(None, description=" Den ngay"), current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Export customers to Excel""" try: from fastapi.responses import Response filters = {} if customer_type: filters["customer_type"] = customer_type if created_from: filters["created_from"] = created_from if created_to: filters["created_to"] = created_to export_service.set_session(db) excel_data = export_service.export_customers_to_excel(filters) # Log activity log_user_action( user_id=str(current_user.id), action="export", resource="customers", resource_id="excel" ) timestamp = datetime.now().strftime("%Y%m%d_%H%M%S") filename = f"khach_hang_{timestamp}.xlsx" return Response( content=excel_data, media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", headers={ "Content-Disposition": f"attachment; filename={filename}" } ) except Exception as e: app_logger.error(f" Error exporting customers to Excel: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi xuat du lieu khach hang" ) @app.get("/export/products/excel") async def export_products_excel( category: Optional[str] = Query(None, description=" Danh muc"), country: Optional[str] = Query(None, description=" Quoc gia"), min_price: Optional[float] = Query(None, description=" Gia toi thieu"), max_price: Optional[float] = Query(None, description=" Gia toi da"), current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Export products to Excel""" try: from fastapi.responses import Response filters = {} if category: filters["category"] = category if country: filters["country"] = country if min_price: filters["min_price"] = min_price if max_price: filters["max_price"] = max_price export_service.set_session(db) excel_data = export_service.export_products_to_excel(filters) # Log activity log_user_action( user_id=str(current_user.id), action="export", resource="products", resource_id="excel" ) timestamp = datetime.now().strftime("%Y%m%d_%H%M%S") filename = f"san_pham_{timestamp}.xlsx" return Response( content=excel_data, media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", headers={ "Content-Disposition": f"attachment; filename={filename}" } ) except Exception as e: app_logger.error(f" Error exporting products to Excel: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi xuat du lieu san pham" ) @app.get("/export/orders/excel") async def export_orders_excel( status_filter: Optional[List[str]] = Query(None, description=" Trang thai don hang"), created_from: Optional[datetime] = Query(None, description=" Tu ngay"), created_to: Optional[datetime] = Query(None, description=" Den ngay"), current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Export orders to Excel""" try: from fastapi.responses import Response filters = {} if status_filter: filters["status"] = status_filter if created_from: filters["created_from"] = created_from if created_to: filters["created_to"] = created_to export_service.set_session(db) excel_data = export_service.export_orders_to_excel(filters) # Log activity log_user_action( user_id=str(current_user.id), action="export", resource="orders", resource_id="excel" ) timestamp = datetime.now().strftime("%Y%m%d_%H%M%S") filename = f"don_hang_{timestamp}.xlsx" return Response( content=excel_data, media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", headers={ "Content-Disposition": f"attachment; filename={filename}" } ) except Exception as e: app_logger.error(f" Error exporting orders to Excel: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi xuat du lieu don hang" ) @app.get("/export/{entity_type}/csv") async def export_to_csv( entity_type: str, current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Export to CSV format""" try: from fastapi.responses import Response if entity_type not in ["customers", "products", "orders"]: raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail="Invalid entity type. Must be: customers, products, or orders" ) export_service.set_session(db) csv_data = export_service.export_to_csv(entity_type) # Log activity log_user_action( user_id=str(current_user.id), action="export", resource=entity_type, resource_id="csv" ) timestamp = datetime.now().strftime("%Y%m%d_%H%M%S") filename = f"{entity_type}_{timestamp}.csv" return Response( content=csv_data, media_type="text/csv", headers={ "Content-Disposition": f"attachment; filename={filename}" } ) except Exception as e: app_logger.error(f" Error exporting to CSV: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi xuat du lieu CSV" ) @app.post("/import/customers/excel") async def import_customers_excel( file: UploadFile = File(..., description=" Excel file voi du lieu khach hang"), current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Import customers from Excel""" try: # Validate file type if not file.filename.endswith(('.xlsx', '.xls')): raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail="File phai co dinh dang Excel (.xlsx hoac .xls)" ) # Read file content file_content = await file.read() export_service.set_session(db) result = export_service.import_customers_from_excel(file_content, current_user.id) # Log activity log_user_action( user_id=str(current_user.id), action="import", resource="customers", resource_id=file.filename ) if result["success"]: log_business_event( event_type="customer_import", description=f"Imported {result['success_count']} customers", user_id=current_user.id ) return { "success": result["success"], "message": result.get("message", result.get("error")), "data": { "success_count": result.get("success_count", 0), "error_count": result.get("error_count", 0), "errors": result.get("errors", []) } } except HTTPException: raise except Exception as e: app_logger.error(f" Error importing customers from Excel: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi import du lieu khach hang" ) @app.post("/import/products/excel") async def import_products_excel( file: UploadFile = File(..., description=" Excel file voi du lieu san pham"), current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Import products from Excel""" try: # Validate file type if not file.filename.endswith(('.xlsx', '.xls')): raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail="File phai co dinh dang Excel (.xlsx hoac .xls)" ) # Read file content file_content = await file.read() export_service.set_session(db) result = export_service.import_products_from_excel(file_content, current_user.id) # Log activity log_user_action( user_id=str(current_user.id), action="import", resource="products", resource_id=file.filename ) if result["success"]: log_business_event( event_type="product_import", description=f"Imported {result['success_count']} products", user_id=current_user.id ) return { "success": result["success"], "message": result.get("message", result.get("error")), "data": { "success_count": result.get("success_count", 0), "error_count": result.get("error_count", 0), "errors": result.get("errors", []) } } except HTTPException: raise except Exception as e: app_logger.error(f" Error importing products from Excel: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi import du lieu san pham" ) @app.get("/export/stats") async def get_export_stats( current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Get export statistics""" try: export_service.set_session(db) stats = export_service.get_export_stats() return { "success": True, "data": stats, "message": " Export statistics retrieved" } except Exception as e: app_logger.error(f" Error getting export stats: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi lay thong ke export" ) # WEBSOCKET ENDPOINTS - Real-time notifications! @app.websocket("/ws/{token}") async def websocket_endpoint(websocket: WebSocket, token: str): """ WebSocket endpoint for real-time notifications""" db = next(get_db()) try: # Verify token and get user from auth import verify_websocket_token user = await verify_websocket_token(token, db) if not user: await websocket.close(code=4001, reason="Invalid token") return # Connect user await manager.connect(websocket, user.id, user.vai_tro.value) try: while True: # Keep connection alive and handle incoming messages data = await websocket.receive_text() message = json.loads(data) # Handle ping/pong for connection health if message.get("type") == "ping": await websocket.send_text(json.dumps({ "type": "pong", "timestamp": datetime.now().isoformat() })) except WebSocketDisconnect: pass except Exception as e: app_logger.error(f" WebSocket error: {str(e)}") await websocket.close(code=4000, reason="Server error") finally: manager.disconnect(websocket) db.close() @app.get("/notifications/stats") async def get_notification_stats( admin_user: NguoiDung = Depends(get_admin_user) ): """ Get WebSocket notification statistics (Admin only)""" try: stats = notification_service.get_stats() return { "success": True, "data": stats, "message": " Notification statistics retrieved" } except Exception as e: app_logger.error(f" Error getting notification stats: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi lay thong ke thong bao" ) @app.post("/notifications/send") async def send_custom_notification( user_id: int, title: str = Query(..., description=" Tieu de thong bao"), message: str = Query(..., description=" Noi dung thong bao"), admin_user: NguoiDung = Depends(get_admin_user) ): """ Send custom notification to user (Admin only)""" try: from websocket_service import send_custom_notification await send_custom_notification(user_id, title, message) return { "success": True, "message": f" Da gui thong bao den nguoi dung {user_id}" } except Exception as e: app_logger.error(f" Error sending notification: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi gui thong bao" ) @app.post("/notifications/broadcast") async def broadcast_notification( title: str = Query(..., description=" Tieu de thong bao"), message: str = Query(..., description=" Noi dung thong bao"), priority: str = Query("medium", description=" Muc do uu tien"), admin_user: NguoiDung = Depends(get_admin_user) ): """ Broadcast notification to all users (Admin only)""" try: from websocket_service import notify_system_alert await notify_system_alert("broadcast", message, priority) return { "success": True, "message": " Da gui thong bao toi tat ca nguoi dung" } except Exception as e: app_logger.error(f" Error broadcasting notification: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi phat thong bao" ) # ADVANCED ANALYTICS ENDPOINTS - Business Intelligence Platform! @app.get("/analytics/customer-segmentation") async def get_customer_segmentation( current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Phan tich phan khuc khach hang (RFM Analysis)""" try: analytics = get_analytics_service(db) return analytics.customer_segmentation_analysis() except Exception as e: app_logger.error(f" Error in customer segmentation analysis: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi phan tich phan khuc khach hang" ) @app.get("/analytics/sales-performance") async def get_sales_performance( days: int = Query(30, description=" So ngay phan tich", ge=1, le=365), current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Phan tich hieu suat ban hang theo thoi gian""" try: analytics = get_analytics_service(db) return analytics.sales_performance_analysis(days) except Exception as e: app_logger.error(f" Error in sales performance analysis: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi phan tich hieu suat ban hang" ) @app.get("/analytics/product-intelligence") async def get_product_intelligence( current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Bao cao thong minh ve san pham""" try: analytics = get_analytics_service(db) return analytics.product_intelligence_report() except Exception as e: app_logger.error(f" Error in product intelligence analysis: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi phan tich thong tin san pham" ) @app.get("/analytics/communication-analysis") async def get_communication_analysis( current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Phan tich hieu qua communication voi khach hang""" try: analytics = get_analytics_service(db) return analytics.customer_communication_analysis() except Exception as e: app_logger.error(f" Error in communication analysis: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi phan tich communication" ) @app.get("/analytics/executive-summary") async def get_executive_summary( manager_user: NguoiDung = Depends(get_manager_user), db: Session = Depends(get_db) ): """ Bao cao tong hop cho leadership (Manager+ only)""" try: analytics = get_analytics_service(db) return analytics.generate_executive_summary() except Exception as e: app_logger.error(f" Error in executive summary: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi tao bao cao tong hop" ) # AI RECOMMENDATION ENDPOINTS - Artificial Intelligence Platform! @app.get("/ai/recommend-products/{customer_id}") async def recommend_products_for_customer( customer_id: int, limit: int = Query(5, description=" So san pham goi y", ge=1, le=20), current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Goi y san pham thong minh cho khach hang""" try: ai_engine = get_ai_recommendation_engine(db) recommendations = ai_engine.recommend_products_for_customer(customer_id, limit) # Log AI recommendation event if "recommendations" in recommendations: from websocket_service import notify_ai_recommendation await notify_ai_recommendation( "product_recommendation", f"Goi y {len(recommendations['recommendations'])} san pham", f"Cho khach hang {recommendations.get('customer_name', 'N/A')}", recommendations.get('confidence', 0.5), current_user.id ) return recommendations except Exception as e: app_logger.error(f" Error in AI product recommendation: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi tao goi y san pham" ) @app.get("/ai/recommend-customers/{product_id}") async def recommend_customers_for_product( product_id: int, limit: int = Query(10, description=" So khach hang goi y", ge=1, le=50), current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Goi y khach hang tiem nang cho san pham""" try: ai_engine = get_ai_recommendation_engine(db) recommendations = ai_engine.recommend_customers_for_product(product_id, limit) return recommendations except Exception as e: app_logger.error(f" Error in AI customer recommendation: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi goi y khach hang tiem nang" ) @app.get("/ai/business-insights") async def get_ai_business_insights( manager_user: NguoiDung = Depends(get_manager_user), db: Session = Depends(get_db) ): """ AI Business Insights va goi y chien luoc (Manager+ only)""" try: ai_engine = get_ai_recommendation_engine(db) insights = ai_engine.generate_business_insights() # Notify about new insights if insights.get('insights'): from websocket_service import notify_ai_recommendation await notify_ai_recommendation( "business_insights", f"Co {len(insights['insights'])} insights moi", "AI da phan tich va tao goi y kinh doanh", 0.8 ) return insights except Exception as e: app_logger.error(f" Error in AI business insights: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi tao business insights" ) # ADVANCED EXPORT ENDPOINTS - Professional Reports Generator! @app.get("/export/customers-excel") async def export_customers_excel( current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Xuat danh sach khach hang ra Excel""" try: export_service = get_advanced_export_service(db) result = export_service.export_customers_excel() if "error" in result: raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail=result["error"] ) return result except Exception as e: app_logger.error(f" Error exporting customers Excel: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi xuat Excel khach hang" ) @app.get("/export/orders-excel") async def export_orders_excel( date_from: Optional[str] = Query(None, description=" Ngay bat dau (YYYY-MM-DD)"), date_to: Optional[str] = Query(None, description=" Ngay ket thuc (YYYY-MM-DD)"), current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Xuat danh sach don hang ra Excel""" try: export_service = get_advanced_export_service(db) result = export_service.export_orders_excel(date_from, date_to) if "error" in result: raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail=result["error"] ) return result except Exception as e: app_logger.error(f" Error exporting orders Excel: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi xuat Excel don hang" ) @app.get("/export/analytics-pdf") async def export_analytics_pdf( report_type: str = Query("monthly", description=" Loai bao cao"), manager_user: NguoiDung = Depends(get_manager_user), db: Session = Depends(get_db) ): """ Tao bao cao PDF analytics (Manager+ only)""" try: export_service = get_advanced_export_service(db) result = export_service.generate_analytics_pdf_report(report_type) if "error" in result: raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail=result["error"] ) return result except Exception as e: app_logger.error(f" Error generating PDF report: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi tao bao cao PDF" ) @app.get("/export/business-intelligence") async def export_business_intelligence( manager_user: NguoiDung = Depends(get_manager_user), db: Session = Depends(get_db) ): """ Xuat bao cao Business Intelligence toan dien (Manager+ only)""" try: export_service = get_advanced_export_service(db) result = export_service.export_business_intelligence_excel() if "error" in result: raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail=result["error"] ) # Notify about BI report generation from websocket_service import notify_business_milestone await notify_business_milestone( "bi_report_generated", "Bao cao Business Intelligence da duoc tao", "Excel", {"sheets": result.get("sheets_included", []), "user": manager_user.ho_ten} ) return result except Exception as e: app_logger.error(f" Error exporting BI Excel: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi xuat BI Excel" ) # PERFORMANCE MONITORING ENDPOINTS - APM Dashboard! @app.get("/monitor/health") async def get_system_health( admin_user: NguoiDung = Depends(get_admin_user), db: Session = Depends(get_db) ): """ Bao cao suc khoe he thong toan dien (Admin only)""" try: monitor = get_performance_monitor() health_report = monitor.generate_health_report(db) return health_report except Exception as e: app_logger.error(f" Error getting system health: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi lay thong tin suc khoe he thong" ) @app.get("/monitor/metrics") async def get_system_metrics( admin_user: NguoiDung = Depends(get_admin_user), db: Session = Depends(get_db) ): """ Metrics he thong chi tiet (Admin only)""" try: monitor = get_performance_monitor() system_metrics = monitor.collect_system_metrics() db_metrics = monitor.get_database_metrics(db) return { "system": system_metrics, "database": db_metrics, "collected_at": datetime.now().isoformat() } except Exception as e: app_logger.error(f" Error collecting system metrics: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi thu thap system metrics" ) @app.get("/monitor/prometheus", response_class=Response) async def get_prometheus_metrics(admin_user: NguoiDung = Depends(get_admin_user)): """ Prometheus metrics endpoint (Admin only)""" try: from performance_monitor import PROMETHEUS_AVAILABLE if not PROMETHEUS_AVAILABLE: raise HTTPException( status_code=status.HTTP_503_SERVICE_UNAVAILABLE, detail="Prometheus client khong kha dung" ) monitor = get_performance_monitor() metrics_data = monitor.get_prometheus_metrics() return Response( content=metrics_data, media_type="text/plain; version=0.0.4; charset=utf-8" ) except Exception as e: app_logger.error(f" Error getting Prometheus metrics: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi lay Prometheus metrics" ) @app.get("/monitor/alerts") async def get_active_alerts( admin_user: NguoiDung = Depends(get_admin_user) ): """ Danh sach canh bao dang hoat dong (Admin only)""" try: monitor = get_performance_monitor() current_metrics = monitor.collect_system_metrics() alerts = monitor.check_alert_conditions(current_metrics) return { "active_alerts": alerts, "total_alerts": len(alerts), "critical_alerts": len([a for a in alerts if a.get('severity') == 'critical']), "warning_alerts": len([a for a in alerts if a.get('severity') == 'warning']), "checked_at": datetime.now().isoformat() } except Exception as e: app_logger.error(f" Error getting alerts: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi lay danh sach canh bao" ) # PAYMENT ENDPOINTS - VNPay Integration Hub! @app.post("/payments/create") async def create_payment( order_id: int = Query(..., description=" ID don hang"), payment_method: str = Query("vnpay", description=" Phuong thuc thanh toan"), return_url: Optional[str] = Query(None, description=" URL tra ve sau thanh toan"), current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Tao giao dich thanh toan moi""" try: payment_service = get_payment_service(db) # Default return URL if not provided if not return_url: return_url = "https://fado.vn/payment/return" ipn_url = "https://fado.vn/api/payments/webhook/vnpay" result = payment_service.create_payment_transaction( order_id=order_id, payment_method=payment_method, return_url=return_url, ipn_url=ipn_url ) if result['success']: # Log payment creation log_business_event("PAYMENT_CREATED", { "user_id": current_user.id, "order_id": order_id, "payment_method": payment_method, "transaction_id": result.get('transaction_id'), "amount": result.get('amount') }) # Send notification from websocket_service import notify_business_milestone await notify_business_milestone( "payment_created", f"Tao thanh toan cho don hang #{order_id}", result.get('amount', 0), {"payment_method": payment_method, "user": current_user.ho_ten} ) return result except Exception as e: app_logger.error(f" Error creating payment: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi tao giao dich thanh toan" ) @app.post("/payments/webhook/vnpay") async def vnpay_webhook(request: Request, db: Session = Depends(get_db)): """ Webhook handler cho VNPay IPN""" try: # Get form data from VNPay form_data = await request.form() callback_params = dict(form_data) payment_service = get_payment_service(db) result = payment_service.handle_payment_callback('vnpay', callback_params) if result['success']: if result.get('payment_successful'): app_logger.info(" VNPay webhook: Payment successful") # Send success notification from websocket_service import notify_business_milestone await notify_business_milestone( "payment_completed", "Thanh toan thanh cong", result.get('amount', 0), {"gateway": "vnpay", "status": "success"} ) return {"RspCode": "00", "Message": "success"} else: app_logger.warning(" VNPay webhook: Payment failed") return {"RspCode": "99", "Message": "payment failed"} else: app_logger.error(f" VNPay webhook error: {result.get('error')}") return {"RspCode": "99", "Message": "verification failed"} except Exception as e: app_logger.error(f" Error processing VNPay webhook: {str(e)}") return {"RspCode": "99", "Message": "system error"} @app.get("/payments/return") async def payment_return( request: Request, db: Session = Depends(get_db) ): """ Payment return URL handler""" try: # Get query parameters from payment gateway query_params = dict(request.query_params) payment_service = get_payment_service(db) result = payment_service.handle_payment_callback('vnpay', query_params) if result['success']: payment_status = "success" if result.get('payment_successful') else "failed" amount = result.get('amount', 0) return { "success": True, "payment_status": payment_status, "amount": amount, "message": "Thanh toan thanh cong" if payment_status == "success" else "Thanh toan that bai", "redirect_url": f"https://fado.vn/orders?payment={payment_status}" } else: return { "success": False, "payment_status": "error", "message": result.get('error', 'Loi xu ly thanh toan'), "redirect_url": "https://fado.vn/orders?payment=error" } except Exception as e: app_logger.error(f" Error processing payment return: {str(e)}") return { "success": False, "payment_status": "error", "message": "Loi he thong", "redirect_url": "https://fado.vn/orders?payment=error" } @app.get("/payments/supported-methods") async def get_supported_payment_methods(): """ Danh sach phuong thuc thanh toan ho tro""" try: from integrations.payment.vnpay import create_vnpay_gateway vnpay = create_vnpay_gateway() supported_banks = vnpay.get_supported_banks() return { "success": True, "payment_methods": [ { "code": "vnpay", "name": "VNPay", "description": "Thanh toan qua VNPay", "logo": "https://vnpay.vn/assets/images/logo-icon/logo-primary.svg", "supported_banks": supported_banks } ], "default_method": "vnpay" } except Exception as e: app_logger.error(f" Error getting supported payment methods: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi lay phuong thuc thanh toan" ) # SHIPPING & LOGISTICS ENDPOINTS - GHN Integration Hub! @app.post("/shipping/calculate-fee") async def calculate_shipping_fee( to_district_id: int = Query(..., description=" ID quan/huyen dich"), to_ward_code: str = Query(..., description=" Ma phuong/xa dich"), weight: int = Query(..., description=" Can nang (gram)"), service_type_id: Optional[int] = Query(2, description=" Loai dich vu (2=Standard, 5=Express)"), cod_amount: Optional[int] = Query(0, description=" So tien COD"), current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Tinh phi van chuyen""" try: shipping_service = get_shipping_service(db) shipping_info = { 'to_district_id': to_district_id, 'to_ward_code': to_ward_code, 'weight': weight, 'service_type_id': service_type_id, 'cod_amount': cod_amount } result = shipping_service.calculate_shipping_cost(shipping_info) return result except Exception as e: app_logger.error(f" Error calculating shipping fee: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi tinh phi van chuyen" ) @app.post("/shipping/create-order") async def create_shipping_order( order_id: int = Query(..., description=" ID don hang"), to_district_id: int = Query(..., description=" ID quan/huyen dich"), to_ward_code: str = Query(..., description=" Ma phuong/xa dich"), weight: int = Query(500, description=" Can nang (gram)"), to_address: Optional[str] = Query(None, description=" Dia chi chi tiet"), service_type_id: Optional[int] = Query(2, description=" Loai dich vu"), cod_enabled: Optional[bool] = Query(False, description=" Co thu COD khong"), current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Tao don van chuyen""" try: shipping_service = get_shipping_service(db) shipping_info = { 'to_district_id': to_district_id, 'to_ward_code': to_ward_code, 'weight': weight, 'service_type_id': service_type_id, 'cod_enabled': cod_enabled, 'to_address': to_address } result = shipping_service.create_shipping_order(order_id, shipping_info) if result['success']: # Log shipping creation log_business_event("SHIPPING_CREATED", { "user_id": current_user.id, "order_id": order_id, "shipping_code": result.get('shipping_code'), "provider": "ghn", "total_fee": result.get('total_fee') }) # Send notification from websocket_service import notify_business_milestone await notify_business_milestone( "shipping_created", f"Tao van chuyen cho don hang #{order_id}", result.get('total_fee', 0), {"provider": "ghn", "user": current_user.ho_ten} ) return result except Exception as e: app_logger.error(f" Error creating shipping order: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi tao don van chuyen" ) @app.get("/shipping/track/{shipping_code}") async def track_shipping_order( shipping_code: str, current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Theo doi don van chuyen""" try: shipping_service = get_shipping_service(db) result = shipping_service.track_shipping_order(shipping_code) return result except Exception as e: app_logger.error(f" Error tracking shipping order: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi theo doi don van chuyen" ) @app.post("/shipping/cancel") async def cancel_shipping_orders( shipping_codes: List[str] = Query(..., description=" Danh sach ma van chuyen"), reason: str = Query("Huy theo yeu cau", description=" Ly do huy"), current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Huy don van chuyen""" try: shipping_service = get_shipping_service(db) result = shipping_service.cancel_shipping_order(shipping_codes, reason) if result['success']: # Log shipping cancellation log_business_event("SHIPPING_CANCELLED", { "user_id": current_user.id, "shipping_codes": shipping_codes, "reason": reason, "provider": "ghn" }) return result except Exception as e: app_logger.error(f" Error cancelling shipping orders: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi huy don van chuyen" ) @app.get("/shipping/provinces") async def get_provinces( current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Lay danh sach tinh/thanh pho""" try: shipping_service = get_shipping_service(db) return shipping_service.get_provinces() except Exception as e: app_logger.error(f" Error getting provinces: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi lay danh sach tinh" ) @app.get("/shipping/districts/{province_id}") async def get_districts( province_id: int, current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Lay danh sach quan/huyen""" try: shipping_service = get_shipping_service(db) return shipping_service.get_districts(province_id) except Exception as e: app_logger.error(f" Error getting districts: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi lay danh sach quan/huyen" ) @app.get("/shipping/wards/{district_id}") async def get_wards( district_id: int, current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Lay danh sach phuong/xa""" try: shipping_service = get_shipping_service(db) return shipping_service.get_wards(district_id) except Exception as e: app_logger.error(f" Error getting wards: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi lay danh sach phuong/xa" ) @app.get("/shipping/services/{to_district_id}") async def get_available_services( to_district_id: int, current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Lay dich vu van chuyen co san""" try: shipping_service = get_shipping_service(db) return shipping_service.get_available_services(to_district_id) except Exception as e: app_logger.error(f" Error getting available services: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi lay dich vu van chuyen" ) @app.post("/shipping/print-token") async def generate_print_token( shipping_codes: List[str] = Query(..., description=" Danh sach ma van chuyen"), current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Tao token in don hang""" try: shipping_service = get_shipping_service(db) result = shipping_service.generate_print_token(shipping_codes) return result except Exception as e: app_logger.error(f" Error generating print token: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi tao token in" ) @app.get("/shipping/statistics") async def get_shipping_statistics( days: int = Query(30, description=" So ngay thong ke", ge=1, le=365), manager_user: NguoiDung = Depends(get_manager_user), db: Session = Depends(get_db) ): """ Thong ke van chuyen (Manager+ only)""" try: shipping_service = get_shipping_service(db) result = shipping_service.get_shipping_statistics(days) return result except Exception as e: app_logger.error(f" Error getting shipping statistics: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Loi khi lay thong ke van chuyen" ) # ====================================================================== # COMMUNICATION ENDPOINTS - Phase 6 Sprint 3 # ====================================================================== @app.post("/communication/send-message") async def send_unified_message( request_data: dict, current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Gui tin nhan qua nhieu kenh""" try: communication_service = get_communication_service(db) customer_id = request_data.get('customer_id') message_data = request_data.get('message_data', {}) channels = request_data.get('channels', ['email']) if not customer_id: raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail="Thieu customer_id" ) # Convert string channels to enum channel_enums = [] for channel in channels: try: channel_enums.append(CommunicationChannel(channel)) except ValueError: raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail=f"Kenh {channel} khong hop le. Cac kenh hop le: email, sms, whatsapp" ) result = communication_service.send_unified_message( customer_id=customer_id, message_data=message_data, channels=channel_enums ) # Log activity log_user_action( user_id=str(current_user.id), action="send_message", resource="communication", resource_id=str(customer_id) ) return result except Exception as e: app_logger.error(f" Error sending unified message: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Loi khi gui tin nhan: {str(e)}" ) @app.post("/communication/trigger-notification") async def trigger_automated_notification( request_data: dict, current_user: NguoiDung = Depends(get_current_active_user), db: Session = Depends(get_db) ): """ Trigger thong bao tu dong""" try: communication_service = get_communication_service(db) trigger = request_data.get('trigger') customer_id = request_data.get('customer_id') order_id = request_data.get('order_id') additional_data = request_data.get('additional_data', {}) if not trigger or not customer_id: raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail="Thieu trigger hoac customer_id" ) # Convert string trigger to enum try: trigger_enum = NotificationTrigger(trigger) except ValueError: valid_triggers = [t.value for t in NotificationTrigger] raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail=f"Trigger {trigger} khong hop le. Cac trigger hop le: {valid_triggers}" ) # Prepare data data = { "customer_id": customer_id, "order_id": order_id, **additional_data } result = communication_service.trigger_automated_notification(trigger_enum, data) # Log activity log_user_action( user_id=str(current_user.id), action="trigger_notification", resource="communication", resource_id=f"{trigger}_{customer_id}" ) return result except Exception as e: app_logger.error(f" Error triggering notification: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Loi khi trigger thong bao: {str(e)}" ) @app.post("/communication/send-campaign") async def send_campaign_message( request_data: dict, manager_user: NguoiDung = Depends(get_manager_user), db: Session = Depends(get_db) ): """ Gui campaign message (Manager+ only)""" try: communication_service = get_communication_service(db) campaign_data = request_data.get('campaign_data', {}) target_customers = request_data.get('target_customers') if not campaign_data: raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail="Thieu campaign_data" ) result = communication_service.send_campaign_message( campaign_data=campaign_data, target_customers=target_customers ) # Log business event log_business_event( event_type="campaign_sent", description=f"Campaign '{campaign_data.get('campaign_name', 'Unknown')}' sent to {result.get('total_customers', 0)} customers", user_id=manager_user.id ) return result except Exception as e: app_logger.error(f" Error sending campaign: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Loi khi gui campaign: {str(e)}" ) @app.get("/communication/statistics") async def get_communication_statistics( days: int = Query(30, description=" So ngay thong ke", ge=1, le=365), manager_user: NguoiDung = Depends(get_manager_user), db: Session = Depends(get_db) ): """ Thong ke communication (Manager+ only)""" try: communication_service = get_communication_service(db) result = communication_service.get_communication_statistics(days) return result except Exception as e: app_logger.error(f" Error getting communication statistics: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Loi khi lay thong ke communication: {str(e)}" ) # ====================================================================== # TEMPLATE ENGINE ENDPOINTS # ====================================================================== @app.get("/templates") async def get_template_list( current_user: NguoiDung = Depends(get_current_active_user) ): """ Lay danh sach templates""" try: template_engine = create_template_engine() result = template_engine.get_template_list() return result except Exception as e: app_logger.error(f" Error getting template list: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Loi khi lay danh sach templates: {str(e)}" ) @app.post("/templates/{template_id}/render") async def render_template( template_id: str, request_data: dict, current_user: NguoiDung = Depends(get_current_active_user) ): """ Render template voi variables""" try: template_engine = create_template_engine() variables = request_data.get('variables', {}) result = template_engine.render_template(template_id, variables) # Log activity log_user_action( user_id=str(current_user.id), action="render_template", resource="template", resource_id=template_id ) return result except Exception as e: app_logger.error(f" Error rendering template: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Loi khi render template: {str(e)}" ) @app.get("/templates/{template_id}/preview") async def get_template_preview( template_id: str, current_user: NguoiDung = Depends(get_current_active_user) ): """ Xem preview template voi sample data""" try: template_engine = create_template_engine() result = template_engine.get_template_preview(template_id) return result except Exception as e: app_logger.error(f" Error getting template preview: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Loi khi xem preview template: {str(e)}" ) @app.post("/templates/render-dynamic") async def render_dynamic_template( request_data: dict, current_user: NguoiDung = Depends(get_current_active_user) ): """ Render dynamic template""" try: from services.template_engine import TemplateType, ContentFormat template_engine = create_template_engine() content = request_data.get('content', '') variables = request_data.get('variables', {}) template_type = request_data.get('template_type', 'email') content_format = request_data.get('content_format', 'html') # Convert string enums try: template_type_enum = TemplateType(template_type) content_format_enum = ContentFormat(content_format) except ValueError as e: raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail=f"Invalid enum value: {str(e)}" ) result = template_engine.render_dynamic_template( content=content, variables=variables, template_type=template_type_enum, content_format=content_format_enum ) return result except Exception as e: app_logger.error(f" Error rendering dynamic template: {str(e)}") raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Loi khi render dynamic template: {str(e)}" ) # API sieu dinh da hoan thanh! # Gio co the quan ly CRM nhu mot ong hoang! if __name__ == "__main__": import uvicorn print(" Starting FADO CRM API...") uvicorn.run(app, host="0.0.0.0", port=8000)