# -*- coding: utf-8 -*-
# FADO CRM Demo Data Creator - Tao du lieu mau sieu cool!
# Script nay se tao du lieu demo de test he thong nhu mot pro!

import sys
import os

# Thiet lap UTF-8 encoding cho Windows
if os.name == 'nt':  # Windows
    os.system('chcp 65001 > nul')
import random
from datetime import datetime, timedelta
from sqlalchemy.orm import sessionmaker
from database import engine, create_tables
from models import *

# üè≠ T·∫°o session
Session = sessionmaker(bind=engine)

def create_demo_customers():
    """Tao khach hang demo voi data that nhu the"""
    session = Session()

    customers_data = [
        {
            "ho_ten": "Nguy·ªÖn VƒÉn Anh",
            "email": "nguyenvananh@gmail.com",
            "so_dien_thoai": "0987654321",
            "dia_chi": "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM",
            "loai_khach": LoaiKhachHang.VIP,
            "tong_tien_da_mua": 50000000.0,
            "so_don_thanh_cong": 15,
            "ghi_chu": "Kh√°ch VIP t·ª´ 2022, r·∫•t uy t√≠n"
        },
        {
            "ho_ten": "Tr·∫ßn Th·ªã B√¨nh",
            "email": "tranthibinh@yahoo.com",
            "so_dien_thoai": "0912345678",
            "dia_chi": "456 ƒê∆∞·ªùng XYZ, Qu·∫≠n 3, TP.HCM",
            "loai_khach": LoaiKhachHang.THAN_THIET,
            "tong_tien_da_mua": 25000000.0,
            "so_don_thanh_cong": 8,
            "ghi_chu": "Kh√°ch th∆∞·ªùng xuy√™n mua m·ªπ ph·∫©m"
        },
        {
            "ho_ten": "L√™ Minh C∆∞·ªùng",
            "email": "leminhcuong@hotmail.com",
            "so_dien_thoai": "0909123456",
            "dia_chi": "789 ƒê∆∞·ªùng DEF, Qu·∫≠n 7, TP.HCM",
            "loai_khach": LoaiKhachHang.MOI,
            "tong_tien_da_mua": 3500000.0,
            "so_don_thanh_cong": 2,
            "ghi_chu": "Kh√°ch m·ªõi, quan t√¢m ƒë·∫øn ƒë·ªì c√¥ng ngh·ªá"
        },
        {
            "ho_ten": "Ph·∫°m Thu H√†",
            "email": "phamthuha@gmail.com",
            "so_dien_thoai": "0976543210",
            "dia_chi": "321 ƒê∆∞·ªùng GHI, Qu·∫≠n B√¨nh Th·∫°nh, TP.HCM",
            "loai_khach": LoaiKhachHang.THAN_THIET,
            "tong_tien_da_mua": 18000000.0,
            "so_don_thanh_cong": 6,
            "ghi_chu": "Th√≠ch mua qu·∫ßn √°o v√† ph·ª• ki·ªán"
        },
        {
            "ho_ten": "Ho√†ng VƒÉn ƒê·ª©c",
            "email": "hoangvanduc@gmail.com",
            "so_dien_thoai": "0931234567",
            "dia_chi": "654 ƒê∆∞·ªùng JKL, Qu·∫≠n 2, TP.HCM",
            "loai_khach": LoaiKhachHang.MOI,
            "tong_tien_da_mua": 1200000.0,
            "so_don_thanh_cong": 1,
            "ghi_chu": "Kh√°ch m·ªõi, l·∫ßn ƒë·∫ßu mua h·ªô"
        }
    ]

    customers = []
    for data in customers_data:
        customer = KhachHang(**data)
        session.add(customer)
        customers.append(customer)

    session.commit()
    print(f"‚úÖ ƒê√£ t·∫°o {len(customers)} kh√°ch h√†ng demo!")
    return customers

def create_demo_products():
    """üì¶ T·∫°o s·∫£n ph·∫©m demo v·ªõi ƒëa d·∫°ng lo·∫°i h√†ng"""
    session = Session()

    products_data = [
        {
            "ten_san_pham": "iPhone 15 Pro Max 256GB",
            "link_goc": "https://www.apple.com/iphone-15-pro/",
            "gia_goc": 1199.0,
            "gia_ban": 32000000.0,
            "mo_ta": "iPhone m·ªõi nh·∫•t v·ªõi chip A17 Pro, camera titanium",
            "hinh_anh_url": "https://example.com/iphone15.jpg",
            "trong_luong": 0.2,
            "kich_thuoc": "159.9 x 76.7 x 8.25 mm",
            "danh_muc": "ƒêi·ªán tho·∫°i",
            "quoc_gia_nguon": "M·ªπ"
        },
        {
            "ten_san_pham": "Nike Air Jordan 1 High",
            "link_goc": "https://www.nike.com/air-jordan-1",
            "gia_goc": 170.0,
            "gia_ban": 4500000.0,
            "mo_ta": "Gi√†y sneaker iconic c·ªßa Jordan Brand",
            "hinh_anh_url": "https://example.com/jordan1.jpg",
            "trong_luong": 0.8,
            "kich_thuoc": "Size 42",
            "danh_muc": "Gi√†y d√©p",
            "quoc_gia_nguon": "M·ªπ"
        },
        {
            "ten_san_pham": "Chanel No.5 Eau de Parfum",
            "link_goc": "https://www.chanel.com/perfume",
            "gia_goc": 132.0,
            "gia_ban": 3800000.0,
            "mo_ta": "N∆∞·ªõc hoa iconic c·ªßa Chanel, m√πi h∆∞∆°ng sang tr·ªçng",
            "hinh_anh_url": "https://example.com/chanel5.jpg",
            "trong_luong": 0.1,
            "kich_thuoc": "50ml",
            "danh_muc": "M·ªπ ph·∫©m",
            "quoc_gia_nguon": "Ph√°p"
        },
        {
            "ten_san_pham": "MacBook Pro M3 14 inch",
            "link_goc": "https://www.apple.com/macbook-pro-14/",
            "gia_goc": 1999.0,
            "gia_ban": 52000000.0,
            "mo_ta": "Laptop Pro v·ªõi chip M3, hi·ªáu nƒÉng ƒë·ªânh cao",
            "hinh_anh_url": "https://example.com/macbook.jpg",
            "trong_luong": 1.6,
            "kich_thuoc": "31.26 x 22.12 x 1.55 cm",
            "danh_muc": "Laptop",
            "quoc_gia_nguon": "M·ªπ"
        },
        {
            "ten_san_pham": "Louis Vuitton Speedy 30",
            "link_goc": "https://us.louisvuitton.com/speedy-30",
            "gia_goc": 1570.0,
            "gia_ban": 42000000.0,
            "mo_ta": "T√∫i x√°ch n·ªØ iconic c·ªßa LV, da monogram",
            "hinh_anh_url": "https://example.com/lvspeedy.jpg",
            "trong_luong": 0.5,
            "kich_thuoc": "30 x 21 x 17 cm",
            "danh_muc": "T√∫i x√°ch",
            "quoc_gia_nguon": "Ph√°p"
        },
        {
            "ten_san_pham": "Sony WH-1000XM5 Headphones",
            "link_goc": "https://www.sony.com/headphones",
            "gia_goc": 399.0,
            "gia_ban": 10500000.0,
            "mo_ta": "Tai nghe ch·ªëng ·ªìn t·ªët nh·∫•t th·∫ø gi·ªõi",
            "hinh_anh_url": "https://example.com/sony.jpg",
            "trong_luong": 0.25,
            "kich_thuoc": "Foldable design",
            "danh_muc": "√Çm thanh",
            "quoc_gia_nguon": "Nh·∫≠t B·∫£n"
        }
    ]

    products = []
    for data in products_data:
        product = SanPham(**data)
        session.add(product)
        products.append(product)

    session.commit()
    print(f"‚úÖ ƒê√£ t·∫°o {len(products)} s·∫£n ph·∫©m demo!")
    return products

def create_demo_orders(customers, products):
    """üìã T·∫°o ƒë∆°n h√†ng demo v·ªõi c√°c tr·∫°ng th√°i kh√°c nhau"""
    session = Session()

    # Danh s√°ch tr·∫°ng th√°i ƒë·ªÉ random
    statuses = list(TrangThaiDonHang)

    orders = []
    for i in range(10):
        # Random ch·ªçn kh√°ch h√†ng
        customer = random.choice(customers)

        # Random ch·ªçn 1-3 s·∫£n ph·∫©m
        selected_products = random.sample(products, random.randint(1, 3))

        # T√≠nh t·ªïng gi√° s·∫£n ph·∫©m
        tong_gia_san_pham = sum(p.gia_ban or 0 for p in selected_products)

        # Random c√°c lo·∫°i ph√≠
        phi_mua_ho = tong_gia_san_pham * 0.05  # 5% ph√≠ mua h·ªô
        phi_van_chuyen = random.randint(200000, 800000)  # 200k-800k
        phi_khac = random.randint(0, 300000)  # 0-300k

        tong_tien = tong_gia_san_pham + phi_mua_ho + phi_van_chuyen + phi_khac

        # T·∫°o m√£ ƒë∆°n h√†ng
        ma_don_hang = f"FD{datetime.now().strftime('%y%m%d')}{i+1:03d}"

        # Random th·ªùi gian t·∫°o (trong 30 ng√†y qua)
        ngay_tao = datetime.now() - timedelta(days=random.randint(0, 30))

        order = DonHang(
            ma_don_hang=ma_don_hang,
            khach_hang_id=customer.id,
            tong_gia_san_pham=tong_gia_san_pham,
            phi_mua_ho=phi_mua_ho,
            phi_van_chuyen=phi_van_chuyen,
            phi_khac=phi_khac,
            tong_tien=tong_tien,
            trang_thai=random.choice(statuses),
            ngay_tao=ngay_tao,
            ngay_cap_nhat=ngay_tao + timedelta(hours=random.randint(1, 48)),
            ghi_chu_khach=f"Ghi ch√∫ t·ª´ kh√°ch h√†ng cho ƒë∆°n {ma_don_hang}",
            ghi_chu_noi_bo=f"Ghi ch√∫ n·ªôi b·ªô cho ƒë∆°n {ma_don_hang}"
        )

        session.add(order)
        session.flush()  # ƒê·ªÉ l·∫•y ID c·ªßa order

        # T·∫°o chi ti·∫øt ƒë∆°n h√†ng
        for product in selected_products:
            chi_tiet = ChiTietDonHang(
                don_hang_id=order.id,
                san_pham_id=product.id,
                so_luong=random.randint(1, 2),
                gia_mua=product.gia_ban,
                ghi_chu=f"Chi ti·∫øt cho s·∫£n ph·∫©m {product.ten_san_pham}"
            )
            session.add(chi_tiet)

        orders.append(order)

    session.commit()
    print(f"‚úÖ ƒê√£ t·∫°o {len(orders)} ƒë∆°n h√†ng demo!")
    return orders

def create_demo_contact_history(customers):
    """üìû T·∫°o l·ªãch s·ª≠ li√™n h·ªá demo"""
    session = Session()

    contact_types = ["call", "sms", "email"]
    nhan_vien_list = ["Nguy·ªÖn Th·ªã A", "Tr·∫ßn VƒÉn B", "L√™ Th·ªã C", "Ph·∫°m VƒÉn D"]

    contacts = []
    for i in range(20):
        customer = random.choice(customers)
        loai_lien_he = random.choice(contact_types)

        # N·ªôi dung m·∫´u theo lo·∫°i li√™n h·ªá
        noi_dung_mau = {
            "call": [
                "G·ªçi x√°c nh·∫≠n ƒë∆°n h√†ng, kh√°ch ƒë·ªìng √Ω thanh to√°n",
                "T∆∞ v·∫•n s·∫£n ph·∫©m cho kh√°ch, gi·∫£i ƒë√°p th·∫Øc m·∫Øc",
                "Th√¥ng b√°o h√†ng v·ªÅ kho, h·∫πn giao h√†ng",
                "X·ª≠ l√Ω khi·∫øu n·∫°i v·ªÅ ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m"
            ],
            "sms": [
                "G·ª≠i SMS x√°c nh·∫≠n ƒë∆°n h√†ng v√† th√¥ng tin thanh to√°n",
                "Th√¥ng b√°o tr·∫°ng th√°i ƒë∆°n h√†ng qua SMS",
                "G·ª≠i m√£ tracking cho kh√°ch theo d√µi",
                "SMS nh·∫Øc nh·ªü thanh to√°n ƒë∆°n h√†ng"
            ],
            "email": [
                "G·ª≠i email b√°o gi√° chi ti·∫øt cho kh√°ch h√†ng",
                "Email x√°c nh·∫≠n ƒë∆°n h√†ng v√† h∆∞·ªõng d·∫´n thanh to√°n",
                "G·ª≠i h√≥a ƒë∆°n v√† th√¥ng tin giao h√†ng",
                "Email c·∫£m ∆°n v√† khuy·∫øn m√£i cho l·∫ßn mua ti·∫øp theo"
            ]
        }

        ket_qua_mau = [
            "Th√†nh c√¥ng, kh√°ch h√†i l√≤ng",
            "C·∫ßn follow up th√™m",
            "Kh√°ch y√™u c·∫ßu th√™m th√¥ng tin",
            "ƒê√£ gi·∫£i quy·∫øt xong v·∫•n ƒë·ªÅ",
            "Chuy·ªÉn cho b·ªô ph·∫≠n kh√°c x·ª≠ l√Ω"
        ]

        ngay_lien_he = datetime.now() - timedelta(days=random.randint(0, 30))

        contact = LichSuLienHe(
            khach_hang_id=customer.id,
            loai_lien_he=loai_lien_he,
            noi_dung=random.choice(noi_dung_mau[loai_lien_he]),
            nhan_vien_xu_ly=random.choice(nhan_vien_list),
            ket_qua=random.choice(ket_qua_mau),
            ngay_lien_he=ngay_lien_he
        )

        session.add(contact)
        contacts.append(contact)

    session.commit()
    print(f"‚úÖ ƒê√£ t·∫°o {len(contacts)} l·ªãch s·ª≠ li√™n h·ªá demo!")
    return contacts

def main():
    """üéØ H√†m ch√≠nh - T·∫°o to√†n b·ªô demo data"""
    print("üé≠ FADO CRM Demo Data Creator")
    print("=" * 40)

    try:
        # 1. T·∫°o tables n·∫øu ch∆∞a c√≥
        print("üèóÔ∏è ƒêang t·∫°o database tables...")
        create_tables()

        # 2. T·∫°o demo data
        print("üë• ƒêang t·∫°o kh√°ch h√†ng demo...")
        customers = create_demo_customers()

        print("üì¶ ƒêang t·∫°o s·∫£n ph·∫©m demo...")
        products = create_demo_products()

        print("üìã ƒêang t·∫°o ƒë∆°n h√†ng demo...")
        orders = create_demo_orders(customers, products)

        print("üìû ƒêang t·∫°o l·ªãch s·ª≠ li√™n h·ªá demo...")
        contacts = create_demo_contact_history(customers)

        print("\n" + "=" * 40)
        print("üéâ HO√ÄN TH√ÄNH T·∫†O DEMO DATA!")
        print("=" * 40)
        print(f"üë• Kh√°ch h√†ng: {len(customers)}")
        print(f"üì¶ S·∫£n ph·∫©m: {len(products)}")
        print(f"üìã ƒê∆°n h√†ng: {len(orders)}")
        print(f"üìû L·ªãch s·ª≠ li√™n h·ªá: {len(contacts)}")
        print("\nüöÄ Gi·ªù c√≥ th·ªÉ kh·ªüi ƒë·ªông server v√† test CRM!")

    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o demo data: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()