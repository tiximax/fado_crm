# -*- coding: utf-8 -*-
"""
Advanced Export/Import Service
Xu·∫•t d·ªØ li·ªáu Excel v√† PDF reports chuy√™n nghi·ªáp cho FADO CRM
"""

from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Union
from sqlalchemy.orm import Session
from sqlalchemy import text
import io
import base64
from pathlib import Path
import json

# Optional dependencies - s·∫Ω fallback n·∫øu kh√¥ng c√≥
try:
    import pandas as pd
    PANDAS_AVAILABLE = True
except ImportError:
    PANDAS_AVAILABLE = False

try:
    from reportlab.lib import colors
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False

from models import Customer, Product, Order, ContactHistory
from database import get_db
from logging_config import app_logger


class AdvancedExportService:
    """Service xu·∫•t d·ªØ li·ªáu n√¢ng cao"""

    def __init__(self, db: Session):
        self.db = db

    def export_customers_excel(self, filters: Optional[Dict] = None) -> Dict[str, Any]:
        """üìä Xu·∫•t danh s√°ch kh√°ch h√†ng ra Excel"""

        if not PANDAS_AVAILABLE:
            return {
                "error": "Pandas library kh√¥ng kh·∫£ d·ª•ng. C√†i ƒë·∫∑t: pip install pandas openpyxl"
            }

        try:
            # Build query with filters
            query = """
                SELECT
                    c.customer_id,
                    c.full_name,
                    c.phone,
                    c.email,
                    c.address,
                    c.customer_type,
                    c.created_at,
                    COUNT(o.order_id) as total_orders,
                    COALESCE(SUM(o.total_amount), 0) as lifetime_value,
                    MAX(o.order_date) as last_order_date,
                    COUNT(ch.contact_id) as total_contacts
                FROM customers c
                LEFT JOIN orders o ON c.customer_id = o.customer_id
                LEFT JOIN contact_history ch ON c.customer_id = ch.customer_id
                GROUP BY c.customer_id, c.full_name, c.phone, c.email, c.address, c.customer_type, c.created_at
                ORDER BY lifetime_value DESC
            """

            results = self.db.execute(text(query)).fetchall()

            # Convert to DataFrame
            data = [dict(row._mapping) for row in results]
            df = pd.DataFrame(data)

            # Format columns
            if not df.empty:
                df['lifetime_value'] = df['lifetime_value'].apply(lambda x: f"{x:,.0f} VND")
                df['created_at'] = pd.to_datetime(df['created_at']).dt.strftime('%d/%m/%Y')
                df['last_order_date'] = pd.to_datetime(df['last_order_date']).dt.strftime('%d/%m/%Y')

                # Rename columns to Vietnamese
                df.columns = [
                    'ID Kh√°ch h√†ng', 'H·ªç t√™n', 'S·ªë ƒëi·ªán tho·∫°i', 'Email', 'ƒê·ªãa ch·ªâ',
                    'Lo·∫°i kh√°ch h√†ng', 'Ng√†y t·∫°o', 'T·ªïng ƒë∆°n h√†ng', 'Gi√° tr·ªã lifetime',
                    'ƒê∆°n h√†ng cu·ªëi', 'L·∫ßn li√™n h·ªá'
                ]

            # Save to Excel
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='Danh s√°ch kh√°ch h√†ng', index=False)

                # Get workbook and worksheet
                workbook = writer.book
                worksheet = writer.sheets['Danh s√°ch kh√°ch h√†ng']

                # Auto-adjust column widths
                for column in worksheet.columns:
                    max_length = 0
                    column_letter = column[0].column_letter
                    for cell in column:
                        try:
                            if len(str(cell.value)) > max_length:
                                max_length = len(str(cell.value))
                        except:
                            pass
                    adjusted_width = min(max_length + 2, 50)
                    worksheet.column_dimensions[column_letter].width = adjusted_width

            output.seek(0)
            excel_data = base64.b64encode(output.read()).decode('utf-8')

            return {
                "success": True,
                "filename": f"khach_hang_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                "data": excel_data,
                "total_records": len(df),
                "generated_at": datetime.now().isoformat()
            }

        except Exception as e:
            app_logger.error(f"‚ùå Error exporting customers Excel: {str(e)}")
            return {"error": f"L·ªói khi xu·∫•t Excel: {str(e)}"}

    def export_orders_excel(self, date_from: Optional[str] = None, date_to: Optional[str] = None) -> Dict[str, Any]:
        """üìã Xu·∫•t danh s√°ch ƒë∆°n h√†ng ra Excel"""

        if not PANDAS_AVAILABLE:
            return {
                "error": "Pandas library kh√¥ng kh·∫£ d·ª•ng. C√†i ƒë·∫∑t: pip install pandas openpyxl"
            }

        try:
            # Default date range (last 3 months)
            if not date_from:
                date_from = (datetime.now() - timedelta(days=90)).strftime('%Y-%m-%d')
            if not date_to:
                date_to = datetime.now().strftime('%Y-%m-%d')

            query = """
                SELECT
                    o.order_id,
                    o.order_code,
                    c.full_name as customer_name,
                    c.phone as customer_phone,
                    p.product_name,
                    p.category,
                    p.origin_country,
                    o.quantity,
                    o.unit_price,
                    o.service_fee,
                    o.shipping_fee,
                    o.additional_fee,
                    o.total_amount,
                    o.order_status,
                    o.order_date,
                    o.estimated_delivery,
                    o.notes
                FROM orders o
                JOIN customers c ON o.customer_id = c.customer_id
                JOIN products p ON o.product_id = p.product_id
                WHERE DATE(o.order_date) BETWEEN :date_from AND :date_to
                ORDER BY o.order_date DESC
            """

            results = self.db.execute(text(query), {
                "date_from": date_from,
                "date_to": date_to
            }).fetchall()

            # Convert to DataFrame
            data = [dict(row._mapping) for row in results]
            df = pd.DataFrame(data)

            if not df.empty:
                # Format money columns
                money_columns = ['unit_price', 'service_fee', 'shipping_fee', 'additional_fee', 'total_amount']
                for col in money_columns:
                    df[col] = df[col].apply(lambda x: f"{x:,.0f} VND" if pd.notna(x) else "0 VND")

                # Format date columns
                df['order_date'] = pd.to_datetime(df['order_date']).dt.strftime('%d/%m/%Y %H:%M')
                df['estimated_delivery'] = pd.to_datetime(df['estimated_delivery']).dt.strftime('%d/%m/%Y')

                # Rename columns
                df.columns = [
                    'ID ƒê∆°n h√†ng', 'M√£ ƒë∆°n h√†ng', 'T√™n kh√°ch h√†ng', 'SƒêT kh√°ch h√†ng',
                    'T√™n s·∫£n ph·∫©m', 'Danh m·ª•c', 'Xu·∫•t x·ª©', 'S·ªë l∆∞·ª£ng',
                    'Gi√° ƒë∆°n v·ªã', 'Ph√≠ d·ªãch v·ª•', 'Ph√≠ v·∫≠n chuy·ªÉn', 'Ph√≠ ph·ª•',
                    'T·ªïng ti·ªÅn', 'Tr·∫°ng th√°i', 'Ng√†y ƒë·∫∑t', 'D·ª± ki·∫øn giao', 'Ghi ch√∫'
                ]

            # Save to Excel with multiple sheets
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                # Main sheet
                df.to_excel(writer, sheet_name='Danh s√°ch ƒë∆°n h√†ng', index=False)

                # Summary sheet
                if not df.empty:
                    summary_data = {
                        'T·ªïng s·ªë ƒë∆°n h√†ng': [len(df)],
                        'T·ªïng doanh thu': [f"{df['T·ªïng ti·ªÅn'].str.replace(' VND', '').str.replace(',', '').astype(float).sum():,.0f} VND"],
                        'ƒê∆°n h√†ng ho√†n th√†nh': [len(df[df['Tr·∫°ng th√°i'] == 'Ho√†n th√†nh'])],
                        'ƒê∆°n h√†ng ƒëang x·ª≠ l√Ω': [len(df[df['Tr·∫°ng th√°i'] != 'Ho√†n th√†nh'])],
                    }
                    summary_df = pd.DataFrame(summary_data)
                    summary_df.to_excel(writer, sheet_name='T·ªïng quan', index=False)

                # Auto-adjust column widths
                for sheet_name in writer.sheets:
                    worksheet = writer.sheets[sheet_name]
                    for column in worksheet.columns:
                        max_length = 0
                        column_letter = column[0].column_letter
                        for cell in column:
                            try:
                                if len(str(cell.value)) > max_length:
                                    max_length = len(str(cell.value))
                            except:
                                pass
                        adjusted_width = min(max_length + 2, 50)
                        worksheet.column_dimensions[column_letter].width = adjusted_width

            output.seek(0)
            excel_data = base64.b64encode(output.read()).decode('utf-8')

            return {
                "success": True,
                "filename": f"don_hang_{date_from}_{date_to}.xlsx",
                "data": excel_data,
                "total_records": len(df),
                "date_range": {"from": date_from, "to": date_to},
                "generated_at": datetime.now().isoformat()
            }

        except Exception as e:
            app_logger.error(f"‚ùå Error exporting orders Excel: {str(e)}")
            return {"error": f"L·ªói khi xu·∫•t Excel: {str(e)}"}

    def generate_analytics_pdf_report(self, report_type: str = "monthly") -> Dict[str, Any]:
        """üìÑ T·∫°o b√°o c√°o PDF analytics chuy√™n nghi·ªáp"""

        if not REPORTLAB_AVAILABLE:
            return {
                "error": "ReportLab library kh√¥ng kh·∫£ d·ª•ng. C√†i ƒë·∫∑t: pip install reportlab"
            }

        try:
            # Create PDF buffer
            buffer = io.BytesIO()
            doc = SimpleDocTemplate(buffer, pagesize=A4)
            styles = getSampleStyleSheet()
            story = []

            # Custom styles
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Heading1'],
                fontSize=18,
                textColor=colors.HexColor('#2C3E50'),
                spaceAfter=30
            )

            heading_style = ParagraphStyle(
                'CustomHeading',
                parent=styles['Heading2'],
                fontSize=14,
                textColor=colors.HexColor('#34495E'),
                spaceAfter=12
            )

            # Title
            story.append(Paragraph("üõçÔ∏è B√ÅO C√ÅO PH√ÇN T√çCH FADO CRM", title_style))
            story.append(Paragraph(f"B√°o c√°o {report_type} - {datetime.now().strftime('%d/%m/%Y')}", styles['Normal']))
            story.append(Spacer(1, 20))

            # Business Overview
            story.append(Paragraph("üìä T·ªïng quan kinh doanh", heading_style))

            # Get business metrics
            metrics = self.db.execute(text("""
                SELECT
                    COUNT(DISTINCT c.customer_id) as total_customers,
                    COUNT(DISTINCT p.product_id) as total_products,
                    COUNT(o.order_id) as total_orders,
                    SUM(o.total_amount) as total_revenue
                FROM customers c
                CROSS JOIN products p
                LEFT JOIN orders o ON c.customer_id = o.customer_id
            """)).fetchone()

            metrics_data = [
                ['Ch·ªâ s·ªë', 'Gi√° tr·ªã'],
                ['T·ªïng kh√°ch h√†ng', f"{metrics.total_customers:,}"],
                ['T·ªïng s·∫£n ph·∫©m', f"{metrics.total_products:,}"],
                ['T·ªïng ƒë∆°n h√†ng', f"{metrics.total_orders:,}"],
                ['T·ªïng doanh thu', f"{metrics.total_revenue:,.0f} VND"],
            ]

            metrics_table = Table(metrics_data)
            metrics_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#3498DB')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))

            story.append(metrics_table)
            story.append(Spacer(1, 20))

            # Top Categories
            story.append(Paragraph("üèÜ Top danh m·ª•c s·∫£n ph·∫©m", heading_style))

            categories = self.db.execute(text("""
                SELECT p.category, COUNT(o.order_id) as orders, SUM(o.total_amount) as revenue
                FROM products p
                LEFT JOIN orders o ON p.product_id = o.product_id
                GROUP BY p.category
                ORDER BY revenue DESC
                LIMIT 5
            """)).fetchall()

            category_data = [['Danh m·ª•c', 'ƒê∆°n h√†ng', 'Doanh thu']]
            for cat in categories:
                category_data.append([
                    cat.category or 'N/A',
                    f"{cat.orders or 0:,}",
                    f"{cat.revenue or 0:,.0f} VND"
                ])

            category_table = Table(category_data)
            category_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#E74C3C')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))

            story.append(category_table)
            story.append(Spacer(1, 20))

            # Customer Types
            story.append(Paragraph("üë• Ph√¢n b·ªï kh√°ch h√†ng", heading_style))

            customer_types = self.db.execute(text("""
                SELECT customer_type, COUNT(*) as count,
                       AVG(
                           SELECT SUM(total_amount)
                           FROM orders
                           WHERE customer_id = c.customer_id
                       ) as avg_value
                FROM customers c
                GROUP BY customer_type
                ORDER BY count DESC
            """)).fetchall()

            customer_data = [['Lo·∫°i kh√°ch h√†ng', 'S·ªë l∆∞·ª£ng', 'Gi√° tr·ªã TB']]
            for ctype in customer_types:
                customer_data.append([
                    ctype.customer_type,
                    f"{ctype.count:,}",
                    f"{ctype.avg_value or 0:,.0f} VND"
                ])

            customer_table = Table(customer_data)
            customer_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#27AE60')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightcyan),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))

            story.append(customer_table)
            story.append(Spacer(1, 30))

            # Footer
            story.append(Paragraph("---", styles['Normal']))
            story.append(Paragraph(
                f"üìÖ B√°o c√°o ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi FADO CRM v√†o {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}",
                styles['Italic']
            ))

            # Build PDF
            doc.build(story)
            buffer.seek(0)
            pdf_data = base64.b64encode(buffer.read()).decode('utf-8')

            return {
                "success": True,
                "filename": f"bao_cao_fado_{report_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                "data": pdf_data,
                "report_type": report_type,
                "generated_at": datetime.now().isoformat()
            }

        except Exception as e:
            app_logger.error(f"‚ùå Error generating PDF report: {str(e)}")
            return {"error": f"L·ªói khi t·∫°o b√°o c√°o PDF: {str(e)}"}

    def export_business_intelligence_excel(self) -> Dict[str, Any]:
        """üß† Xu·∫•t b√°o c√°o Business Intelligence to√†n di·ªán"""

        if not PANDAS_AVAILABLE:
            return {
                "error": "Pandas library kh√¥ng kh·∫£ d·ª•ng. C√†i ƒë·∫∑t: pip install pandas openpyxl"
            }

        try:
            output = io.BytesIO()

            with pd.ExcelWriter(output, engine='openpyxl') as writer:

                # Sheet 1: Customer Analysis
                customer_analysis = self.db.execute(text("""
                    WITH customer_metrics AS (
                        SELECT
                            c.customer_id,
                            c.full_name,
                            c.customer_type,
                            COUNT(o.order_id) as order_count,
                            SUM(o.total_amount) as lifetime_value,
                            AVG(o.total_amount) as avg_order_value,
                            MIN(o.order_date) as first_order,
                            MAX(o.order_date) as last_order,
                            JULIANDAY('now') - JULIANDAY(MAX(o.order_date)) as days_since_last_order
                        FROM customers c
                        LEFT JOIN orders o ON c.customer_id = o.customer_id
                        GROUP BY c.customer_id, c.full_name, c.customer_type
                    )
                    SELECT * FROM customer_metrics ORDER BY lifetime_value DESC
                """)).fetchall()

                customer_df = pd.DataFrame([dict(row._mapping) for row in customer_analysis])
                customer_df.to_excel(writer, sheet_name='Ph√¢n t√≠ch kh√°ch h√†ng', index=False)

                # Sheet 2: Product Performance
                product_performance = self.db.execute(text("""
                    SELECT
                        p.product_name,
                        p.category,
                        p.origin_country,
                        COUNT(o.order_id) as total_orders,
                        SUM(o.quantity) as total_quantity,
                        SUM(o.total_amount) as total_revenue,
                        AVG(o.total_amount) as avg_order_value,
                        MAX(o.order_date) as last_sold
                    FROM products p
                    LEFT JOIN orders o ON p.product_id = o.product_id
                    GROUP BY p.product_id, p.product_name, p.category, p.origin_country
                    ORDER BY total_revenue DESC
                """)).fetchall()

                product_df = pd.DataFrame([dict(row._mapping) for row in product_performance])
                product_df.to_excel(writer, sheet_name='Hi·ªáu su·∫•t s·∫£n ph·∫©m', index=False)

                # Sheet 3: Sales Trends
                sales_trends = self.db.execute(text("""
                    SELECT
                        DATE(order_date) as order_date,
                        COUNT(*) as daily_orders,
                        SUM(total_amount) as daily_revenue,
                        COUNT(DISTINCT customer_id) as unique_customers
                    FROM orders
                    WHERE order_date >= DATE('now', '-90 days')
                    GROUP BY DATE(order_date)
                    ORDER BY order_date
                """)).fetchall()

                trends_df = pd.DataFrame([dict(row._mapping) for row in sales_trends])
                trends_df.to_excel(writer, sheet_name='Xu h∆∞·ªõng b√°n h√†ng', index=False)

                # Sheet 4: Communication Effectiveness
                comm_analysis = self.db.execute(text("""
                    SELECT
                        contact_type,
                        result,
                        COUNT(*) as contact_count,
                        COUNT(*) * 100.0 / SUM(COUNT(*)) OVER (PARTITION BY contact_type) as success_rate
                    FROM contact_history
                    GROUP BY contact_type, result
                    ORDER BY contact_type, contact_count DESC
                """)).fetchall()

                comm_df = pd.DataFrame([dict(row._mapping) for row in comm_analysis])
                comm_df.to_excel(writer, sheet_name='Hi·ªáu qu·∫£ li√™n h·ªá', index=False)

                # Auto-adjust all columns
                for sheet_name in writer.sheets:
                    worksheet = writer.sheets[sheet_name]
                    for column in worksheet.columns:
                        max_length = 0
                        column_letter = column[0].column_letter
                        for cell in column:
                            try:
                                if len(str(cell.value)) > max_length:
                                    max_length = len(str(cell.value))
                            except:
                                pass
                        adjusted_width = min(max_length + 2, 50)
                        worksheet.column_dimensions[column_letter].width = adjusted_width

            output.seek(0)
            excel_data = base64.b64encode(output.read()).decode('utf-8')

            return {
                "success": True,
                "filename": f"business_intelligence_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                "data": excel_data,
                "sheets_included": [
                    "Ph√¢n t√≠ch kh√°ch h√†ng", "Hi·ªáu su·∫•t s·∫£n ph·∫©m",
                    "Xu h∆∞·ªõng b√°n h√†ng", "Hi·ªáu qu·∫£ li√™n h·ªá"
                ],
                "generated_at": datetime.now().isoformat()
            }

        except Exception as e:
            app_logger.error(f"‚ùå Error exporting BI Excel: {str(e)}")
            return {"error": f"L·ªói khi xu·∫•t BI Excel: {str(e)}"}


def get_advanced_export_service(db: Session = None) -> AdvancedExportService:
    """Factory function ƒë·ªÉ t·∫°o advanced export service"""
    if db is None:
        db = next(get_db())
    return AdvancedExportService(db)